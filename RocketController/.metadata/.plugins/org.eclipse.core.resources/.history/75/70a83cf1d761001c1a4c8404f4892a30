
#include "bmp38x.h"
#include <math.h>


uint8_t BMP38X_Init(bmp_calibration_data *calib_data)
{



}

void BMP_Read_Data(barometer_t *BMP)
{

}

static float BMP_Compensate_T(uint32_t uncomp_temp, bmp_calibration_data *calib_data)
{

	float partial_data1;
	float partial_data2;

	partial_data1 = (float)(uncomp_temp - calib_data->t1);
	partial_data2 = (float)(partial_data1 * calib_data->t2);

	calib_data->t_comp = partial_data2 + (partial_data1 * partail_data1) * calib_data->t3;

	return(calib_data->t_comp);
}

static float BMP_Compensate_P(uint32_t uncomp_press, bmp_calibration_data *calib_data)
{

	float comp_press;

	float partial_data1;
	float partial_data2;
	float partial_data3;
	float partial_data4;
	float partial_out1;
	float partial_out2;


	partial_data1 = calib_data->p6 * calib_data->t_comp;
	partial_data2 = calib_data->p7 * (calib_data->t_comp * calib_data->t_comp);
	partial_data3 = calib_data->p8 * (calib_data->t_comp * calib_data->t_comp * calib_data->t_comp);
	partial_out1 = calib_data->p5 + partial_data1 + partial_data2 + partial_data3;

	partial_data1 = calib_data->p2 * calib_data->t_comp;
	partial_data2 = calib_data->p3 * (calib_data->t_comp * calib_data->t_comp);
	partial_data3 = calib_data->p4 * (calib_data->t_comp * calib_data->t_comp * calib_data->t_comp);
	partial_out2 = (float)uncomp_pres * (calib_data->p1 + partial_data1 + partial_data2 + partial_data3);

	partial_data1 = (float)uncomp_pres * (float)uncomp_pres;
	partial_data2 = calib_data->p9 + calib_data->p10 * calib_data->t_comp;
	partial_data3 = partial_data1 * partial_data2;
	partial_data4 = partial_data3 + ((float)uncomp_press * (float)uncomp_press * (float)uncomp_press * calib_data->p11);

	comp_press =  partial_out1 + partial_out2 + partial_data4;

	return(comp_press);


}
