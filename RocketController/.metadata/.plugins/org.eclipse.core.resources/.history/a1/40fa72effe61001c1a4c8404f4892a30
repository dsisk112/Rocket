
#include "bmp38x.h"
#include <math.h>

	GPIO_TypeDef *GPIO_CS;
	uint16_t GPIO_PIN_CS;
	SPI_HandleTypeDef hspi;


uint8_t BMP38X_Init(GPIO_TypeDef *GPIO_CS_let, uint16_t GPIO_CS_Num, SPI_HandleTypeDef spi, bmp_calibration_data *calib_data)
{
	GPIO_CS = GPIO_CS_let;
	GPIO_PIN_CS = GPIO_CS_Num;
	hspi = spi;

	unsigned char BMP_Test[3] = {REG_CHIP_ID | 0x80, 0x00, 0x00};
	unsigned char BMP_WhoOut[3] = {0x00, 0x00, 0x00};

	unsigned char Write_Power_On[6] = {REG_PWR_CNTRL, 0x0F, REG_OSR, 0x0D ,REG_ODR, 0x00};

	unsigned char CalibrationTX[23] = {REG_T1 | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	unsigned char CalibrationData[23] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


	HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(&hspi, BMP_Test, BMP_WhoOut, 3, 1000);
	HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi, Write_Power_On, 6, 1000);
	HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(&hspi, CalibrationTX, CalibrationData, 23, 1000);
	HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);




	if(BMP_WhoOut[2] == BMP_CHIP_ID)
		return(HAL_OK);
	else
		return(1);
}

void BMP_Read_Data(barometer_t *BMP)
{

}

static float BMP_Compensate_T(uint32_t uncomp_temp, bmp_calibration_data *calib_data)
{

	float partial_data1;
	float partial_data2;

	partial_data1 = (float)(uncomp_temp - calib_data->t1);
	partial_data2 = (float)(partial_data1 * calib_data->t2);

	calib_data->t_comp = partial_data2 + (partial_data1 * partial_data1) * calib_data->t3;

	return(calib_data->t_comp);
}

static float BMP_Compensate_P(uint32_t uncomp_press, bmp_calibration_data *calib_data)
{

	float comp_press;

	float partial_data1;
	float partial_data2;
	float partial_data3;
	float partial_data4;
	float partial_out1;
	float partial_out2;


	partial_data1 = calib_data->p6 * calib_data->t_comp;
	partial_data2 = calib_data->p7 * (calib_data->t_comp * calib_data->t_comp);
	partial_data3 = calib_data->p8 * (calib_data->t_comp * calib_data->t_comp * calib_data->t_comp);
	partial_out1 = calib_data->p5 + partial_data1 + partial_data2 + partial_data3;

	partial_data1 = calib_data->p2 * calib_data->t_comp;
	partial_data2 = calib_data->p3 * (calib_data->t_comp * calib_data->t_comp);
	partial_data3 = calib_data->p4 * (calib_data->t_comp * calib_data->t_comp * calib_data->t_comp);
	partial_out2 = (float)uncomp_press * (calib_data->p1 + partial_data1 + partial_data2 + partial_data3);

	partial_data1 = (float)uncomp_press * (float)uncomp_press;
	partial_data2 = calib_data->p9 + calib_data->p10 * calib_data->t_comp;
	partial_data3 = partial_data1 * partial_data2;
	partial_data4 = partial_data3 + ((float)uncomp_press * (float)uncomp_press * (float)uncomp_press * calib_data->p11);

	comp_press =  partial_out1 + partial_out2 + partial_data4;

	return(comp_press);


}
