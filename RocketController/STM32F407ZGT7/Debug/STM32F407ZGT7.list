
STM32F407ZGT7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800a178  0800a178  0001a178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a298  0800a298  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a298  0800a298  0001a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a0  0800a2a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  200001e4  0800a48c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  0800a48c  00021f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee88  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c97  00000000  00000000  0003f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00042d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  000441f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c38  00000000  00000000  00045550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a20f  00000000  00000000  00069188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d70  00000000  00000000  00083397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b7c  00000000  00000000  0015615c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a15c 	.word	0x0800a15c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	0800a15c 	.word	0x0800a15c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <BMP38X_Init>:
	SPI_HandleTypeDef hspi_Baro;
	bmp_calibration_data *calib_data;


uint8_t BMP38X_Init(GPIO_TypeDef *GPIO_CS_let, uint16_t GPIO_CS_Num, SPI_HandleTypeDef spi, bmp_calibration_data *calib_data)
{
 8000e38:	b082      	sub	sp, #8
 8000e3a:	b5b0      	push	{r4, r5, r7, lr}
 8000e3c:	b094      	sub	sp, #80	; 0x50
 8000e3e:	af02      	add	r7, sp, #8
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e46:	e880 000c 	stmia.w	r0, {r2, r3}
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	807b      	strh	r3, [r7, #2]
	GPIO_CS_Baro = GPIO_CS_let;
 8000e4e:	4ac3      	ldr	r2, [pc, #780]	; (800115c <BMP38X_Init+0x324>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
	GPIO_PIN_CS_Baro = GPIO_CS_Num;
 8000e54:	4ac2      	ldr	r2, [pc, #776]	; (8001160 <BMP38X_Init+0x328>)
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	8013      	strh	r3, [r2, #0]
	hspi_Baro = spi;
 8000e5a:	4bc2      	ldr	r3, [pc, #776]	; (8001164 <BMP38X_Init+0x32c>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e62:	2258      	movs	r2, #88	; 0x58
 8000e64:	4619      	mov	r1, r3
 8000e66:	f009 f963 	bl	800a130 <memcpy>

	unsigned char BMP_Test[3] = {REG_CHIP_ID | 0x80, 0x00, 0x00};
 8000e6a:	4abf      	ldr	r2, [pc, #764]	; (8001168 <BMP38X_Init+0x330>)
 8000e6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	4611      	mov	r1, r2
 8000e74:	8019      	strh	r1, [r3, #0]
 8000e76:	3302      	adds	r3, #2
 8000e78:	0c12      	lsrs	r2, r2, #16
 8000e7a:	701a      	strb	r2, [r3, #0]
	unsigned char BMP_WhoOut[3] = {0x00, 0x00, 0x00};
 8000e7c:	4abb      	ldr	r2, [pc, #748]	; (800116c <BMP38X_Init+0x334>)
 8000e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	4611      	mov	r1, r2
 8000e86:	8019      	strh	r1, [r3, #0]
 8000e88:	3302      	adds	r3, #2
 8000e8a:	0c12      	lsrs	r2, r2, #16
 8000e8c:	701a      	strb	r2, [r3, #0]

	unsigned char Write_Power_On[6] = {REG_PWR_CNTRL, 0x07, REG_OSR, 0x0D ,REG_ODR, 0x00};
 8000e8e:	4ab8      	ldr	r2, [pc, #736]	; (8001170 <BMP38X_Init+0x338>)
 8000e90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e98:	6018      	str	r0, [r3, #0]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	8019      	strh	r1, [r3, #0]

	unsigned char CalibrationTX[23] = {REG_T1 | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000e9e:	4bb5      	ldr	r3, [pc, #724]	; (8001174 <BMP38X_Init+0x33c>)
 8000ea0:	f107 0420 	add.w	r4, r7, #32
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eae:	6020      	str	r0, [r4, #0]
 8000eb0:	3404      	adds	r4, #4
 8000eb2:	8021      	strh	r1, [r4, #0]
 8000eb4:	3402      	adds	r4, #2
 8000eb6:	0c0b      	lsrs	r3, r1, #16
 8000eb8:	7023      	strb	r3, [r4, #0]
	unsigned char CalibrationData[23] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000eba:	4baf      	ldr	r3, [pc, #700]	; (8001178 <BMP38X_Init+0x340>)
 8000ebc:	f107 0408 	add.w	r4, r7, #8
 8000ec0:	461d      	mov	r5, r3
 8000ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eca:	6020      	str	r0, [r4, #0]
 8000ecc:	3404      	adds	r4, #4
 8000ece:	8021      	strh	r1, [r4, #0]
 8000ed0:	3402      	adds	r4, #2
 8000ed2:	0c0b      	lsrs	r3, r1, #16
 8000ed4:	7023      	strb	r3, [r4, #0]


	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_RESET);
 8000ed6:	4ba1      	ldr	r3, [pc, #644]	; (800115c <BMP38X_Init+0x324>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4aa1      	ldr	r2, [pc, #644]	; (8001160 <BMP38X_Init+0x328>)
 8000edc:	8811      	ldrh	r1, [r2, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fcff 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi_Baro, BMP_Test, BMP_WhoOut, 3, 1000);
 8000ee6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000eea:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	489b      	ldr	r0, [pc, #620]	; (8001164 <BMP38X_Init+0x32c>)
 8000ef8:	f003 fcc9 	bl	800488e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_SET);
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <BMP38X_Init+0x324>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a97      	ldr	r2, [pc, #604]	; (8001160 <BMP38X_Init+0x328>)
 8000f02:	8811      	ldrh	r1, [r2, #0]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fcec 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_RESET);
 8000f0c:	4b93      	ldr	r3, [pc, #588]	; (800115c <BMP38X_Init+0x324>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a93      	ldr	r2, [pc, #588]	; (8001160 <BMP38X_Init+0x328>)
 8000f12:	8811      	ldrh	r1, [r2, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fce4 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi_Baro, Write_Power_On, 6, 1000);
 8000f1c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	2206      	movs	r2, #6
 8000f26:	488f      	ldr	r0, [pc, #572]	; (8001164 <BMP38X_Init+0x32c>)
 8000f28:	f003 fb75 	bl	8004616 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_SET);
 8000f2c:	4b8b      	ldr	r3, [pc, #556]	; (800115c <BMP38X_Init+0x324>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a8b      	ldr	r2, [pc, #556]	; (8001160 <BMP38X_Init+0x328>)
 8000f32:	8811      	ldrh	r1, [r2, #0]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fcd4 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_RESET);
 8000f3c:	4b87      	ldr	r3, [pc, #540]	; (800115c <BMP38X_Init+0x324>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a87      	ldr	r2, [pc, #540]	; (8001160 <BMP38X_Init+0x328>)
 8000f42:	8811      	ldrh	r1, [r2, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fccc 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi_Baro, CalibrationTX, CalibrationData, 23, 1000);
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	f107 0120 	add.w	r1, r7, #32
 8000f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2317      	movs	r3, #23
 8000f5c:	4881      	ldr	r0, [pc, #516]	; (8001164 <BMP38X_Init+0x32c>)
 8000f5e:	f003 fc96 	bl	800488e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_SET);
 8000f62:	4b7e      	ldr	r3, [pc, #504]	; (800115c <BMP38X_Init+0x324>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a7e      	ldr	r2, [pc, #504]	; (8001160 <BMP38X_Init+0x328>)
 8000f68:	8811      	ldrh	r1, [r2, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fcb9 	bl	80028e4 <HAL_GPIO_WritePin>


	calib_data->t1 = (float)(((uint16_t)CalibrationData[3] << 8 | (uint16_t)CalibrationData[2])/(2^(-8)));
 8000f72:	7afb      	ldrb	r3, [r7, #11]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	7aba      	ldrb	r2, [r7, #10]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	4a80      	ldr	r2, [pc, #512]	; (800117c <BMP38X_Init+0x344>)
 8000f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f80:	17db      	asrs	r3, r3, #31
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f90:	edc3 7a00 	vstr	s15, [r3]
	calib_data->t2 = (float)(((uint16_t)CalibrationData[5] << 8 | (uint16_t)CalibrationData[4])/(2^(30)));
 8000f94:	7b7b      	ldrb	r3, [r7, #13]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	7b3a      	ldrb	r2, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	4a78      	ldr	r2, [pc, #480]	; (8001180 <BMP38X_Init+0x348>)
 8000f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa2:	441a      	add	r2, r3
 8000fa4:	1112      	asrs	r2, r2, #4
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000fb6:	edc3 7a01 	vstr	s15, [r3, #4]
	calib_data->t3 = (float)((int8_t)CalibrationData[6])/(2^(48));
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001184 <BMP38X_Init+0x34c>
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000fd2:	edc3 7a02 	vstr	s15, [r3, #8]
	calib_data->p1 = (float)((int16_t)((uint16_t)CalibrationData[8] << 8 | (uint16_t)CalibrationData[7])/(2^(20)));
 8000fd6:	7c3b      	ldrb	r3, [r7, #16]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4a68      	ldr	r2, [pc, #416]	; (8001188 <BMP38X_Init+0x350>)
 8000fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fea:	1092      	asrs	r2, r2, #2
 8000fec:	17db      	asrs	r3, r3, #31
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ffe:	edc3 7a03 	vstr	s15, [r3, #12]
	calib_data->p2 = (float)((int16_t)((uint16_t)CalibrationData[10] << 8 | (uint16_t)CalibrationData[9])/(2^(29)));
 8001002:	7cbb      	ldrb	r3, [r7, #18]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	7c7b      	ldrb	r3, [r7, #17]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	4a5e      	ldr	r2, [pc, #376]	; (800118c <BMP38X_Init+0x354>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	441a      	add	r2, r3
 8001018:	1112      	asrs	r2, r2, #4
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b21b      	sxth	r3, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800102c:	edc3 7a04 	vstr	s15, [r3, #16]
	calib_data->p3 = (float)((int8_t)CalibrationData[11])/(2^(32));
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001190 <BMP38X_Init+0x358>
 8001040:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001048:	edc3 7a05 	vstr	s15, [r3, #20]
	calib_data->p4 = (float)((int8_t)CalibrationData[12])/(2^(37));
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	b25b      	sxtb	r3, r3
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001058:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001194 <BMP38X_Init+0x35c>
 800105c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001060:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001064:	edc3 7a06 	vstr	s15, [r3, #24]
	calib_data->p5 = (float)(((uint16_t)CalibrationData[14] << 8 | (uint16_t)CalibrationData[13])/(2^(-3)));
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	7d7a      	ldrb	r2, [r7, #21]
 800106e:	4313      	orrs	r3, r2
 8001070:	425b      	negs	r3, r3
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800107e:	edc3 7a07 	vstr	s15, [r3, #28]
	calib_data->p6 = (float)(((uint16_t)CalibrationData[16] << 8 | (uint16_t)CalibrationData[15])/(2^(6)));
 8001082:	7e3b      	ldrb	r3, [r7, #24]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	7dfa      	ldrb	r2, [r7, #23]
 8001088:	4313      	orrs	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	da00      	bge.n	8001090 <BMP38X_Init+0x258>
 800108e:	3303      	adds	r3, #3
 8001090:	109b      	asrs	r3, r3, #2
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800109e:	edc3 7a08 	vstr	s15, [r3, #32]
	calib_data->p7 = (float)((int8_t)CalibrationData[17])/(2^(8));
 80010a2:	7e7b      	ldrb	r3, [r7, #25]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80010ba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	calib_data->p8 = (float)((int8_t)CalibrationData[18])/(2^(15));
 80010be:	7ebb      	ldrb	r3, [r7, #26]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 80010ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80010d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	calib_data->p9 = (float)((int16_t)((uint16_t)CalibrationData[20] << 8 | (uint16_t)CalibrationData[29])/(2^(48)));
 80010da:	7f3b      	ldrb	r3, [r7, #28]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <BMP38X_Init+0x360>)
 80010ec:	fb82 1203 	smull	r1, r2, r2, r3
 80010f0:	1112      	asrs	r2, r2, #4
 80010f2:	17db      	asrs	r3, r3, #31
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001104:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	calib_data->p10 = (float)((int8_t)CalibrationData[21])/(2^(48));
 8001108:	7f7b      	ldrb	r3, [r7, #29]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001114:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001184 <BMP38X_Init+0x34c>
 8001118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001120:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	calib_data->p11 = (float)((int8_t)CalibrationData[22])/(2^(65));
 8001124:	7fbb      	ldrb	r3, [r7, #30]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800119c <BMP38X_Init+0x364>
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800113c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34



	if(BMP_WhoOut[2] == BMP_CHIP_ID)
 8001140:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001144:	2b50      	cmp	r3, #80	; 0x50
 8001146:	d101      	bne.n	800114c <BMP38X_Init+0x314>
		return(HAL_OK);
 8001148:	2300      	movs	r3, #0
 800114a:	e000      	b.n	800114e <BMP38X_Init+0x316>
	else
		return(1);
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	3748      	adds	r7, #72	; 0x48
 8001152:	46bd      	mov	sp, r7
 8001154:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001158:	b002      	add	sp, #8
 800115a:	4770      	bx	lr
 800115c:	20000484 	.word	0x20000484
 8001160:	20000424 	.word	0x20000424
 8001164:	2000042c 	.word	0x2000042c
 8001168:	0800a178 	.word	0x0800a178
 800116c:	0800a17c 	.word	0x0800a17c
 8001170:	0800a180 	.word	0x0800a180
 8001174:	0800a188 	.word	0x0800a188
 8001178:	0800a1a0 	.word	0x0800a1a0
 800117c:	2aaaaaab 	.word	0x2aaaaaab
 8001180:	92492493 	.word	0x92492493
 8001184:	42480000 	.word	0x42480000
 8001188:	2e8ba2e9 	.word	0x2e8ba2e9
 800118c:	84210843 	.word	0x84210843
 8001190:	42080000 	.word	0x42080000
 8001194:	421c0000 	.word	0x421c0000
 8001198:	51eb851f 	.word	0x51eb851f
 800119c:	42860000 	.word	0x42860000

080011a0 <BMP_Read_Data>:

void BMP_Read_Data(barometer_t *BMP, bmp_calibration_data *calib_data)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b090      	sub	sp, #64	; 0x40
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]

	unsigned char statusTX[3] = {0x03 | 0x80, 0x00, 0x00};
 80011aa:	4a6b      	ldr	r2, [pc, #428]	; (8001358 <BMP_Read_Data+0x1b8>)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	4611      	mov	r1, r2
 80011b4:	8019      	strh	r1, [r3, #0]
 80011b6:	3302      	adds	r3, #2
 80011b8:	0c12      	lsrs	r2, r2, #16
 80011ba:	701a      	strb	r2, [r3, #0]
	unsigned char statusRX[3] = {0x00,0x00,0x00};
 80011bc:	4a67      	ldr	r2, [pc, #412]	; (800135c <BMP_Read_Data+0x1bc>)
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	8019      	strh	r1, [r3, #0]
 80011c8:	3302      	adds	r3, #2
 80011ca:	0c12      	lsrs	r2, r2, #16
 80011cc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_RESET);
 80011ce:	4b64      	ldr	r3, [pc, #400]	; (8001360 <BMP_Read_Data+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a64      	ldr	r2, [pc, #400]	; (8001364 <BMP_Read_Data+0x1c4>)
 80011d4:	8811      	ldrh	r1, [r2, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fb83 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi_Baro, statusTX, statusRX, 8, 1000);
 80011de:	f107 021c 	add.w	r2, r7, #28
 80011e2:	f107 0120 	add.w	r1, r7, #32
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2308      	movs	r3, #8
 80011ee:	485e      	ldr	r0, [pc, #376]	; (8001368 <BMP_Read_Data+0x1c8>)
 80011f0:	f003 fb4d 	bl	800488e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_SET);
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <BMP_Read_Data+0x1c0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <BMP_Read_Data+0x1c4>)
 80011fa:	8811      	ldrh	r1, [r2, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fb70 	bl	80028e4 <HAL_GPIO_WritePin>

	unsigned char DataTX[8] = {0x04 | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001204:	4a59      	ldr	r2, [pc, #356]	; (800136c <BMP_Read_Data+0x1cc>)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120e:	e883 0003 	stmia.w	r3, {r0, r1}
	unsigned char DataRX[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001212:	4a57      	ldr	r2, [pc, #348]	; (8001370 <BMP_Read_Data+0x1d0>)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121c:	e883 0003 	stmia.w	r3, {r0, r1}


	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_RESET);
 8001220:	4b4f      	ldr	r3, [pc, #316]	; (8001360 <BMP_Read_Data+0x1c0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <BMP_Read_Data+0x1c4>)
 8001226:	8811      	ldrh	r1, [r2, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fb5a 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi_Baro, DataTX, DataRX, 8, 1000);
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	f107 0114 	add.w	r1, r7, #20
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2308      	movs	r3, #8
 8001240:	4849      	ldr	r0, [pc, #292]	; (8001368 <BMP_Read_Data+0x1c8>)
 8001242:	f003 fb24 	bl	800488e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_CS_Baro, GPIO_PIN_CS_Baro, GPIO_PIN_SET);
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <BMP_Read_Data+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a46      	ldr	r2, [pc, #280]	; (8001364 <BMP_Read_Data+0x1c4>)
 800124c:	8811      	ldrh	r1, [r2, #0]
 800124e:	2201      	movs	r2, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fb47 	bl	80028e4 <HAL_GPIO_WritePin>

	uint32_t uncomp_temp = DataRX[7] << 16 | DataRX[6] << 8 | DataRX[5];
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	7cbb      	ldrb	r3, [r7, #18]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	4313      	orrs	r3, r2
 8001260:	7c7a      	ldrb	r2, [r7, #17]
 8001262:	4313      	orrs	r3, r2
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t uncomp_press = DataRX[4] << 16 | DataRX[3] << 8 | DataRX[2];
 8001266:	7c3b      	ldrb	r3, [r7, #16]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4313      	orrs	r3, r2
 8001270:	7bba      	ldrb	r2, [r7, #14]
 8001272:	4313      	orrs	r3, r2
 8001274:	633b      	str	r3, [r7, #48]	; 0x30

	float comp_temp = BMP_Compensate_T(uncomp_temp, calib_data);
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800127a:	f000 f87b 	bl	8001374 <BMP_Compensate_T>
 800127e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float comp_press = BMP_Compensate_P(uncomp_press, calib_data);
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001286:	f000 f8aa 	bl	80013de <BMP_Compensate_P>
 800128a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

	BMP->T = comp_temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001292:	605a      	str	r2, [r3, #4]
	BMP->P = comp_press;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001298:	601a      	str	r2, [r3, #0]
	float partial_alt = pow((1013.25/comp_press), (1/5.257));
 800129a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129c:	f7ff f8f8 	bl	8000490 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	a124      	add	r1, pc, #144	; (adr r1, 8001338 <BMP_Read_Data+0x198>)
 80012a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012aa:	f7ff fa73 	bl	8000794 <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	ec43 2b17 	vmov	d7, r2, r3
 80012b6:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001340 <BMP_Read_Data+0x1a0>
 80012ba:	eeb0 0a47 	vmov.f32	s0, s14
 80012be:	eef0 0a67 	vmov.f32	s1, s15
 80012c2:	f007 ff57 	bl	8009174 <pow>
 80012c6:	ec53 2b10 	vmov	r2, r3, d0
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fbe7 	bl	8000aa0 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
	BMP->Alt = (((partial_alt - 1.0f) * (comp_temp + 273.15))/0.0065f);
 80012d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012e2:	ee17 0a90 	vmov	r0, s15
 80012e6:	f7ff f8d3 	bl	8000490 <__aeabi_f2d>
 80012ea:	4604      	mov	r4, r0
 80012ec:	460d      	mov	r5, r1
 80012ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012f0:	f7ff f8ce 	bl	8000490 <__aeabi_f2d>
 80012f4:	a314      	add	r3, pc, #80	; (adr r3, 8001348 <BMP_Read_Data+0x1a8>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7fe ff6b 	bl	80001d4 <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4620      	mov	r0, r4
 8001304:	4629      	mov	r1, r5
 8001306:	f7ff f91b 	bl	8000540 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	a30f      	add	r3, pc, #60	; (adr r3, 8001350 <BMP_Read_Data+0x1b0>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fa3c 	bl	8000794 <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fbbc 	bl	8000aa0 <__aeabi_d2f>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]

}
 800132e:	bf00      	nop
 8001330:	3738      	adds	r7, #56	; 0x38
 8001332:	46bd      	mov	sp, r7
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	bf00      	nop
 8001338:	00000000 	.word	0x00000000
 800133c:	408faa00 	.word	0x408faa00
 8001340:	7dee2d4a 	.word	0x7dee2d4a
 8001344:	3fc85936 	.word	0x3fc85936
 8001348:	66666666 	.word	0x66666666
 800134c:	40711266 	.word	0x40711266
 8001350:	80000000 	.word	0x80000000
 8001354:	3f7a9fbe 	.word	0x3f7a9fbe
 8001358:	0800a1b8 	.word	0x0800a1b8
 800135c:	0800a17c 	.word	0x0800a17c
 8001360:	20000484 	.word	0x20000484
 8001364:	20000424 	.word	0x20000424
 8001368:	2000042c 	.word	0x2000042c
 800136c:	0800a1bc 	.word	0x0800a1bc
 8001370:	0800a1c4 	.word	0x0800a1c4

08001374 <BMP_Compensate_T>:

float BMP_Compensate_T(uint32_t uncomp_temp, bmp_calibration_data *calib_data)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]

	float partial_data1;
	float partial_data2;

	partial_data1 = (float)(uncomp_temp - calib_data->t1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001392:	edc7 7a03 	vstr	s15, [r7, #12]
	partial_data2 = (float)(partial_data1 * calib_data->t2);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	edd3 7a01 	vldr	s15, [r3, #4]
 800139c:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	edc7 7a02 	vstr	s15, [r7, #8]

	calib_data->t_comp = partial_data2 + (partial_data1 * partial_data1) * calib_data->t3;
 80013a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	return(calib_data->t_comp);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	ee07 3a90 	vmov	s15, r3
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <BMP_Compensate_P>:

float BMP_Compensate_P(uint32_t uncomp_press, bmp_calibration_data *calib_data)
{
 80013de:	b480      	push	{r7}
 80013e0:	b08b      	sub	sp, #44	; 0x2c
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	float partial_data4;
	float partial_out1;
	float partial_out2;


	partial_data1 = calib_data->p6 * calib_data->t_comp;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	ed93 7a08 	vldr	s14, [r3, #32]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	partial_data2 = calib_data->p7 * (calib_data->t_comp * calib_data->t_comp);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800140e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	edc7 7a08 	vstr	s15, [r7, #32]
	partial_data3 = calib_data->p8 * (calib_data->t_comp * calib_data->t_comp * calib_data->t_comp);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800142c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_out1 = calib_data->p5 + partial_data1 + partial_data2 + partial_data3;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	ed93 7a07 	vldr	s14, [r3, #28]
 8001448:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800144c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001450:	edd7 7a08 	vldr	s15, [r7, #32]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	ed97 7a07 	vldr	s14, [r7, #28]
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	edc7 7a06 	vstr	s15, [r7, #24]

	partial_data1 = calib_data->p2 * calib_data->t_comp;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	ed93 7a04 	vldr	s14, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	partial_data2 = calib_data->p3 * (calib_data->t_comp * calib_data->t_comp);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	ed93 7a05 	vldr	s14, [r3, #20]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	edc7 7a08 	vstr	s15, [r7, #32]
	partial_data3 = calib_data->p4 * (calib_data->t_comp * calib_data->t_comp * calib_data->t_comp);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	ed93 7a06 	vldr	s14, [r3, #24]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80014a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80014b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_out2 = (float)uncomp_press * (calib_data->p1 + partial_data1 + partial_data2 + partial_data3);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80014ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80014da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014de:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ea:	edc7 7a05 	vstr	s15, [r7, #20]

	partial_data1 = (float)uncomp_press * (float)uncomp_press;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001506:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	partial_data2 = calib_data->p9 + calib_data->p10 * calib_data->t_comp;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	edc7 7a08 	vstr	s15, [r7, #32]
	partial_data3 = partial_data1 * partial_data2;
 8001528:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800152c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_data4 = partial_data3 + ((float)uncomp_press * (float)uncomp_press * (float)uncomp_press * calib_data->p11);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001568:	ed97 7a07 	vldr	s14, [r7, #28]
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	edc7 7a04 	vstr	s15, [r7, #16]

	comp_press =  partial_out1 + partial_out2 + partial_data4;
 8001574:	ed97 7a06 	vldr	s14, [r7, #24]
 8001578:	edd7 7a05 	vldr	s15, [r7, #20]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	ed97 7a04 	vldr	s14, [r7, #16]
 8001584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001588:	edc7 7a03 	vstr	s15, [r7, #12]

	return(comp_press);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	ee07 3a90 	vmov	s15, r3


}
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	372c      	adds	r7, #44	; 0x2c
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LSM6DS3_Init>:
	SPI_HandleTypeDef hspi;
	uint8_t ctrlx = 0;
	uint8_t ctrlg = 0;

	uint8_t LSM6DS3_Init(GPIO_TypeDef *GPIO_CS_let, uint16_t GPIO_CS_Num, SPI_HandleTypeDef spi, uint8_t Accel_G, uint8_t Gyro_R, uint8_t Freq)
	{
 80015a0:	b082      	sub	sp, #8
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b08a      	sub	sp, #40	; 0x28
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015ae:	e880 000c 	stmia.w	r0, {r2, r3}
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]

		GPIO_CS = GPIO_CS_let;
 80015b6:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <LSM6DS3_Init+0x150>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6013      	str	r3, [r2, #0]
		GPIO_PIN_CS = GPIO_CS_Num;
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <LSM6DS3_Init+0x154>)
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	8013      	strh	r3, [r2, #0]
		hspi = spi;
 80015c2:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <LSM6DS3_Init+0x158>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2258      	movs	r2, #88	; 0x58
 80015cc:	4619      	mov	r1, r3
 80015ce:	f008 fdaf 	bl	800a130 <memcpy>
		ctrlx = Accel_G;
 80015d2:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <LSM6DS3_Init+0x15c>)
 80015d4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80015d8:	7013      	strb	r3, [r2, #0]
		ctrlg = Gyro_R;
 80015da:	4a49      	ldr	r2, [pc, #292]	; (8001700 <LSM6DS3_Init+0x160>)
 80015dc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80015e0:	7013      	strb	r3, [r2, #0]

		uint8_t AccelMode = Accel_G | Freq;
 80015e2:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80015e6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80015ea:	4313      	orrs	r3, r2
 80015ec:	77fb      	strb	r3, [r7, #31]
		uint8_t GyroMode = Gyro_R | Freq | 0x02;
 80015ee:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80015f2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	77bb      	strb	r3, [r7, #30]

		uint8_t AccelSetup[2] = {LSM6DSL_ACC_GYRO_CTRL1_XL, AccelMode};
 8001600:	2310      	movs	r3, #16
 8001602:	773b      	strb	r3, [r7, #28]
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	777b      	strb	r3, [r7, #29]
		uint8_t GyroSetup[2] = {LSM6DSL_ACC_GYRO_CTRL2_G, GyroMode};
 8001608:	2311      	movs	r3, #17
 800160a:	763b      	strb	r3, [r7, #24]
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	767b      	strb	r3, [r7, #25]

		uint8_t lsmSetup[6] = {LSM6DSL_ACC_GYRO_WHO_AM_I_REG | 0x80, 0x00,
 8001610:	4a3c      	ldr	r2, [pc, #240]	; (8001704 <LSM6DS3_Init+0x164>)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161a:	6018      	str	r0, [r3, #0]
 800161c:	3304      	adds	r3, #4
 800161e:	8019      	strh	r1, [r3, #0]
								LSM6DSL_ACC_GYRO_CTRL1_XL | 0x80, 0x00,
								LSM6DSL_ACC_GYRO_CTRL2_G | 0x80, 0x00};

		uint8_t lsmCheck[6] = {0,0,0,0,0,0};
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <LSM6DS3_Init+0x168>)
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162a:	6018      	str	r0, [r3, #0]
 800162c:	3304      	adds	r3, #4
 800162e:	8019      	strh	r1, [r3, #0]

		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <LSM6DS3_Init+0x150>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <LSM6DS3_Init+0x154>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	2200      	movs	r2, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f001 f952 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi, AccelSetup, 2, 1000);
 8001640:	f107 011c 	add.w	r1, r7, #28
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	2202      	movs	r2, #2
 800164a:	482b      	ldr	r0, [pc, #172]	; (80016f8 <LSM6DS3_Init+0x158>)
 800164c:	f002 ffe3 	bl	8004616 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <LSM6DS3_Init+0x150>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <LSM6DS3_Init+0x154>)
 8001656:	8811      	ldrh	r1, [r2, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f942 	bl	80028e4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <LSM6DS3_Init+0x150>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <LSM6DS3_Init+0x154>)
 8001666:	8811      	ldrh	r1, [r2, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f93a 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi, GyroSetup, 2, 1000);
 8001670:	f107 0118 	add.w	r1, r7, #24
 8001674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001678:	2202      	movs	r2, #2
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <LSM6DS3_Init+0x158>)
 800167c:	f002 ffcb 	bl	8004616 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <LSM6DS3_Init+0x150>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <LSM6DS3_Init+0x154>)
 8001686:	8811      	ldrh	r1, [r2, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f001 f92a 	bl	80028e4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <LSM6DS3_Init+0x150>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <LSM6DS3_Init+0x154>)
 8001696:	8811      	ldrh	r1, [r2, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f001 f922 	bl	80028e4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi, lsmSetup, lsmCheck, 6, 1000);
 80016a0:	f107 0208 	add.w	r2, r7, #8
 80016a4:	f107 0110 	add.w	r1, r7, #16
 80016a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2306      	movs	r3, #6
 80016b0:	4811      	ldr	r0, [pc, #68]	; (80016f8 <LSM6DS3_Init+0x158>)
 80016b2:	f003 f8ec 	bl	800488e <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <LSM6DS3_Init+0x150>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <LSM6DS3_Init+0x154>)
 80016bc:	8811      	ldrh	r1, [r2, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 f90f 	bl	80028e4 <HAL_GPIO_WritePin>


		if ((lsmCheck[1] == LSM6DSL_ACC_GYRO_WHO_AM_I) && (AccelMode == lsmCheck[2]) && (GyroMode == lsmCheck[3]))
 80016c6:	7a7b      	ldrb	r3, [r7, #9]
 80016c8:	2b6a      	cmp	r3, #106	; 0x6a
 80016ca:	d109      	bne.n	80016e0 <LSM6DS3_Init+0x140>
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	7ffa      	ldrb	r2, [r7, #31]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d105      	bne.n	80016e0 <LSM6DS3_Init+0x140>
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	7fba      	ldrb	r2, [r7, #30]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d101      	bne.n	80016e0 <LSM6DS3_Init+0x140>
			return(HAL_OK);
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <LSM6DS3_Init+0x142>
		else
			return((uint8_t)1);
 80016e0:	2301      	movs	r3, #1

	}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ec:	b002      	add	sp, #8
 80016ee:	4770      	bx	lr
 80016f0:	2000048c 	.word	0x2000048c
 80016f4:	20000488 	.word	0x20000488
 80016f8:	20000490 	.word	0x20000490
 80016fc:	20000200 	.word	0x20000200
 8001700:	20000201 	.word	0x20000201
 8001704:	0800a1cc 	.word	0x0800a1cc
 8001708:	0800a1d4 	.word	0x0800a1d4

0800170c <LSM6DS3_AccReadXYZ>:

	void LSM6DS3_AccReadXYZ(vector3_t *data)
	{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]

	  float sensitivity = 0;
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

	  uint8_t DataReq[7] = {LSM6DSL_ACC_GYRO_OUTX_H_XL | 0x80, LSM6DSL_ACC_GYRO_OUTX_L_XL | 0x80,
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <LSM6DS3_AccReadXYZ+0x168>)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001724:	6018      	str	r0, [r3, #0]
 8001726:	3304      	adds	r3, #4
 8001728:	8019      	strh	r1, [r3, #0]
 800172a:	3302      	adds	r3, #2
 800172c:	0c0a      	lsrs	r2, r1, #16
 800172e:	701a      	strb	r2, [r3, #0]
			  	  	  	  	LSM6DSL_ACC_GYRO_OUTY_H_XL | 0x80, LSM6DSL_ACC_GYRO_OUTY_L_XL | 0x80,
							LSM6DSL_ACC_GYRO_OUTZ_H_XL | 0x80, LSM6DSL_ACC_GYRO_OUTZ_L_XL | 0x80,
							0x00};
	  uint8_t OutBuf[7] = {0,0,0,0,0,0,0};
 8001730:	4a51      	ldr	r2, [pc, #324]	; (8001878 <LSM6DS3_AccReadXYZ+0x16c>)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173a:	6018      	str	r0, [r3, #0]
 800173c:	3304      	adds	r3, #4
 800173e:	8019      	strh	r1, [r3, #0]
 8001740:	3302      	adds	r3, #2
 8001742:	0c0a      	lsrs	r2, r1, #16
 8001744:	701a      	strb	r2, [r3, #0]

	  int16_t DataX, DataY, DataZ;

	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8001746:	4b4d      	ldr	r3, [pc, #308]	; (800187c <LSM6DS3_AccReadXYZ+0x170>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <LSM6DS3_AccReadXYZ+0x174>)
 800174c:	8811      	ldrh	r1, [r2, #0]
 800174e:	2200      	movs	r2, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f001 f8c7 	bl	80028e4 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi, DataReq, OutBuf, 7, 1000);
 8001756:	f107 020c 	add.w	r2, r7, #12
 800175a:	f107 0114 	add.w	r1, r7, #20
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2307      	movs	r3, #7
 8001766:	4847      	ldr	r0, [pc, #284]	; (8001884 <LSM6DS3_AccReadXYZ+0x178>)
 8001768:	f003 f891 	bl	800488e <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 800176c:	4b43      	ldr	r3, [pc, #268]	; (800187c <LSM6DS3_AccReadXYZ+0x170>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <LSM6DS3_AccReadXYZ+0x174>)
 8001772:	8811      	ldrh	r1, [r2, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f8b4 	bl	80028e4 <HAL_GPIO_WritePin>

	  /* Normal mode */
	  /* Switch the sensitivity value set in the CRTL1_XL */
	  switch(ctrlx & 0x0C)
 800177c:	4b42      	ldr	r3, [pc, #264]	; (8001888 <LSM6DS3_AccReadXYZ+0x17c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d829      	bhi.n	80017dc <LSM6DS3_AccReadXYZ+0xd0>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <LSM6DS3_AccReadXYZ+0x84>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017c5 	.word	0x080017c5
 8001794:	080017dd 	.word	0x080017dd
 8001798:	080017dd 	.word	0x080017dd
 800179c:	080017dd 	.word	0x080017dd
 80017a0:	080017d7 	.word	0x080017d7
 80017a4:	080017dd 	.word	0x080017dd
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	080017dd 	.word	0x080017dd
 80017b0:	080017cb 	.word	0x080017cb
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	080017dd 	.word	0x080017dd
 80017bc:	080017dd 	.word	0x080017dd
 80017c0:	080017d1 	.word	0x080017d1
	  {
	  case LSM6DSL_ACC_FULLSCALE_2G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <LSM6DS3_AccReadXYZ+0x180>)
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80017c8:	e008      	b.n	80017dc <LSM6DS3_AccReadXYZ+0xd0>
	  case LSM6DSL_ACC_FULLSCALE_4G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <LSM6DS3_AccReadXYZ+0x184>)
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80017ce:	e005      	b.n	80017dc <LSM6DS3_AccReadXYZ+0xd0>
	  case LSM6DSL_ACC_FULLSCALE_8G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <LSM6DS3_AccReadXYZ+0x188>)
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80017d4:	e002      	b.n	80017dc <LSM6DS3_AccReadXYZ+0xd0>
	  case LSM6DSL_ACC_FULLSCALE_16G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <LSM6DS3_AccReadXYZ+0x18c>)
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80017da:	bf00      	nop
	  }

	  DataX = ((((uint16_t)OutBuf[1]) << 8) | (uint16_t)OutBuf[2]);
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	847b      	strh	r3, [r7, #34]	; 0x22
	  DataY = ((((uint16_t)OutBuf[3]) << 8) | (uint16_t)OutBuf[4]);
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	7c3b      	ldrb	r3, [r7, #16]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	843b      	strh	r3, [r7, #32]
	  DataZ = ((((uint16_t)OutBuf[5]) << 8) | (uint16_t)OutBuf[6]);
 80017f8:	7c7b      	ldrb	r3, [r7, #17]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	7cbb      	ldrb	r3, [r7, #18]
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	83fb      	strh	r3, [r7, #30]


	  data->X = (int16_t)(DataX * sensitivity);
 8001806:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001812:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181e:	ee17 3a90 	vmov	r3, s15
 8001822:	b21a      	sxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	801a      	strh	r2, [r3, #0]
	  data->Y = (int16_t)(DataY * sensitivity);
 8001828:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001834:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001840:	ee17 3a90 	vmov	r3, s15
 8001844:	b21a      	sxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	805a      	strh	r2, [r3, #2]
	  data->Z = (int16_t)(DataZ * sensitivity);
 800184a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001862:	ee17 3a90 	vmov	r3, s15
 8001866:	b21a      	sxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	809a      	strh	r2, [r3, #4]

	}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0800a1dc 	.word	0x0800a1dc
 8001878:	0800a1e4 	.word	0x0800a1e4
 800187c:	2000048c 	.word	0x2000048c
 8001880:	20000488 	.word	0x20000488
 8001884:	20000490 	.word	0x20000490
 8001888:	20000200 	.word	0x20000200
 800188c:	3d79db23 	.word	0x3d79db23
 8001890:	3df9db23 	.word	0x3df9db23
 8001894:	3e79db23 	.word	0x3e79db23
 8001898:	3ef9db23 	.word	0x3ef9db23

0800189c <LSM6DS3_GyroReadXYZ>:

	void LSM6DS3_GyroReadXYZ(vector3_t *data)
	{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	6078      	str	r0, [r7, #4]

	  float sensitivity = 0;
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

	  uint8_t DataReq[7] = {LSM6DSL_ACC_GYRO_OUTX_H_G | 0x80, LSM6DSL_ACC_GYRO_OUTX_L_G | 0x80,
 80018aa:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <LSM6DS3_GyroReadXYZ+0x168>)
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b4:	6018      	str	r0, [r3, #0]
 80018b6:	3304      	adds	r3, #4
 80018b8:	8019      	strh	r1, [r3, #0]
 80018ba:	3302      	adds	r3, #2
 80018bc:	0c0a      	lsrs	r2, r1, #16
 80018be:	701a      	strb	r2, [r3, #0]
			  	  	  	  	LSM6DSL_ACC_GYRO_OUTY_H_G | 0x80, LSM6DSL_ACC_GYRO_OUTY_L_G | 0x80,
							LSM6DSL_ACC_GYRO_OUTZ_H_G | 0x80, LSM6DSL_ACC_GYRO_OUTZ_L_G | 0x80,
							0x00};
	  uint8_t OutBuf[7] = {0,0,0,0,0,0,0};
 80018c0:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <LSM6DS3_GyroReadXYZ+0x16c>)
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ca:	6018      	str	r0, [r3, #0]
 80018cc:	3304      	adds	r3, #4
 80018ce:	8019      	strh	r1, [r3, #0]
 80018d0:	3302      	adds	r3, #2
 80018d2:	0c0a      	lsrs	r2, r1, #16
 80018d4:	701a      	strb	r2, [r3, #0]

	  int16_t DataX, DataY, DataZ;

	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <LSM6DS3_GyroReadXYZ+0x170>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a4d      	ldr	r2, [pc, #308]	; (8001a10 <LSM6DS3_GyroReadXYZ+0x174>)
 80018dc:	8811      	ldrh	r1, [r2, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 ffff 	bl	80028e4 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi, DataReq, OutBuf, 7, 1000);
 80018e6:	f107 020c 	add.w	r2, r7, #12
 80018ea:	f107 0114 	add.w	r1, r7, #20
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2307      	movs	r3, #7
 80018f6:	4847      	ldr	r0, [pc, #284]	; (8001a14 <LSM6DS3_GyroReadXYZ+0x178>)
 80018f8:	f002 ffc9 	bl	800488e <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <LSM6DS3_GyroReadXYZ+0x170>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a43      	ldr	r2, [pc, #268]	; (8001a10 <LSM6DS3_GyroReadXYZ+0x174>)
 8001902:	8811      	ldrh	r1, [r2, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f000 ffec 	bl	80028e4 <HAL_GPIO_WritePin>

	  /* Normal mode */
	  /* Switch the sensitivity value set in the CRTL2_G */
	  switch(ctrlg & 0x0C)
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <LSM6DS3_GyroReadXYZ+0x17c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d829      	bhi.n	800196c <LSM6DS3_GyroReadXYZ+0xd0>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <LSM6DS3_GyroReadXYZ+0x84>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001955 	.word	0x08001955
 8001924:	0800196d 	.word	0x0800196d
 8001928:	0800196d 	.word	0x0800196d
 800192c:	0800196d 	.word	0x0800196d
 8001930:	0800195b 	.word	0x0800195b
 8001934:	0800196d 	.word	0x0800196d
 8001938:	0800196d 	.word	0x0800196d
 800193c:	0800196d 	.word	0x0800196d
 8001940:	08001961 	.word	0x08001961
 8001944:	0800196d 	.word	0x0800196d
 8001948:	0800196d 	.word	0x0800196d
 800194c:	0800196d 	.word	0x0800196d
 8001950:	08001967 	.word	0x08001967
	  {
	  case LSM6DSL_GYRO_FS_245:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <LSM6DS3_GyroReadXYZ+0x180>)
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001958:	e008      	b.n	800196c <LSM6DS3_GyroReadXYZ+0xd0>
	  case LSM6DSL_GYRO_FS_500:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <LSM6DS3_GyroReadXYZ+0x184>)
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800195e:	e005      	b.n	800196c <LSM6DS3_GyroReadXYZ+0xd0>
	  case LSM6DSL_GYRO_FS_1000:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001960:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <LSM6DS3_GyroReadXYZ+0x188>)
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001964:	e002      	b.n	800196c <LSM6DS3_GyroReadXYZ+0xd0>
	  case LSM6DSL_GYRO_FS_2000:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <LSM6DS3_GyroReadXYZ+0x18c>)
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800196a:	bf00      	nop
	  }

	  DataX = ((((uint16_t)OutBuf[1]) << 8) | (uint16_t)OutBuf[2]);
 800196c:	7b7b      	ldrb	r3, [r7, #13]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	b21b      	sxth	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	847b      	strh	r3, [r7, #34]	; 0x22
	  DataY = ((((uint16_t)OutBuf[3]) << 8) | (uint16_t)OutBuf[4]);
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	7c3b      	ldrb	r3, [r7, #16]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	843b      	strh	r3, [r7, #32]
	  DataZ = ((((uint16_t)OutBuf[5]) << 8) | (uint16_t)OutBuf[6]);
 8001988:	7c7b      	ldrb	r3, [r7, #17]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21a      	sxth	r2, r3
 800198e:	7cbb      	ldrb	r3, [r7, #18]
 8001990:	b21b      	sxth	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	83fb      	strh	r3, [r7, #30]


	  data->X = (int16_t)(DataX * sensitivity);
 8001996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ae:	ee17 3a90 	vmov	r3, s15
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	801a      	strh	r2, [r3, #0]
	  data->Y = (int16_t)(DataY * sensitivity);
 80019b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 3a90 	vmov	r3, s15
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	805a      	strh	r2, [r3, #2]
	  data->Z = (int16_t)(DataZ * sensitivity);
 80019da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f2:	ee17 3a90 	vmov	r3, s15
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	809a      	strh	r2, [r3, #4]

	}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800a1ec 	.word	0x0800a1ec
 8001a08:	0800a1e4 	.word	0x0800a1e4
 8001a0c:	2000048c 	.word	0x2000048c
 8001a10:	20000488 	.word	0x20000488
 8001a14:	20000490 	.word	0x20000490
 8001a18:	20000201 	.word	0x20000201
 8001a1c:	410c0000 	.word	0x410c0000
 8001a20:	418c0000 	.word	0x418c0000
 8001a24:	420c0000 	.word	0x420c0000
 8001a28:	428c0000 	.word	0x428c0000

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b0c5      	sub	sp, #276	; 0x114
 8001a30:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a32:	f000 fc13 	bl	800225c <HAL_Init>
  vector3_t GyroData;
  //quaternion_t Orientation;
  barometer_t BMP;
  bmp_calibration_data calib_data;

  bool Fire_Pyro1 = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  bool Pyro1_Fired = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  bool Fire_Pyro2 = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
  bool Pyro2_Fired = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4e:	f000 f895 	bl	8001b7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a52:	f000 f9e1 	bl	8001e18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a56:	f000 f8fb 	bl	8001c50 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a5a:	f006 fe71 	bl	8008740 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8001a5e:	f000 f963 	bl	8001d28 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001a62:	f000 f9af 	bl	8001dc4 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001a66:	f000 f929 	bl	8001cbc <MX_SPI3_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);*/



  BMP38X_Init(SPI3_CS_GPIO_Port, SPI3_CS_Pin, hspi3, &calib_data);
 8001a6a:	4c3f      	ldr	r4, [pc, #252]	; (8001b68 <main+0x13c>)
 8001a6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a70:	9314      	str	r3, [sp, #80]	; 0x50
 8001a72:	4668      	mov	r0, sp
 8001a74:	f104 0308 	add.w	r3, r4, #8
 8001a78:	2250      	movs	r2, #80	; 0x50
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f008 fb58 	bl	800a130 <memcpy>
 8001a80:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a88:	4838      	ldr	r0, [pc, #224]	; (8001b6c <main+0x140>)
 8001a8a:	f7ff f9d5 	bl	8000e38 <BMP38X_Init>
  LSM6DS3_Init(SPI1_CS_GPIO_Port, SPI1_CS_Pin, hspi1, LSM6DSL_ACC_FULLSCALE_16G, LSM6DSL_GYRO_FS_500, LSM6DSL_ODR_1660Hz );
 8001a8e:	4c38      	ldr	r4, [pc, #224]	; (8001b70 <main+0x144>)
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	9316      	str	r3, [sp, #88]	; 0x58
 8001a94:	2304      	movs	r3, #4
 8001a96:	9315      	str	r3, [sp, #84]	; 0x54
 8001a98:	2304      	movs	r3, #4
 8001a9a:	9314      	str	r3, [sp, #80]	; 0x50
 8001a9c:	4668      	mov	r0, sp
 8001a9e:	f104 0308 	add.w	r3, r4, #8
 8001aa2:	2250      	movs	r2, #80	; 0x50
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f008 fb43 	bl	800a130 <memcpy>
 8001aaa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001aae:	2120      	movs	r1, #32
 8001ab0:	4830      	ldr	r0, [pc, #192]	; (8001b74 <main+0x148>)
 8001ab2:	f7ff fd75 	bl	80015a0 <LSM6DS3_Init>
  BMP_Read_Data(&BMP, &calib_data);
 8001ab6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001aba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb6d 	bl	80011a0 <BMP_Read_Data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (Fire_Pyro1 == 1 && Pyro1_Fired != 1)
 8001ac6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <main+0xd6>
 8001ace:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001ad2:	f083 0301 	eor.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <main+0xd6>
		{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae2:	4825      	ldr	r0, [pc, #148]	; (8001b78 <main+0x14c>)
 8001ae4:	f000 fefe 	bl	80028e4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aec:	f000 fc28 	bl	8002340 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af6:	4820      	ldr	r0, [pc, #128]	; (8001b78 <main+0x14c>)
 8001af8:	f000 fef4 	bl	80028e4 <HAL_GPIO_WritePin>
		  Pyro1_Fired = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}

	  if (Fire_Pyro2 == 1 && Pyro2_Fired != 1)
 8001b02:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d019      	beq.n	8001b3e <main+0x112>
 8001b0a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001b0e:	f083 0301 	eor.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d012      	beq.n	8001b3e <main+0x112>
		{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4816      	ldr	r0, [pc, #88]	; (8001b78 <main+0x14c>)
 8001b20:	f000 fee0 	bl	80028e4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b28:	f000 fc0a 	bl	8002340 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	4811      	ldr	r0, [pc, #68]	; (8001b78 <main+0x14c>)
 8001b34:	f000 fed6 	bl	80028e4 <HAL_GPIO_WritePin>
		  Pyro2_Fired = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		}

	  LSM6DS3_AccReadXYZ(&AccelData);
 8001b3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fde2 	bl	800170c <LSM6DS3_AccReadXYZ>
	  LSM6DS3_GyroReadXYZ(&GyroData);
 8001b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fea5 	bl	800189c <LSM6DS3_GyroReadXYZ>



	  //snprintf(uart_buf, sizeof(uart_buf), " ACCEL X: %d, Y: %d Z: %d | GYRO X: %d, Y: %d Z: %d    \r\n ", (AccelData.X), (AccelData.Y), (AccelData.Z), (GyroData.X), (GyroData.Y), (GyroData.Z));

	  CDC_Transmit_FS((uint8_t *) uart_buf, sizeof(uart_buf));
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2150      	movs	r1, #80	; 0x50
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 feb0 	bl	80088bc <CDC_Transmit_FS>


	  //HAL_UART_Transmit(&huart1, &byte, 1, 100);
	  HAL_Delay(500);
 8001b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b60:	f000 fbee 	bl	8002340 <HAL_Delay>
	  if (Fire_Pyro1 == 1 && Pyro1_Fired != 1)
 8001b64:	e7af      	b.n	8001ac6 <main+0x9a>
 8001b66:	bf00      	nop
 8001b68:	20000530 	.word	0x20000530
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	200005cc 	.word	0x200005cc
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40021000 	.word	0x40021000

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	; 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	2230      	movs	r2, #48	; 0x30
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f008 fade 	bl	800a14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <SystemClock_Config+0xcc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <SystemClock_Config+0xcc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <SystemClock_Config+0xcc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a21      	ldr	r2, [pc, #132]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be2:	2302      	movs	r3, #2
 8001be4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bec:	2304      	movs	r3, #4
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bf0:	23a8      	movs	r3, #168	; 0xa8
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 f80b 	bl	8003c1c <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c0c:	f000 f99e 	bl	8001f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fa6c 	bl	800410c <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c3a:	f000 f987 	bl	8001f4c <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3750      	adds	r7, #80	; 0x50
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000

08001c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <MX_SPI1_Init+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c84:	2208      	movs	r2, #8
 8001c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001c9c:	220a      	movs	r2, #10
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_SPI1_Init+0x64>)
 8001ca2:	f002 fc2f 	bl	8004504 <HAL_SPI_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cac:	f000 f94e 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200005cc 	.word	0x200005cc
 8001cb8:	40013000 	.word	0x40013000

08001cbc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <MX_SPI3_Init+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001d08:	220a      	movs	r2, #10
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <MX_SPI3_Init+0x64>)
 8001d0e:	f002 fbf9 	bl	8004504 <HAL_SPI_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d18:	f000 f918 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000530 	.word	0x20000530
 8001d24:	40003c00 	.word	0x40003c00

08001d28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d46:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <MX_TIM4_Init+0x98>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d6a:	4814      	ldr	r0, [pc, #80]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d6c:	f002 fffc 	bl	8004d68 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d76:	f000 f8e9 	bl	8001f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	4619      	mov	r1, r3
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001d88:	f003 f83d 	bl	8004e06 <HAL_TIM_ConfigClockSource>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d92:	f000 f8db 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_TIM4_Init+0x94>)
 8001da4:	f003 fa30 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001dae:	f000 f8cd 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200004e8 	.word	0x200004e8
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_USART1_UART_Init+0x50>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f003 fa80 	bl	8005300 <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e06:	f000 f8a1 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000588 	.word	0x20000588
 8001e14:	40011000 	.word	0x40011000

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a41      	ldr	r2, [pc, #260]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a33      	ldr	r2, [pc, #204]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_GPIO_Init+0x124>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4820      	ldr	r0, [pc, #128]	; (8001f40 <MX_GPIO_Init+0x128>)
 8001ec0:	f000 fd10 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <MX_GPIO_Init+0x12c>)
 8001ecc:	f000 fd0a 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed6:	481c      	ldr	r0, [pc, #112]	; (8001f48 <MX_GPIO_Init+0x130>)
 8001ed8:	f000 fd04 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001edc:	2320      	movs	r3, #32
 8001ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4813      	ldr	r0, [pc, #76]	; (8001f40 <MX_GPIO_Init+0x128>)
 8001ef4:	f000 fb5a 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ef8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <MX_GPIO_Init+0x12c>)
 8001f12:	f000 fb4b 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <MX_GPIO_Init+0x130>)
 8001f30:	f000 fb3c 	bl	80025ac <HAL_GPIO_Init>

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40020000 	.word	0x40020000

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();***
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <Error_Handler+0x4>
	...

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_SPI_MspInit+0xe8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12c      	bne.n	8002020 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a30      	ldr	r2, [pc, #192]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a29      	ldr	r2, [pc, #164]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23e0      	movs	r3, #224	; 0xe0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	481e      	ldr	r0, [pc, #120]	; (8002094 <HAL_SPI_MspInit+0xf0>)
 800201a:	f000 fac7 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800201e:	e031      	b.n	8002084 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <HAL_SPI_MspInit+0xf4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12c      	bne.n	8002084 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8002034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_SPI_MspInit+0xec>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_SPI_MspInit+0xec>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_SPI_MspInit+0xec>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002062:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002074:	2306      	movs	r3, #6
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <HAL_SPI_MspInit+0xf8>)
 8002080:	f000 fa94 	bl	80025ac <HAL_GPIO_Init>
}
 8002084:	bf00      	nop
 8002086:	3730      	adds	r7, #48	; 0x30
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013000 	.word	0x40013000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000
 8002098:	40003c00 	.word	0x40003c00
 800209c:	40020800 	.word	0x40020800

080020a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_TIM_Base_MspInit+0x3c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_TIM_Base_MspInit+0x40>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_TIM_Base_MspInit+0x40>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_TIM_Base_MspInit+0x40>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_UART_MspInit+0x84>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12b      	bne.n	800215e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_UART_MspInit+0x88>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_UART_MspInit+0x88>)
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_UART_MspInit+0x88>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_UART_MspInit+0x88>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_UART_MspInit+0x88>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_UART_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800214e:	2307      	movs	r3, #7
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_UART_MspInit+0x8c>)
 800215a:	f000 fa27 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3728      	adds	r7, #40	; 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40011000 	.word	0x40011000
 800216c:	40023800 	.word	0x40023800
 8002170:	40020400 	.word	0x40020400

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  //HAL_SYSTICK_Callback();

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c0:	f000 f89e 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <OTG_FS_IRQHandler+0x10>)
 80021ce:	f000 fcf2 	bl	8002bb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20001af8 	.word	0x20001af8

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <SystemInit+0x28>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <SystemInit+0x28>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SystemInit+0x28>)
 80021f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800220e:	490e      	ldr	r1, [pc, #56]	; (8002248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002210:	4a0e      	ldr	r2, [pc, #56]	; (800224c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002224:	4c0b      	ldr	r4, [pc, #44]	; (8002254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002232:	f7ff ffd3 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f007 ff57 	bl	800a0e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7ff fbf7 	bl	8001a2c <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800224c:	0800a2a8 	.word	0x0800a2a8
  ldr r2, =_sbss
 8002250:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002254:	20001f00 	.word	0x20001f00

08002258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f94f 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	200f      	movs	r0, #15
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fe60 	bl	8001f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f967 	bl	8002592 <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022dc:	f000 f92f 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008
 8002324:	20000624 	.word	0x20000624

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000624 	.word	0x20000624

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff3e 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff8e 	bl	800247c <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff31 	bl	80023ec <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e16b      	b.n	80028a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	f040 815a 	bne.w	800289a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d005      	beq.n	80025fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d130      	bne.n	8002660 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 0201 	and.w	r2, r3, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d017      	beq.n	800269c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d123      	bne.n	80026f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80b4 	beq.w	800289a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <HAL_GPIO_Init+0x30c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a5f      	ldr	r2, [pc, #380]	; (80028b8 <HAL_GPIO_Init+0x30c>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_GPIO_Init+0x30c>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800274e:	4a5b      	ldr	r2, [pc, #364]	; (80028bc <HAL_GPIO_Init+0x310>)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	3302      	adds	r3, #2
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_GPIO_Init+0x314>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02b      	beq.n	80027d2 <HAL_GPIO_Init+0x226>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_GPIO_Init+0x318>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d025      	beq.n	80027ce <HAL_GPIO_Init+0x222>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a50      	ldr	r2, [pc, #320]	; (80028c8 <HAL_GPIO_Init+0x31c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01f      	beq.n	80027ca <HAL_GPIO_Init+0x21e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4f      	ldr	r2, [pc, #316]	; (80028cc <HAL_GPIO_Init+0x320>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d019      	beq.n	80027c6 <HAL_GPIO_Init+0x21a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4e      	ldr	r2, [pc, #312]	; (80028d0 <HAL_GPIO_Init+0x324>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0x216>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4d      	ldr	r2, [pc, #308]	; (80028d4 <HAL_GPIO_Init+0x328>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00d      	beq.n	80027be <HAL_GPIO_Init+0x212>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_GPIO_Init+0x32c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <HAL_GPIO_Init+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_GPIO_Init+0x330>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_GPIO_Init+0x20a>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e00e      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027b6:	2308      	movs	r3, #8
 80027b8:	e00c      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027ba:	2306      	movs	r3, #6
 80027bc:	e00a      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027be:	2305      	movs	r3, #5
 80027c0:	e008      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027c2:	2304      	movs	r3, #4
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e004      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_GPIO_Init+0x228>
 80027d2:	2300      	movs	r3, #0
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	f002 0203 	and.w	r2, r2, #3
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	4093      	lsls	r3, r2
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e4:	4935      	ldr	r1, [pc, #212]	; (80028bc <HAL_GPIO_Init+0x310>)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	3302      	adds	r3, #2
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_GPIO_Init+0x334>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002816:	4a32      	ldr	r2, [pc, #200]	; (80028e0 <HAL_GPIO_Init+0x334>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_GPIO_Init+0x334>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002840:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <HAL_GPIO_Init+0x334>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_GPIO_Init+0x334>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_GPIO_Init+0x334>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_GPIO_Init+0x334>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_GPIO_Init+0x334>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3301      	adds	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b0f      	cmp	r3, #15
 80028a4:	f67f ae90 	bls.w	80025c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40020800 	.word	0x40020800
 80028cc:	40020c00 	.word	0x40020c00
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40021400 	.word	0x40021400
 80028d8:	40021800 	.word	0x40021800
 80028dc:	40021c00 	.word	0x40021c00
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002918:	b08f      	sub	sp, #60	; 0x3c
 800291a:	af0a      	add	r7, sp, #40	; 0x28
 800291c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e10f      	b.n	8002b48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f006 f902 	bl	8008b4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2203      	movs	r2, #3
 800294c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fff5 	bl	8005956 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	687e      	ldr	r6, [r7, #4]
 8002974:	466d      	mov	r5, sp
 8002976:	f106 0410 	add.w	r4, r6, #16
 800297a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002982:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002986:	e885 0003 	stmia.w	r5, {r0, r1}
 800298a:	1d33      	adds	r3, r6, #4
 800298c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f002 fecc 	bl	800572c <USB_CoreInit>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0d0      	b.n	8002b48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 ffe3 	bl	8005978 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e04a      	b.n	8002a4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	333d      	adds	r3, #61	; 0x3d
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	333c      	adds	r3, #60	; 0x3c
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	b298      	uxth	r0, r3
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3342      	adds	r3, #66	; 0x42
 80029f4:	4602      	mov	r2, r0
 80029f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	333f      	adds	r3, #63	; 0x3f
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3344      	adds	r3, #68	; 0x44
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3348      	adds	r3, #72	; 0x48
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3350      	adds	r3, #80	; 0x50
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3af      	bcc.n	80029b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
 8002a5c:	e044      	b.n	8002ae8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3b5      	bcc.n	8002a5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	687e      	ldr	r6, [r7, #4]
 8002afa:	466d      	mov	r5, sp
 8002afc:	f106 0410 	add.w	r4, r6, #16
 8002b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b10:	1d33      	adds	r3, r6, #4
 8002b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b14:	6838      	ldr	r0, [r7, #0]
 8002b16:	f002 ff7b 	bl	8005a10 <USB_DevInit>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e00d      	b.n	8002b48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 fff7 	bl	8006b34 <USB_DevDisconnect>

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_PCD_Start+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e020      	b.n	8002bae <HAL_PCD_Start+0x5e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d109      	bne.n	8002b90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fecd 	bl	8005934 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 ffa7 	bl	8006af2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bb6:	b590      	push	{r4, r7, lr}
 8002bb8:	b08d      	sub	sp, #52	; 0x34
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f865 	bl	8006c9c <USB_GetMode>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 839d 	bne.w	8003314 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 ffc9 	bl	8006b76 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8393 	beq.w	8003312 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 ffc0 	bl	8006b76 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f002 0202 	and.w	r2, r2, #2
 8002c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 ffae 	bl	8006b76 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d161      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0210 	bic.w	r2, r2, #16
 8002c32:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	0c5b      	lsrs	r3, r3, #17
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d124      	bne.n	8002caa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d035      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6a38      	ldr	r0, [r7, #32]
 8002c80:	f003 fde5 	bl	800684e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c90:	441a      	add	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca2:	441a      	add	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	619a      	str	r2, [r3, #24]
 8002ca8:	e016      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	0c5b      	lsrs	r3, r3, #17
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d110      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6a38      	ldr	r0, [r7, #32]
 8002cc2:	f003 fdc4 	bl	800684e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd2:	441a      	add	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0210 	orr.w	r2, r2, #16
 8002ce6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 ff42 	bl	8006b76 <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cfc:	d16e      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 ff48 	bl	8006b9c <USB_ReadDevAllOutEpInterrupt>
 8002d0c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d0e:	e062      	b.n	8002dd6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d057      	beq.n	8002dca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 ff6d 	bl	8006c04 <USB_ReadDevOutEPInterrupt>
 8002d2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d42:	461a      	mov	r2, r3
 8002d44:	2301      	movs	r3, #1
 8002d46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fdb0 	bl	80038b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	461a      	mov	r2, r3
 8002d68:	2308      	movs	r3, #8
 8002d6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 feaa 	bl	8003ac8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da6:	461a      	mov	r2, r3
 8002da8:	2320      	movs	r3, #32
 8002daa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	3301      	adds	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d199      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fec8 	bl	8006b76 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df0:	f040 80c0 	bne.w	8002f74 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fee9 	bl	8006bd0 <USB_ReadDevAllInEpInterrupt>
 8002dfe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e04:	e0b2      	b.n	8002f6c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a7 	beq.w	8002f60 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 ff0f 	bl	8006c40 <USB_ReadDevInEPInterrupt>
 8002e22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d057      	beq.n	8002ede <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	2201      	movs	r2, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e4e:	4013      	ands	r3, r2
 8002e50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d132      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3348      	adds	r3, #72	; 0x48
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	3344      	adds	r3, #68	; 0x44
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4419      	add	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4403      	add	r3, r0
 8002ea0:	3348      	adds	r3, #72	; 0x48
 8002ea2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x31c>
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3350      	adds	r3, #80	; 0x50
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d108      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2101      	movs	r1, #1
 8002ece:	f003 ff17 	bl	8006d00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f005 feb8 	bl	8008c4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f10:	461a      	mov	r2, r3
 8002f12:	2310      	movs	r3, #16
 8002f14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2340      	movs	r3, #64	; 0x40
 8002f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fc1b 	bl	8003796 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	3301      	adds	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f47f af49 	bne.w	8002e06 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fdfc 	bl	8006b76 <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f88:	d122      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d108      	bne.n	8002fba <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fe26 	bl	8003c04 <HAL_PCDEx_LPM_Callback>
 8002fb8:	e002      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f005 febe 	bl	8008d3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fdce 	bl	8006b76 <USB_ReadInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe4:	d112      	bne.n	800300c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f005 fe7a 	bl	8008cf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800300a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 fdb0 	bl	8006b76 <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	f040 80c7 	bne.w	80031b2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2110      	movs	r1, #16
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fe4a 	bl	8005cd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003048:	e056      	b.n	80030f8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	461a      	mov	r2, r3
 8003058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800305c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306e:	0151      	lsls	r1, r2, #5
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	440a      	add	r2, r1
 8003074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800307c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308e:	0151      	lsls	r1, r2, #5
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	440a      	add	r2, r1
 8003094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800309c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	0151      	lsls	r1, r2, #5
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	440a      	add	r2, r1
 80030c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	0151      	lsls	r1, r2, #5
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	440a      	add	r2, r1
 80030e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	3301      	adds	r3, #1
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3a3      	bcc.n	800304a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003110:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003114:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312e:	f043 030b 	orr.w	r3, r3, #11
 8003132:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003144:	f043 030b 	orr.w	r3, r3, #11
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	e015      	b.n	8003178 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800315e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003162:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003172:	f043 030b 	orr.w	r3, r3, #11
 8003176:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003186:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800318a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800319c:	461a      	mov	r2, r3
 800319e:	f003 fdaf 	bl	8006d00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fcdd 	bl	8006b76 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c6:	d124      	bne.n	8003212 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 fd73 	bl	8006cb8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f002 fddb 	bl	8005d92 <USB_GetDevSpeed>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681c      	ldr	r4, [r3, #0]
 80031e8:	f001 f958 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80031ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	4620      	mov	r0, r4
 80031f8:	f002 fafa 	bl	80057f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f005 fd4e 	bl	8008c9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003210:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f003 fcad 	bl	8006b76 <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d10a      	bne.n	800323c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 fd2b 	bl	8008c82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f002 0208 	and.w	r2, r2, #8
 800323a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fc98 	bl	8006b76 <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003250:	d10f      	bne.n	8003272 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f005 fd8d 	bl	8008d7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fc7d 	bl	8006b76 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003286:	d10f      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f005 fd60 	bl	8008d58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 fc62 	bl	8006b76 <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d10a      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f005 fd6e 	bl	8008da0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fc4c 	bl	8006b76 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d115      	bne.n	8003314 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f005 fd5e 	bl	8008dbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	e000      	b.n	8003314 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003312:	bf00      	nop
    }
  }
}
 8003314:	3734      	adds	r7, #52	; 0x34
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}

0800331a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_PCD_SetAddress+0x1a>
 8003330:	2302      	movs	r3, #2
 8003332:	e013      	b.n	800335c <HAL_PCD_SetAddress+0x42>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fbaa 	bl	8006aa6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	70fb      	strb	r3, [r7, #3]
 8003376:	460b      	mov	r3, r1
 8003378:	803b      	strh	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	da0f      	bge.n	80033aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	3338      	adds	r3, #56	; 0x38
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	705a      	strb	r2, [r3, #1]
 80033a8:	e00f      	b.n	80033ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 020f 	and.w	r2, r3, #15
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	3304      	adds	r3, #4
 80033c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033d6:	883a      	ldrh	r2, [r7, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	78ba      	ldrb	r2, [r7, #2]
 80033e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_PCD_EP_Open+0xaa>
 800340a:	2302      	movs	r3, #2
 800340c:	e00e      	b.n	800342c <HAL_PCD_EP_Open+0xc8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	4618      	mov	r0, r3
 800341e:	f002 fcdd 	bl	8005ddc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800342a:	7afb      	ldrb	r3, [r7, #11]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003444:	2b00      	cmp	r3, #0
 8003446:	da0f      	bge.n	8003468 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	3338      	adds	r3, #56	; 0x38
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	705a      	strb	r2, [r3, #1]
 8003466:	e00f      	b.n	8003488 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 020f 	and.w	r2, r3, #15
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_PCD_EP_Close+0x6e>
 800349e:	2302      	movs	r3, #2
 80034a0:	e00e      	b.n	80034c0 <HAL_PCD_EP_Close+0x8c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f002 fd1b 	bl	8005eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	460b      	mov	r3, r1
 80034d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	f003 020f 	and.w	r2, r3, #15
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2200      	movs	r2, #0
 8003508:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	f002 fff6 	bl	800652c <USB_EP0StartXfer>
 8003540:	e008      	b.n	8003554 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6979      	ldr	r1, [r7, #20]
 8003550:	f002 fda8 	bl	80060a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003580:	681b      	ldr	r3, [r3, #0]
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	460b      	mov	r3, r1
 800359c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3338      	adds	r3, #56	; 0x38
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2201      	movs	r2, #1
 80035cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	6979      	ldr	r1, [r7, #20]
 8003600:	f002 ff94 	bl	800652c <USB_EP0StartXfer>
 8003604:	e008      	b.n	8003618 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6979      	ldr	r1, [r7, #20]
 8003614:	f002 fd46 	bl	80060a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d901      	bls.n	8003640 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e050      	b.n	80036e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	da0f      	bge.n	8003668 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	f003 020f 	and.w	r2, r3, #15
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3338      	adds	r3, #56	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	705a      	strb	r2, [r3, #1]
 8003666:	e00d      	b.n	8003684 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	3304      	adds	r3, #4
 800367c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_PCD_EP_SetStall+0x82>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e01e      	b.n	80036e2 <HAL_PCD_EP_SetStall+0xc0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68f9      	ldr	r1, [r7, #12]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 f923 	bl	80068fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	b2d9      	uxtb	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036d2:	461a      	mov	r2, r3
 80036d4:	f003 fb14 	bl	8006d00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 020f 	and.w	r2, r3, #15
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d901      	bls.n	8003708 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e042      	b.n	800378e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da0f      	bge.n	8003730 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	3338      	adds	r3, #56	; 0x38
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	705a      	strb	r2, [r3, #1]
 800372e:	e00f      	b.n	8003750 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 020f 	and.w	r2, r3, #15
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_PCD_EP_ClrStall+0x86>
 800376c:	2302      	movs	r3, #2
 800376e:	e00e      	b.n	800378e <HAL_PCD_EP_ClrStall+0xa4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 f92b 	bl	80069da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08a      	sub	sp, #40	; 0x28
 800379a:	af02      	add	r7, sp, #8
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	3338      	adds	r3, #56	; 0x38
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d901      	bls.n	80037ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e06c      	b.n	80038a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d902      	bls.n	80037ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3303      	adds	r3, #3
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037f2:	e02b      	b.n	800384c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	429a      	cmp	r2, r3
 8003808:	d902      	bls.n	8003810 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	3303      	adds	r3, #3
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68d9      	ldr	r1, [r3, #12]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003828:	b2db      	uxtb	r3, r3
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4603      	mov	r3, r0
 800382e:	6978      	ldr	r0, [r7, #20]
 8003830:	f002 ffcf 	bl	80067d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	441a      	add	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	441a      	add	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	b29b      	uxth	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	429a      	cmp	r2, r3
 8003860:	d809      	bhi.n	8003876 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800386a:	429a      	cmp	r2, r3
 800386c:	d203      	bcs.n	8003876 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1be      	bne.n	80037f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	429a      	cmp	r2, r3
 8003880:	d811      	bhi.n	80038a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	2201      	movs	r2, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	43db      	mvns	r3, r3
 800389c:	6939      	ldr	r1, [r7, #16]
 800389e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a2:	4013      	ands	r3, r2
 80038a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	333c      	adds	r3, #60	; 0x3c
 80038c8:	3304      	adds	r3, #4
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 80a0 	bne.w	8003a28 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d015      	beq.n	800391e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a72      	ldr	r2, [pc, #456]	; (8003ac0 <PCD_EP_OutXfrComplete_int+0x210>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	f240 80dd 	bls.w	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80d7 	beq.w	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	6093      	str	r3, [r2, #8]
 800391c:	e0cb      	b.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	461a      	mov	r2, r3
 8003936:	2320      	movs	r3, #32
 8003938:	6093      	str	r3, [r2, #8]
 800393a:	e0bc      	b.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 80b7 	bne.w	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a5d      	ldr	r2, [pc, #372]	; (8003ac0 <PCD_EP_OutXfrComplete_int+0x210>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d90f      	bls.n	8003970 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	461a      	mov	r2, r3
 8003968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396c:	6093      	str	r3, [r2, #8]
 800396e:	e0a2      	b.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003982:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	440b      	add	r3, r1
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003996:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4403      	add	r3, r0
 80039a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4403      	add	r3, r0
 80039ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4419      	add	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4403      	add	r3, r0
 80039e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d114      	bne.n	8003a1a <PCD_EP_OutXfrComplete_int+0x16a>
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a12:	461a      	mov	r2, r3
 8003a14:	2101      	movs	r1, #1
 8003a16:	f003 f973 	bl	8006d00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f005 f8f9 	bl	8008c18 <HAL_PCD_DataOutStageCallback>
 8003a26:	e046      	b.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d124      	bne.n	8003a7a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	461a      	mov	r2, r3
 8003a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4c:	6093      	str	r3, [r2, #8]
 8003a4e:	e032      	b.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	2320      	movs	r3, #32
 8003a6a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f005 f8d0 	bl	8008c18 <HAL_PCD_DataOutStageCallback>
 8003a78:	e01d      	b.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d114      	bne.n	8003aaa <PCD_EP_OutXfrComplete_int+0x1fa>
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f003 f92b 	bl	8006d00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f005 f8b1 	bl	8008c18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	4f54300a 	.word	0x4f54300a
 8003ac4:	4f54310a 	.word	0x4f54310a

08003ac8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	333c      	adds	r3, #60	; 0x3c
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d90e      	bls.n	8003b1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f005 f869 	bl	8008bf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d90c      	bls.n	8003b44 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f003 f8de 	bl	8006d00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	4f54300a 	.word	0x4f54300a

08003b54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
 8003b60:	4613      	mov	r3, r2
 8003b62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b72:	883b      	ldrh	r3, [r7, #0]
 8003b74:	0419      	lsls	r1, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b80:	e028      	b.n	8003bd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e00d      	b.n	8003bb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	3340      	adds	r3, #64	; 0x40
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4413      	add	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d3ec      	bcc.n	8003b96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	0418      	lsls	r0, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4302      	orrs	r2, r0
 8003bcc:	3340      	adds	r3, #64	; 0x40
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e264      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d075      	beq.n	8003d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c3a:	4ba3      	ldr	r3, [pc, #652]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4ba0      	ldr	r3, [pc, #640]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d112      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b9d      	ldr	r3, [pc, #628]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	4b99      	ldr	r3, [pc, #612]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d05b      	beq.n	8003d24 <HAL_RCC_OscConfig+0x108>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d157      	bne.n	8003d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e23f      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_OscConfig+0x74>
 8003c82:	4b91      	ldr	r3, [pc, #580]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a90      	ldr	r2, [pc, #576]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e01d      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x98>
 8003c9a:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a8a      	ldr	r2, [pc, #552]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a87      	ldr	r2, [pc, #540]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003cb4:	4b84      	ldr	r3, [pc, #528]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a83      	ldr	r2, [pc, #524]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b81      	ldr	r3, [pc, #516]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a80      	ldr	r2, [pc, #512]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fb28 	bl	8002328 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fb24 	bl	8002328 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e204      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0xc0>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fe fb14 	bl	8002328 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fe fb10 	bl	8002328 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1f0      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0xe8>
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d063      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d11c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b5f      	ldr	r3, [pc, #380]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	4b5c      	ldr	r3, [pc, #368]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1c4      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4952      	ldr	r1, [pc, #328]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	e03a      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_RCC_OscConfig+0x2b0>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fe fac9 	bl	8002328 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fe fac5 	bl	8002328 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e1a5      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db8:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4940      	ldr	r1, [pc, #256]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e015      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dce:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_OscConfig+0x2b0>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe faa8 	bl	8002328 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fe faa4 	bl	8002328 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e184      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d030      	beq.n	8003e68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_RCC_OscConfig+0x2b4>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fe fa88 	bl	8002328 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7fe fa84 	bl	8002328 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e164      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x200>
 8003e3a:	e015      	b.n	8003e68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_OscConfig+0x2b4>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fe fa71 	bl	8002328 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fe fa6d 	bl	8002328 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e14d      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80a0 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_OscConfig+0x2b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d121      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_RCC_OscConfig+0x2b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <HAL_RCC_OscConfig+0x2b8>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fa33 	bl	8002328 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	e011      	b.n	8003eea <HAL_RCC_OscConfig+0x2ce>
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470000 	.word	0x42470000
 8003ed0:	42470e80 	.word	0x42470e80
 8003ed4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed8:	f7fe fa26 	bl	8002328 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e106      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eea:	4b85      	ldr	r3, [pc, #532]	; (8004100 <HAL_RCC_OscConfig+0x4e4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x2f0>
 8003efe:	4b81      	ldr	r3, [pc, #516]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a80      	ldr	r2, [pc, #512]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0a:	e01c      	b.n	8003f46 <HAL_RCC_OscConfig+0x32a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x312>
 8003f14:	4b7b      	ldr	r3, [pc, #492]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a7a      	ldr	r2, [pc, #488]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	4b78      	ldr	r3, [pc, #480]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a77      	ldr	r2, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0x32a>
 8003f2e:	4b75      	ldr	r3, [pc, #468]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a74      	ldr	r2, [pc, #464]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	4b72      	ldr	r3, [pc, #456]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a71      	ldr	r2, [pc, #452]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d015      	beq.n	8003f7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fe f9eb 	bl	8002328 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fe f9e7 	bl	8002328 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0c5      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	4b65      	ldr	r3, [pc, #404]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ee      	beq.n	8003f56 <HAL_RCC_OscConfig+0x33a>
 8003f78:	e014      	b.n	8003fa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fe f9d5 	bl	8002328 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fe f9d1 	bl	8002328 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0af      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ee      	bne.n	8003f82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b56      	ldr	r3, [pc, #344]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a55      	ldr	r2, [pc, #340]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 809b 	beq.w	80040f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d05c      	beq.n	8004086 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d141      	bne.n	8004058 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd4:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <HAL_RCC_OscConfig+0x4ec>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fe f9a5 	bl	8002328 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fe f9a1 	bl	8002328 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e081      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff4:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4937      	ldr	r1, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCC_OscConfig+0x4ec>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe f97a 	bl	8002328 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe f976 	bl	8002328 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e056      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x41c>
 8004056:	e04e      	b.n	80040f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7fe f963 	bl	8002328 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fe f95f 	bl	8002328 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e03f      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0x44a>
 8004084:	e037      	b.n	80040f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e032      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <HAL_RCC_OscConfig+0x4e8>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d028      	beq.n	80040f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d121      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d11a      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c2:	4013      	ands	r3, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d111      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	3b01      	subs	r3, #1
 80040dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40007000 	.word	0x40007000
 8004104:	40023800 	.word	0x40023800
 8004108:	42470060 	.word	0x42470060

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0cc      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b68      	ldr	r3, [pc, #416]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d90c      	bls.n	8004148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b65      	ldr	r3, [pc, #404]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800416a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d044      	beq.n	800422c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d119      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e06f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e067      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 0203 	bic.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4934      	ldr	r1, [pc, #208]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041fc:	f7fe f894 	bl	8002328 <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	e00a      	b.n	800421a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004204:	f7fe f890 	bl	8002328 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e04f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 020c 	and.w	r2, r3, #12
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	429a      	cmp	r2, r3
 800422a:	d1eb      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d20c      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fff4 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0800a23c 	.word	0x0800a23c
 80042d0:	20000000 	.word	0x20000000
 80042d4:	20000004 	.word	0x20000004

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	2300      	movs	r3, #0
 80042ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f0:	4b67      	ldr	r3, [pc, #412]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d00d      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x40>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	f200 80bd 	bhi.w	800447c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x3a>
 800430a:	e0b7      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800430e:	60bb      	str	r3, [r7, #8]
       break;
 8004310:	e0b7      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004312:	4b61      	ldr	r3, [pc, #388]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004314:	60bb      	str	r3, [r7, #8]
      break;
 8004316:	e0b4      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004318:	4b5d      	ldr	r3, [pc, #372]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004320:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d04d      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b58      	ldr	r3, [pc, #352]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	461a      	mov	r2, r3
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	ea02 0800 	and.w	r8, r2, r0
 8004346:	ea03 0901 	and.w	r9, r3, r1
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	014b      	lsls	r3, r1, #5
 8004358:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800435c:	0142      	lsls	r2, r0, #5
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	ebb0 0008 	subs.w	r0, r0, r8
 8004366:	eb61 0109 	sbc.w	r1, r1, r9
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	018b      	lsls	r3, r1, #6
 8004374:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004378:	0182      	lsls	r2, r0, #6
 800437a:	1a12      	subs	r2, r2, r0
 800437c:	eb63 0301 	sbc.w	r3, r3, r1
 8004380:	f04f 0000 	mov.w	r0, #0
 8004384:	f04f 0100 	mov.w	r1, #0
 8004388:	00d9      	lsls	r1, r3, #3
 800438a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800438e:	00d0      	lsls	r0, r2, #3
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	eb12 0208 	adds.w	r2, r2, r8
 8004398:	eb43 0309 	adc.w	r3, r3, r9
 800439c:	f04f 0000 	mov.w	r0, #0
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	0259      	lsls	r1, r3, #9
 80043a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043aa:	0250      	lsls	r0, r2, #9
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f7fc fbc0 	bl	8000b40 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e04a      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	461a      	mov	r2, r3
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	ea02 0400 	and.w	r4, r2, r0
 80043e2:	ea03 0501 	and.w	r5, r3, r1
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	014b      	lsls	r3, r1, #5
 80043f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043f8:	0142      	lsls	r2, r0, #5
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	eb61 0105 	sbc.w	r1, r1, r5
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	018b      	lsls	r3, r1, #6
 800440e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004412:	0182      	lsls	r2, r0, #6
 8004414:	1a12      	subs	r2, r2, r0
 8004416:	eb63 0301 	sbc.w	r3, r3, r1
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	00d9      	lsls	r1, r3, #3
 8004424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004428:	00d0      	lsls	r0, r2, #3
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	1912      	adds	r2, r2, r4
 8004430:	eb45 0303 	adc.w	r3, r5, r3
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	0299      	lsls	r1, r3, #10
 800443e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004442:	0290      	lsls	r0, r2, #10
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f7fc fb74 	bl	8000b40 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	60bb      	str	r3, [r7, #8]
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800447e:	60bb      	str	r3, [r7, #8]
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	68bb      	ldr	r3, [r7, #8]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400
 8004498:	007a1200 	.word	0x007a1200

0800449c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b8:	f7ff fff0 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	0800a24c 	.word	0x0800a24c

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffdc 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0b5b      	lsrs	r3, r3, #13
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	0800a24c 	.word	0x0800a24c

08004504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07b      	b.n	800460e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004526:	d009      	beq.n	800453c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	61da      	str	r2, [r3, #28]
 800452e:	e005      	b.n	800453c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fd24 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0104 	and.w	r1, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f003 0210 	and.w	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b088      	sub	sp, #32
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_SPI_Transmit+0x22>
 8004634:	2302      	movs	r3, #2
 8004636:	e126      	b.n	8004886 <HAL_SPI_Transmit+0x270>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004640:	f7fd fe72 	bl	8002328 <HAL_GetTick>
 8004644:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d002      	beq.n	800465c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004656:	2302      	movs	r3, #2
 8004658:	77fb      	strb	r3, [r7, #31]
    goto error;
 800465a:	e10b      	b.n	8004874 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_SPI_Transmit+0x52>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800466c:	e102      	b.n	8004874 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2203      	movs	r2, #3
 8004672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b4:	d10f      	bne.n	80046d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d007      	beq.n	80046f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fc:	d14b      	bne.n	8004796 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_SPI_Transmit+0xf6>
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d13e      	bne.n	800478a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004730:	e02b      	b.n	800478a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d112      	bne.n	8004766 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	881a      	ldrh	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	1c9a      	adds	r2, r3, #2
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	86da      	strh	r2, [r3, #54]	; 0x36
 8004764:	e011      	b.n	800478a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004766:	f7fd fddf 	bl	8002328 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d803      	bhi.n	800477e <HAL_SPI_Transmit+0x168>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800477c:	d102      	bne.n	8004784 <HAL_SPI_Transmit+0x16e>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004788:	e074      	b.n	8004874 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ce      	bne.n	8004732 <HAL_SPI_Transmit+0x11c>
 8004794:	e04c      	b.n	8004830 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_Transmit+0x18e>
 800479e:	8afb      	ldrh	r3, [r7, #22]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d140      	bne.n	8004826 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047ca:	e02c      	b.n	8004826 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d113      	bne.n	8004802 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004800:	e011      	b.n	8004826 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004802:	f7fd fd91 	bl	8002328 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d803      	bhi.n	800481a <HAL_SPI_Transmit+0x204>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004818:	d102      	bne.n	8004820 <HAL_SPI_Transmit+0x20a>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004824:	e026      	b.n	8004874 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1cd      	bne.n	80047cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fa55 	bl	8004ce4 <SPI_EndRxTxTransaction>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e000      	b.n	8004874 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004884:	7ffb      	ldrb	r3, [r7, #31]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08c      	sub	sp, #48	; 0x30
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800489c:	2301      	movs	r3, #1
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x26>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e18a      	b.n	8004bca <HAL_SPI_TransmitReceive+0x33c>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048bc:	f7fd fd34 	bl	8002328 <HAL_GetTick>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048d2:	887b      	ldrh	r3, [r7, #2]
 80048d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d00f      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x70>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e4:	d107      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x68>
 80048ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
 80048f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048fc:	e15b      	b.n	8004bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x82>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x82>
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004916:	e14e      	b.n	8004bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b04      	cmp	r3, #4
 8004922:	d003      	beq.n	800492c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2205      	movs	r2, #5
 8004928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	887a      	ldrh	r2, [r7, #2]
 8004942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	887a      	ldrh	r2, [r7, #2]
 800494e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d007      	beq.n	8004980 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800497e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004988:	d178      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_SPI_TransmitReceive+0x10a>
 8004992:	8b7b      	ldrh	r3, [r7, #26]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d166      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	881a      	ldrh	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049bc:	e053      	b.n	8004a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x176>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x176>
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d113      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d119      	bne.n	8004a46 <HAL_SPI_TransmitReceive+0x1b8>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d014      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	b292      	uxth	r2, r2
 8004a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a42:	2301      	movs	r3, #1
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a46:	f7fd fc6f 	bl	8002328 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d807      	bhi.n	8004a66 <HAL_SPI_TransmitReceive+0x1d8>
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a5c:	d003      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a64:	e0a7      	b.n	8004bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1a6      	bne.n	80049be <HAL_SPI_TransmitReceive+0x130>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1a1      	bne.n	80049be <HAL_SPI_TransmitReceive+0x130>
 8004a7a:	e07c      	b.n	8004b76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x1fc>
 8004a84:	8b7b      	ldrh	r3, [r7, #26]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d16b      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab0:	e057      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d11c      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x26c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d017      	beq.n	8004afa <HAL_SPI_TransmitReceive+0x26c>
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d114      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	7812      	ldrb	r2, [r2, #0]
 8004adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d119      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x2ae>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d014      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b3c:	f7fd fbf4 	bl	8002328 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d803      	bhi.n	8004b54 <HAL_SPI_TransmitReceive+0x2c6>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d102      	bne.n	8004b5a <HAL_SPI_TransmitReceive+0x2cc>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b60:	e029      	b.n	8004bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1a2      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x224>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d19d      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f8b2 	bl	8004ce4 <SPI_EndRxTxTransaction>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b92:	e010      	b.n	8004bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	e000      	b.n	8004bb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3730      	adds	r7, #48	; 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004be4:	f7fd fba0 	bl	8002328 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bf4:	f7fd fb98 	bl	8002328 <HAL_GetTick>
 8004bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	015b      	lsls	r3, r3, #5
 8004c00:	0d1b      	lsrs	r3, r3, #20
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0a:	e054      	b.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c12:	d050      	beq.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c14:	f7fd fb88 	bl	8002328 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d902      	bls.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d13d      	bne.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c42:	d111      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	d004      	beq.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d107      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d10f      	bne.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e017      	b.n	8004cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d19b      	bne.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000000 	.word	0x20000000

08004ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <SPI_EndRxTxTransaction+0x7c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <SPI_EndRxTxTransaction+0x80>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0d5b      	lsrs	r3, r3, #21
 8004cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0e:	d112      	bne.n	8004d36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff ff5a 	bl	8004bd4 <SPI_WaitFlagStateUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e00f      	b.n	8004d56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	d0f2      	beq.n	8004d36 <SPI_EndRxTxTransaction+0x52>
 8004d50:	e000      	b.n	8004d54 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d52:	bf00      	nop
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000000 	.word	0x20000000
 8004d64:	165e9f81 	.word	0x165e9f81

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e041      	b.n	8004dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd f986 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 f8f4 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_ConfigClockSource+0x1c>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0b4      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x186>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5a:	d03e      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0xd4>
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	f200 8087 	bhi.w	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e68:	f000 8086 	beq.w	8004f78 <HAL_TIM_ConfigClockSource+0x172>
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e70:	d87f      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e72:	2b70      	cmp	r3, #112	; 0x70
 8004e74:	d01a      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0xa6>
 8004e76:	2b70      	cmp	r3, #112	; 0x70
 8004e78:	d87b      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7a:	2b60      	cmp	r3, #96	; 0x60
 8004e7c:	d050      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x11a>
 8004e7e:	2b60      	cmp	r3, #96	; 0x60
 8004e80:	d877      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	2b50      	cmp	r3, #80	; 0x50
 8004e84:	d03c      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0xfa>
 8004e86:	2b50      	cmp	r3, #80	; 0x50
 8004e88:	d873      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d058      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x13a>
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d86f      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e92:	2b30      	cmp	r3, #48	; 0x30
 8004e94:	d064      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0x15a>
 8004e96:	2b30      	cmp	r3, #48	; 0x30
 8004e98:	d86b      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d060      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d867      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d05c      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d05a      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0x15a>
 8004eaa:	e062      	b.n	8004f72 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f000 f984 	bl	80051c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ece:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
      break;
 8004ed8:	e04f      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6899      	ldr	r1, [r3, #8]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f000 f96d 	bl	80051c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efc:	609a      	str	r2, [r3, #8]
      break;
 8004efe:	e03c      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f000 f8e1 	bl	80050d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2150      	movs	r1, #80	; 0x50
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f93a 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004f1e:	e02c      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f000 f900 	bl	8005132 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2160      	movs	r1, #96	; 0x60
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f92a 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004f3e:	e01c      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f000 f8c1 	bl	80050d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2140      	movs	r1, #64	; 0x40
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 f91a 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004f5e:	e00c      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f000 f911 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004f70:	e003      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      break;
 8004f76:	e000      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a40      	ldr	r2, [pc, #256]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d00f      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3d      	ldr	r2, [pc, #244]	; (80050ac <TIM_Base_SetConfig+0x118>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3b      	ldr	r2, [pc, #236]	; (80050b4 <TIM_Base_SetConfig+0x120>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d02b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d027      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2c      	ldr	r2, [pc, #176]	; (80050ac <TIM_Base_SetConfig+0x118>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d023      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2b      	ldr	r2, [pc, #172]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01f      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <TIM_Base_SetConfig+0x120>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d017      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a28      	ldr	r2, [pc, #160]	; (80050bc <TIM_Base_SetConfig+0x128>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <TIM_Base_SetConfig+0x12c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a26      	ldr	r2, [pc, #152]	; (80050c4 <TIM_Base_SetConfig+0x130>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <TIM_Base_SetConfig+0x134>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a24      	ldr	r2, [pc, #144]	; (80050cc <TIM_Base_SetConfig+0x138>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a23      	ldr	r2, [pc, #140]	; (80050d0 <TIM_Base_SetConfig+0x13c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0xf8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d103      	bne.n	8005094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	615a      	str	r2, [r3, #20]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40001800 	.word	0x40001800
 80050cc:	40001c00 	.word	0x40001c00
 80050d0:	40002000 	.word	0x40002000

080050d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0201 	bic.w	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 030a 	bic.w	r3, r3, #10
 8005110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0210 	bic.w	r2, r3, #16
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800515c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	031b      	lsls	r3, r3, #12
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800516e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f043 0307 	orr.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800521c:	2302      	movs	r3, #2
 800521e:	e05a      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d01d      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a17      	ldr	r2, [pc, #92]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800

08005300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e03f      	b.n	8005392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fedc 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	; 0x24
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f829 	bl	800539c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	b09f      	sub	sp, #124	; 0x7c
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b2:	68d9      	ldr	r1, [r3, #12]
 80053b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	ea40 0301 	orr.w	r3, r0, r1
 80053bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053e0:	f021 010c 	bic.w	r1, r1, #12
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ea:	430b      	orrs	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	6999      	ldr	r1, [r3, #24]
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	ea40 0301 	orr.w	r3, r0, r1
 8005404:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4bc5      	ldr	r3, [pc, #788]	; (8005720 <UART_SetConfig+0x384>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d004      	beq.n	800541a <UART_SetConfig+0x7e>
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4bc3      	ldr	r3, [pc, #780]	; (8005724 <UART_SetConfig+0x388>)
 8005416:	429a      	cmp	r2, r3
 8005418:	d103      	bne.n	8005422 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800541a:	f7ff f85f 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 800541e:	6778      	str	r0, [r7, #116]	; 0x74
 8005420:	e002      	b.n	8005428 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005422:	f7ff f847 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005426:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005430:	f040 80b6 	bne.w	80055a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005436:	461c      	mov	r4, r3
 8005438:	f04f 0500 	mov.w	r5, #0
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	1891      	adds	r1, r2, r2
 8005442:	6439      	str	r1, [r7, #64]	; 0x40
 8005444:	415b      	adcs	r3, r3
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
 8005448:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800544c:	1912      	adds	r2, r2, r4
 800544e:	eb45 0303 	adc.w	r3, r5, r3
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f04f 0100 	mov.w	r1, #0
 800545a:	00d9      	lsls	r1, r3, #3
 800545c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005460:	00d0      	lsls	r0, r2, #3
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	1911      	adds	r1, r2, r4
 8005468:	6639      	str	r1, [r7, #96]	; 0x60
 800546a:	416b      	adcs	r3, r5
 800546c:	667b      	str	r3, [r7, #100]	; 0x64
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	461a      	mov	r2, r3
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	1891      	adds	r1, r2, r2
 800547a:	63b9      	str	r1, [r7, #56]	; 0x38
 800547c:	415b      	adcs	r3, r3
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005484:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005488:	f7fb fb5a 	bl	8000b40 <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4ba5      	ldr	r3, [pc, #660]	; (8005728 <UART_SetConfig+0x38c>)
 8005492:	fba3 2302 	umull	r2, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	011e      	lsls	r6, r3, #4
 800549a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549c:	461c      	mov	r4, r3
 800549e:	f04f 0500 	mov.w	r5, #0
 80054a2:	4622      	mov	r2, r4
 80054a4:	462b      	mov	r3, r5
 80054a6:	1891      	adds	r1, r2, r2
 80054a8:	6339      	str	r1, [r7, #48]	; 0x30
 80054aa:	415b      	adcs	r3, r3
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
 80054ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054b2:	1912      	adds	r2, r2, r4
 80054b4:	eb45 0303 	adc.w	r3, r5, r3
 80054b8:	f04f 0000 	mov.w	r0, #0
 80054bc:	f04f 0100 	mov.w	r1, #0
 80054c0:	00d9      	lsls	r1, r3, #3
 80054c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054c6:	00d0      	lsls	r0, r2, #3
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	1911      	adds	r1, r2, r4
 80054ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80054d0:	416b      	adcs	r3, r5
 80054d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	461a      	mov	r2, r3
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	1891      	adds	r1, r2, r2
 80054e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80054e2:	415b      	adcs	r3, r3
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054ee:	f7fb fb27 	bl	8000b40 <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4b8c      	ldr	r3, [pc, #560]	; (8005728 <UART_SetConfig+0x38c>)
 80054f8:	fba3 1302 	umull	r1, r3, r3, r2
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	2164      	movs	r1, #100	; 0x64
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	3332      	adds	r3, #50	; 0x32
 800550a:	4a87      	ldr	r2, [pc, #540]	; (8005728 <UART_SetConfig+0x38c>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005518:	441e      	add	r6, r3
 800551a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551c:	4618      	mov	r0, r3
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	1894      	adds	r4, r2, r2
 8005528:	623c      	str	r4, [r7, #32]
 800552a:	415b      	adcs	r3, r3
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005532:	1812      	adds	r2, r2, r0
 8005534:	eb41 0303 	adc.w	r3, r1, r3
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	f04f 0500 	mov.w	r5, #0
 8005540:	00dd      	lsls	r5, r3, #3
 8005542:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005546:	00d4      	lsls	r4, r2, #3
 8005548:	4622      	mov	r2, r4
 800554a:	462b      	mov	r3, r5
 800554c:	1814      	adds	r4, r2, r0
 800554e:	653c      	str	r4, [r7, #80]	; 0x50
 8005550:	414b      	adcs	r3, r1
 8005552:	657b      	str	r3, [r7, #84]	; 0x54
 8005554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	461a      	mov	r2, r3
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	1891      	adds	r1, r2, r2
 8005560:	61b9      	str	r1, [r7, #24]
 8005562:	415b      	adcs	r3, r3
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800556a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800556e:	f7fb fae7 	bl	8000b40 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4b6c      	ldr	r3, [pc, #432]	; (8005728 <UART_SetConfig+0x38c>)
 8005578:	fba3 1302 	umull	r1, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	2164      	movs	r1, #100	; 0x64
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	3332      	adds	r3, #50	; 0x32
 800558a:	4a67      	ldr	r2, [pc, #412]	; (8005728 <UART_SetConfig+0x38c>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f003 0207 	and.w	r2, r3, #7
 8005596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4432      	add	r2, r6
 800559c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800559e:	e0b9      	b.n	8005714 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a2:	461c      	mov	r4, r3
 80055a4:	f04f 0500 	mov.w	r5, #0
 80055a8:	4622      	mov	r2, r4
 80055aa:	462b      	mov	r3, r5
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	6139      	str	r1, [r7, #16]
 80055b0:	415b      	adcs	r3, r3
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055b8:	1912      	adds	r2, r2, r4
 80055ba:	eb45 0303 	adc.w	r3, r5, r3
 80055be:	f04f 0000 	mov.w	r0, #0
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	00d9      	lsls	r1, r3, #3
 80055c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055cc:	00d0      	lsls	r0, r2, #3
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	eb12 0804 	adds.w	r8, r2, r4
 80055d6:	eb43 0905 	adc.w	r9, r3, r5
 80055da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	008b      	lsls	r3, r1, #2
 80055ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055f2:	0082      	lsls	r2, r0, #2
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	f7fb faa2 	bl	8000b40 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4b49      	ldr	r3, [pc, #292]	; (8005728 <UART_SetConfig+0x38c>)
 8005602:	fba3 2302 	umull	r2, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	011e      	lsls	r6, r3, #4
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	4618      	mov	r0, r3
 800560e:	f04f 0100 	mov.w	r1, #0
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	1894      	adds	r4, r2, r2
 8005618:	60bc      	str	r4, [r7, #8]
 800561a:	415b      	adcs	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005622:	1812      	adds	r2, r2, r0
 8005624:	eb41 0303 	adc.w	r3, r1, r3
 8005628:	f04f 0400 	mov.w	r4, #0
 800562c:	f04f 0500 	mov.w	r5, #0
 8005630:	00dd      	lsls	r5, r3, #3
 8005632:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005636:	00d4      	lsls	r4, r2, #3
 8005638:	4622      	mov	r2, r4
 800563a:	462b      	mov	r3, r5
 800563c:	1814      	adds	r4, r2, r0
 800563e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005640:	414b      	adcs	r3, r1
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	008b      	lsls	r3, r1, #2
 8005658:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800565c:	0082      	lsls	r2, r0, #2
 800565e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005662:	f7fb fa6d 	bl	8000b40 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <UART_SetConfig+0x38c>)
 800566c:	fba3 1302 	umull	r1, r3, r3, r2
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	2164      	movs	r1, #100	; 0x64
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	3332      	adds	r3, #50	; 0x32
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <UART_SetConfig+0x38c>)
 8005680:	fba2 2303 	umull	r2, r3, r2, r3
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800568a:	441e      	add	r6, r3
 800568c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568e:	4618      	mov	r0, r3
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	1894      	adds	r4, r2, r2
 800569a:	603c      	str	r4, [r7, #0]
 800569c:	415b      	adcs	r3, r3
 800569e:	607b      	str	r3, [r7, #4]
 80056a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a4:	1812      	adds	r2, r2, r0
 80056a6:	eb41 0303 	adc.w	r3, r1, r3
 80056aa:	f04f 0400 	mov.w	r4, #0
 80056ae:	f04f 0500 	mov.w	r5, #0
 80056b2:	00dd      	lsls	r5, r3, #3
 80056b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056b8:	00d4      	lsls	r4, r2, #3
 80056ba:	4622      	mov	r2, r4
 80056bc:	462b      	mov	r3, r5
 80056be:	eb12 0a00 	adds.w	sl, r2, r0
 80056c2:	eb43 0b01 	adc.w	fp, r3, r1
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f04f 0100 	mov.w	r1, #0
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	008b      	lsls	r3, r1, #2
 80056da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056de:	0082      	lsls	r2, r0, #2
 80056e0:	4650      	mov	r0, sl
 80056e2:	4659      	mov	r1, fp
 80056e4:	f7fb fa2c 	bl	8000b40 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <UART_SetConfig+0x38c>)
 80056ee:	fba3 1302 	umull	r1, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2164      	movs	r1, #100	; 0x64
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	3332      	adds	r3, #50	; 0x32
 8005700:	4a09      	ldr	r2, [pc, #36]	; (8005728 <UART_SetConfig+0x38c>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4432      	add	r2, r6
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	377c      	adds	r7, #124	; 0x7c
 8005718:	46bd      	mov	sp, r7
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571e:	bf00      	nop
 8005720:	40011000 	.word	0x40011000
 8005724:	40011400 	.word	0x40011400
 8005728:	51eb851f 	.word	0x51eb851f

0800572c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 001c 	add.w	r0, r7, #28
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	d122      	bne.n	800578a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800576c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d105      	bne.n	800577e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 fb1c 	bl	8006dbc <USB_CoreReset>
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
 8005788:	e01a      	b.n	80057c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fb10 	bl	8006dbc <USB_CoreReset>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
 80057b2:	e005      	b.n	80057c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10b      	bne.n	80057de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f043 0206 	orr.w	r2, r3, #6
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f043 0220 	orr.w	r2, r3, #32
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ea:	b004      	add	sp, #16
 80057ec:	4770      	bx	lr
	...

080057f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d165      	bne.n	80058d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a41      	ldr	r2, [pc, #260]	; (800590c <USB_SetTurnaroundTime+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d906      	bls.n	800581a <USB_SetTurnaroundTime+0x2a>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a40      	ldr	r2, [pc, #256]	; (8005910 <USB_SetTurnaroundTime+0x120>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d202      	bcs.n	800581a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005814:	230f      	movs	r3, #15
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e062      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <USB_SetTurnaroundTime+0x120>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d306      	bcc.n	8005830 <USB_SetTurnaroundTime+0x40>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a3b      	ldr	r2, [pc, #236]	; (8005914 <USB_SetTurnaroundTime+0x124>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d202      	bcs.n	8005830 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800582a:	230e      	movs	r3, #14
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e057      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a38      	ldr	r2, [pc, #224]	; (8005914 <USB_SetTurnaroundTime+0x124>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d306      	bcc.n	8005846 <USB_SetTurnaroundTime+0x56>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a37      	ldr	r2, [pc, #220]	; (8005918 <USB_SetTurnaroundTime+0x128>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d202      	bcs.n	8005846 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005840:	230d      	movs	r3, #13
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e04c      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a33      	ldr	r2, [pc, #204]	; (8005918 <USB_SetTurnaroundTime+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d306      	bcc.n	800585c <USB_SetTurnaroundTime+0x6c>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4a32      	ldr	r2, [pc, #200]	; (800591c <USB_SetTurnaroundTime+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d802      	bhi.n	800585c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005856:	230c      	movs	r3, #12
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e041      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a2f      	ldr	r2, [pc, #188]	; (800591c <USB_SetTurnaroundTime+0x12c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d906      	bls.n	8005872 <USB_SetTurnaroundTime+0x82>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <USB_SetTurnaroundTime+0x130>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d802      	bhi.n	8005872 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800586c:	230b      	movs	r3, #11
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e036      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <USB_SetTurnaroundTime+0x130>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d906      	bls.n	8005888 <USB_SetTurnaroundTime+0x98>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <USB_SetTurnaroundTime+0x134>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d802      	bhi.n	8005888 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005882:	230a      	movs	r3, #10
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e02b      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <USB_SetTurnaroundTime+0x134>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d906      	bls.n	800589e <USB_SetTurnaroundTime+0xae>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a25      	ldr	r2, [pc, #148]	; (8005928 <USB_SetTurnaroundTime+0x138>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d202      	bcs.n	800589e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005898:	2309      	movs	r3, #9
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e020      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4a21      	ldr	r2, [pc, #132]	; (8005928 <USB_SetTurnaroundTime+0x138>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d306      	bcc.n	80058b4 <USB_SetTurnaroundTime+0xc4>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4a20      	ldr	r2, [pc, #128]	; (800592c <USB_SetTurnaroundTime+0x13c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d802      	bhi.n	80058b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058ae:	2308      	movs	r3, #8
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e015      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <USB_SetTurnaroundTime+0x13c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d906      	bls.n	80058ca <USB_SetTurnaroundTime+0xda>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <USB_SetTurnaroundTime+0x140>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d202      	bcs.n	80058ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058c4:	2307      	movs	r3, #7
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e00a      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058ca:	2306      	movs	r3, #6
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e007      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058d6:	2309      	movs	r3, #9
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e001      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058dc:	2309      	movs	r3, #9
 80058de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	029b      	lsls	r3, r3, #10
 80058f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	00d8acbf 	.word	0x00d8acbf
 8005910:	00e4e1c0 	.word	0x00e4e1c0
 8005914:	00f42400 	.word	0x00f42400
 8005918:	01067380 	.word	0x01067380
 800591c:	011a499f 	.word	0x011a499f
 8005920:	01312cff 	.word	0x01312cff
 8005924:	014ca43f 	.word	0x014ca43f
 8005928:	016e3600 	.word	0x016e3600
 800592c:	01a6ab1f 	.word	0x01a6ab1f
 8005930:	01e84800 	.word	0x01e84800

08005934 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d115      	bne.n	80059c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059a6:	2001      	movs	r0, #1
 80059a8:	f7fc fcca 	bl	8002340 <HAL_Delay>
      ms++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 f972 	bl	8006c9c <USB_GetMode>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d01e      	beq.n	80059fc <USB_SetCurrentMode+0x84>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b31      	cmp	r3, #49	; 0x31
 80059c2:	d9f0      	bls.n	80059a6 <USB_SetCurrentMode+0x2e>
 80059c4:	e01a      	b.n	80059fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d115      	bne.n	80059f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059d8:	2001      	movs	r0, #1
 80059da:	f7fc fcb1 	bl	8002340 <HAL_Delay>
      ms++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 f959 	bl	8006c9c <USB_GetMode>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <USB_SetCurrentMode+0x84>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b31      	cmp	r3, #49	; 0x31
 80059f4:	d9f0      	bls.n	80059d8 <USB_SetCurrentMode+0x60>
 80059f6:	e001      	b.n	80059fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e005      	b.n	8005a08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b32      	cmp	r3, #50	; 0x32
 8005a00:	d101      	bne.n	8005a06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a10:	b084      	sub	sp, #16
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	e009      	b.n	8005a44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3340      	adds	r3, #64	; 0x40
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3301      	adds	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b0e      	cmp	r3, #14
 8005a48:	d9f2      	bls.n	8005a30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d11c      	bne.n	8005a8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5e:	f043 0302 	orr.w	r3, r3, #2
 8005a62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38
 8005a88:	e00b      	b.n	8005aa2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	461a      	mov	r2, r3
 8005abe:	680b      	ldr	r3, [r1, #0]
 8005ac0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d10c      	bne.n	8005ae2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f945 	bl	8005d60 <USB_SetDevSpeed>
 8005ad6:	e008      	b.n	8005aea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ad8:	2101      	movs	r1, #1
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f940 	bl	8005d60 <USB_SetDevSpeed>
 8005ae0:	e003      	b.n	8005aea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ae2:	2103      	movs	r1, #3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f93b 	bl	8005d60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aea:	2110      	movs	r1, #16
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8f3 	bl	8005cd8 <USB_FlushTxFifo>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f90f 	bl	8005d20 <USB_FlushRxFifo>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	461a      	mov	r2, r3
 8005b14:	2300      	movs	r3, #0
 8005b16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2300      	movs	r3, #0
 8005b22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e043      	b.n	8005bbe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4c:	d118      	bne.n	8005b80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e013      	b.n	8005b92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	461a      	mov	r2, r3
 8005b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e008      	b.n	8005b92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d3b7      	bcc.n	8005b36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e043      	b.n	8005c54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be2:	d118      	bne.n	8005c16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e013      	b.n	8005c28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e008      	b.n	8005c28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	2300      	movs	r3, #0
 8005c26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	461a      	mov	r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	461a      	mov	r2, r3
 8005c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3301      	adds	r3, #1
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3b7      	bcc.n	8005bcc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f043 0210 	orr.w	r2, r3, #16
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <USB_DevInit+0x2c4>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f043 0208 	orr.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d107      	bne.n	8005cc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cbc:	f043 0304 	orr.w	r3, r3, #4
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd0:	b004      	add	sp, #16
 8005cd2:	4770      	bx	lr
 8005cd4:	803c3800 	.word	0x803c3800

08005cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	019b      	lsls	r3, r3, #6
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <USB_FlushTxFifo+0x44>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e006      	b.n	8005d10 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d0f1      	beq.n	8005cf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	00030d40 	.word	0x00030d40

08005d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2210      	movs	r2, #16
 8005d30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <USB_FlushRxFifo+0x3c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e006      	b.n	8005d50 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d0f1      	beq.n	8005d32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	00030d40 	.word	0x00030d40

08005d60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b087      	sub	sp, #28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0306 	and.w	r3, r3, #6
 8005daa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]
 8005db6:	e00a      	b.n	8005dce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d002      	beq.n	8005dc4 <USB_GetDevSpeed+0x32>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d102      	bne.n	8005dca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	75fb      	strb	r3, [r7, #23]
 8005dc8:	e001      	b.n	8005dce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dca:	230f      	movs	r3, #15
 8005dcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d13a      	bne.n	8005e6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	2101      	movs	r1, #1
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	68f9      	ldr	r1, [r7, #12]
 8005e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d155      	bne.n	8005edc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	78db      	ldrb	r3, [r3, #3]
 8005e4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	059b      	lsls	r3, r3, #22
 8005e52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e54:	4313      	orrs	r3, r2
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e036      	b.n	8005edc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	2101      	movs	r1, #1
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11a      	bne.n	8005edc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	78db      	ldrb	r3, [r3, #3]
 8005ec0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d161      	bne.n	8005fcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1e:	d11f      	bne.n	8005f60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	2101      	movs	r1, #1
 8005f72:	fa01 f303 	lsl.w	r3, r1, r3
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f80:	4013      	ands	r3, r2
 8005f82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	2101      	movs	r1, #1
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	0159      	lsls	r1, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	440b      	add	r3, r1
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <USB_DeactivateEndpoint+0x1b0>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]
 8005fca:	e060      	b.n	800608e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe2:	d11f      	bne.n	8006024 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006002:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f303 	lsl.w	r3, r1, r3
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	43db      	mvns	r3, r3
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006044:	4013      	ands	r3, r2
 8006046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	2101      	movs	r1, #1
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	041b      	lsls	r3, r3, #16
 8006060:	43db      	mvns	r3, r3
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006068:	4013      	ands	r3, r2
 800606a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	0159      	lsls	r1, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	440b      	add	r3, r1
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	4619      	mov	r1, r3
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <USB_DeactivateEndpoint+0x1b4>)
 800608a:	4013      	ands	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	ec337800 	.word	0xec337800
 80060a0:	eff37800 	.word	0xeff37800

080060a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 815c 	bne.w	800637e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d132      	bne.n	8006134 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612c:	0cdb      	lsrs	r3, r3, #19
 800612e:	04db      	lsls	r3, r3, #19
 8006130:	6113      	str	r3, [r2, #16]
 8006132:	e074      	b.n	800621e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	0cdb      	lsrs	r3, r3, #19
 8006150:	04db      	lsls	r3, r3, #19
 8006152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6959      	ldr	r1, [r3, #20]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	440b      	add	r3, r1
 8006190:	1e59      	subs	r1, r3, #1
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	fbb1 f3f3 	udiv	r3, r1, r3
 800619a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800619c:	4b9d      	ldr	r3, [pc, #628]	; (8006414 <USB_EPStartXfer+0x370>)
 800619e:	400b      	ands	r3, r1
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	0148      	lsls	r0, r1, #5
 80061a4:	69f9      	ldr	r1, [r7, #28]
 80061a6:	4401      	add	r1, r0
 80061a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c6:	69b9      	ldr	r1, [r7, #24]
 80061c8:	0148      	lsls	r0, r1, #5
 80061ca:	69f9      	ldr	r1, [r7, #28]
 80061cc:	4401      	add	r1, r0
 80061ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061d2:	4313      	orrs	r3, r2
 80061d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	78db      	ldrb	r3, [r3, #3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d11f      	bne.n	800621e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d14b      	bne.n	80062bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	461a      	mov	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d128      	bne.n	800629a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d110      	bne.n	800627a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	e00f      	b.n	800629a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006298:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e12f      	b.n	800651c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d015      	beq.n	8006310 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8117 	beq.w	800651c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	2101      	movs	r1, #1
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630a:	4313      	orrs	r3, r2
 800630c:	634b      	str	r3, [r1, #52]	; 0x34
 800630e:	e105      	b.n	800651c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d110      	bne.n	8006342 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	e00f      	b.n	8006362 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006360:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	b298      	uxth	r0, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4603      	mov	r3, r0
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fa2b 	bl	80067d2 <USB_WritePacket>
 800637c:	e0ce      	b.n	800651c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	0cdb      	lsrs	r3, r3, #19
 800639a:	04db      	lsls	r3, r3, #19
 800639c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d126      	bne.n	8006418 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	0148      	lsls	r0, r1, #5
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	4401      	add	r1, r0
 80063e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063ec:	4313      	orrs	r3, r2
 80063ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640e:	6113      	str	r3, [r2, #16]
 8006410:	e036      	b.n	8006480 <USB_EPStartXfer+0x3dc>
 8006412:	bf00      	nop
 8006414:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4413      	add	r3, r2
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	8afb      	ldrh	r3, [r7, #22]
 800643e:	04d9      	lsls	r1, r3, #19
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <USB_EPStartXfer+0x484>)
 8006442:	400b      	ands	r3, r1
 8006444:	69b9      	ldr	r1, [r7, #24]
 8006446:	0148      	lsls	r0, r1, #5
 8006448:	69f9      	ldr	r1, [r7, #28]
 800644a:	4401      	add	r1, r0
 800644c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006450:	4313      	orrs	r3, r2
 8006452:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	8af9      	ldrh	r1, [r7, #22]
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006470:	69b9      	ldr	r1, [r7, #24]
 8006472:	0148      	lsls	r0, r1, #5
 8006474:	69f9      	ldr	r1, [r7, #28]
 8006476:	4401      	add	r1, r0
 8006478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800647c:	4313      	orrs	r3, r2
 800647e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d10d      	bne.n	80064a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	460a      	mov	r2, r1
 80064a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	78db      	ldrb	r3, [r3, #3]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d128      	bne.n	80064fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d110      	bne.n	80064dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00f      	b.n	80064fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800651a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	1ff80000 	.word	0x1ff80000

0800652c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	f040 80cd 	bne.w	80066e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d132      	bne.n	80065bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b4:	0cdb      	lsrs	r3, r3, #19
 80065b6:	04db      	lsls	r3, r3, #19
 80065b8:	6113      	str	r3, [r2, #16]
 80065ba:	e04e      	b.n	800665a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	0cdb      	lsrs	r3, r3, #19
 80065d8:	04db      	lsls	r3, r3, #19
 80065da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664a:	6939      	ldr	r1, [r7, #16]
 800664c:	0148      	lsls	r0, r1, #5
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	4401      	add	r1, r0
 8006652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006656:	4313      	orrs	r3, r2
 8006658:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d11e      	bne.n	800669e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e092      	b.n	80067c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d07e      	beq.n	80067c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	2101      	movs	r1, #1
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e2:	4313      	orrs	r3, r2
 80066e4:	634b      	str	r3, [r1, #52]	; 0x34
 80066e6:	e06d      	b.n	80067c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006702:	0cdb      	lsrs	r3, r3, #19
 8006704:	04db      	lsls	r3, r3, #19
 8006706:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800672a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	440a      	add	r2, r1
 8006752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006756:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800675a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006772:	6939      	ldr	r1, [r7, #16]
 8006774:	0148      	lsls	r0, r1, #5
 8006776:	6979      	ldr	r1, [r7, #20]
 8006778:	4401      	add	r1, r0
 800677a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800677e:	4313      	orrs	r3, r2
 8006780:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10d      	bne.n	80067a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	68d9      	ldr	r1, [r3, #12]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	460a      	mov	r2, r1
 80067a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b089      	sub	sp, #36	; 0x24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	4611      	mov	r1, r2
 80067de:	461a      	mov	r2, r3
 80067e0:	460b      	mov	r3, r1
 80067e2:	71fb      	strb	r3, [r7, #7]
 80067e4:	4613      	mov	r3, r2
 80067e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d123      	bne.n	8006840 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067f8:	88bb      	ldrh	r3, [r7, #4]
 80067fa:	3303      	adds	r3, #3
 80067fc:	089b      	lsrs	r3, r3, #2
 80067fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	e018      	b.n	8006838 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	031a      	lsls	r2, r3, #12
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006812:	461a      	mov	r2, r3
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6013      	str	r3, [r2, #0]
      pSrc++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3301      	adds	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3301      	adds	r3, #1
 800682a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	3301      	adds	r3, #1
 8006830:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	3301      	adds	r3, #1
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	429a      	cmp	r2, r3
 800683e:	d3e2      	bcc.n	8006806 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3724      	adds	r7, #36	; 0x24
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800684e:	b480      	push	{r7}
 8006850:	b08b      	sub	sp, #44	; 0x2c
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	4613      	mov	r3, r2
 800685a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	b29b      	uxth	r3, r3
 800686a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800686c:	88fb      	ldrh	r3, [r7, #6]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006874:	2300      	movs	r3, #0
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	e014      	b.n	80068a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	601a      	str	r2, [r3, #0]
    pDest++;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	3301      	adds	r3, #1
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	3301      	adds	r3, #1
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	3301      	adds	r3, #1
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	3301      	adds	r3, #1
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	3301      	adds	r3, #1
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d3e6      	bcc.n	800687a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068ac:	8bfb      	ldrh	r3, [r7, #30]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01e      	beq.n	80068f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068bc:	461a      	mov	r2, r3
 80068be:	f107 0310 	add.w	r3, r7, #16
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	701a      	strb	r2, [r3, #0]
      i++;
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	3301      	adds	r3, #1
 80068dc:	623b      	str	r3, [r7, #32]
      pDest++;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	3301      	adds	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068e4:	8bfb      	ldrh	r3, [r7, #30]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068ea:	8bfb      	ldrh	r3, [r7, #30]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1ea      	bne.n	80068c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	372c      	adds	r7, #44	; 0x2c
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d12c      	bne.n	8006974 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	db12      	blt.n	8006952 <USB_EPSetStall+0x54>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00f      	beq.n	8006952 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006950:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e02b      	b.n	80069cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	db12      	blt.n	80069ac <USB_EPSetStall+0xae>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00f      	beq.n	80069ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d128      	bne.n	8006a48 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d003      	beq.n	8006a26 <USB_EPClearStall+0x4c>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	78db      	ldrb	r3, [r3, #3]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d138      	bne.n	8006a98 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e027      	b.n	8006a98 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	78db      	ldrb	r3, [r3, #3]
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d003      	beq.n	8006a78 <USB_EPClearStall+0x9e>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d10f      	bne.n	8006a98 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a96:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ac8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b0c:	f023 0303 	bic.w	r3, r3, #3
 8006b10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b20:	f023 0302 	bic.w	r3, r3, #2
 8006b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b62:	f043 0302 	orr.w	r3, r3, #2
 8006b66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	0c1b      	lsrs	r3, r3, #16
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	b29b      	uxth	r3, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c32:	68bb      	ldr	r3, [r7, #8]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	01db      	lsls	r3, r3, #7
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cd6:	f023 0307 	bic.w	r3, r3, #7
 8006cda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	333c      	adds	r3, #60	; 0x3c
 8006d16:	3304      	adds	r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4a26      	ldr	r2, [pc, #152]	; (8006db8 <USB_EP0_OutStart+0xb8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d90a      	bls.n	8006d3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d34:	d101      	bne.n	8006d3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e037      	b.n	8006daa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	461a      	mov	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d68:	f043 0318 	orr.w	r3, r3, #24
 8006d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d82:	7afb      	ldrb	r3, [r7, #11]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d10f      	bne.n	8006da8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006da6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	4f54300a 	.word	0x4f54300a

08006dbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <USB_CoreReset+0x60>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d901      	bls.n	8006dd8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e01a      	b.n	8006e0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	daf3      	bge.n	8006dc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f043 0201 	orr.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <USB_CoreReset+0x60>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e006      	b.n	8006e0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d0f1      	beq.n	8006df0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	00030d40 	.word	0x00030d40

08006e20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e30:	f002 f95c 	bl	80090ec <USBD_static_malloc>
 8006e34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006e44:	2302      	movs	r3, #2
 8006e46:	e066      	b.n	8006f16 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7c1b      	ldrb	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d119      	bne.n	8006e8c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	2181      	movs	r1, #129	; 0x81
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 f820 	bl	8008ea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e70:	2202      	movs	r2, #2
 8006e72:	2101      	movs	r1, #1
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f002 f816 	bl	8008ea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2210      	movs	r2, #16
 8006e86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006e8a:	e016      	b.n	8006eba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	2202      	movs	r2, #2
 8006e90:	2181      	movs	r1, #129	; 0x81
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f002 f807 	bl	8008ea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e9e:	2340      	movs	r3, #64	; 0x40
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fffe 	bl	8008ea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2210      	movs	r2, #16
 8006eb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eba:	2308      	movs	r3, #8
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	2182      	movs	r1, #130	; 0x82
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fff0 	bl	8008ea6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7c1b      	ldrb	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efa:	2101      	movs	r1, #1
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 f8c1 	bl	8009084 <USBD_LL_PrepareReceive>
 8006f02:	e007      	b.n	8006f14 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f002 f8b8 	bl	8009084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f2a:	2181      	movs	r1, #129	; 0x81
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 ffe0 	bl	8008ef2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f38:	2101      	movs	r1, #1
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 ffd9 	bl	8008ef2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f48:	2182      	movs	r1, #130	; 0x82
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 ffd1 	bl	8008ef2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00e      	beq.n	8006f88 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 f8c4 	bl	8009108 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e0af      	b.n	800711c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d03f      	beq.n	8007048 <USBD_CDC_Setup+0xb4>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	f040 809f 	bne.w	800710c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02e      	beq.n	8007034 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	da16      	bge.n	800700e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006fec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	88d2      	ldrh	r2, [r2, #6]
 8006ff2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	88db      	ldrh	r3, [r3, #6]
 8006ff8:	2b07      	cmp	r3, #7
 8006ffa:	bf28      	it	cs
 8006ffc:	2307      	movcs	r3, #7
 8006ffe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	89fa      	ldrh	r2, [r7, #14]
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fb19 	bl	800863e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800700c:	e085      	b.n	800711a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	785a      	ldrb	r2, [r3, #1]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	88db      	ldrh	r3, [r3, #6]
 800701c:	b2da      	uxtb	r2, r3
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007024:	6939      	ldr	r1, [r7, #16]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	461a      	mov	r2, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fb32 	bl	8008696 <USBD_CtlPrepareRx>
      break;
 8007032:	e072      	b.n	800711a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	7850      	ldrb	r0, [r2, #1]
 8007040:	2200      	movs	r2, #0
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4798      	blx	r3
      break;
 8007046:	e068      	b.n	800711a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b0b      	cmp	r3, #11
 800704e:	d852      	bhi.n	80070f6 <USBD_CDC_Setup+0x162>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <USBD_CDC_Setup+0xc4>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007089 	.word	0x08007089
 800705c:	08007105 	.word	0x08007105
 8007060:	080070f7 	.word	0x080070f7
 8007064:	080070f7 	.word	0x080070f7
 8007068:	080070f7 	.word	0x080070f7
 800706c:	080070f7 	.word	0x080070f7
 8007070:	080070f7 	.word	0x080070f7
 8007074:	080070f7 	.word	0x080070f7
 8007078:	080070f7 	.word	0x080070f7
 800707c:	080070f7 	.word	0x080070f7
 8007080:	080070b3 	.word	0x080070b3
 8007084:	080070dd 	.word	0x080070dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b03      	cmp	r3, #3
 8007092:	d107      	bne.n	80070a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007094:	f107 030a 	add.w	r3, r7, #10
 8007098:	2202      	movs	r2, #2
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 face 	bl	800863e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070a2:	e032      	b.n	800710a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fa58 	bl	800855c <USBD_CtlError>
            ret = USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	75fb      	strb	r3, [r7, #23]
          break;
 80070b0:	e02b      	b.n	800710a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d107      	bne.n	80070ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070be:	f107 030d 	add.w	r3, r7, #13
 80070c2:	2201      	movs	r2, #1
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 fab9 	bl	800863e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070cc:	e01d      	b.n	800710a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fa43 	bl	800855c <USBD_CtlError>
            ret = USBD_FAIL;
 80070d6:	2303      	movs	r3, #3
 80070d8:	75fb      	strb	r3, [r7, #23]
          break;
 80070da:	e016      	b.n	800710a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d00f      	beq.n	8007108 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fa36 	bl	800855c <USBD_CtlError>
            ret = USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070f4:	e008      	b.n	8007108 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fa2f 	bl	800855c <USBD_CtlError>
          ret = USBD_FAIL;
 80070fe:	2303      	movs	r3, #3
 8007100:	75fb      	strb	r3, [r7, #23]
          break;
 8007102:	e002      	b.n	800710a <USBD_CDC_Setup+0x176>
          break;
 8007104:	bf00      	nop
 8007106:	e008      	b.n	800711a <USBD_CDC_Setup+0x186>
          break;
 8007108:	bf00      	nop
      }
      break;
 800710a:	e006      	b.n	800711a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 fa24 	bl	800855c <USBD_CtlError>
      ret = USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	75fb      	strb	r3, [r7, #23]
      break;
 8007118:	bf00      	nop
  }

  return (uint8_t)ret;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007136:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	e04f      	b.n	80071e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800714c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3318      	adds	r3, #24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d029      	beq.n	80071b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3318      	adds	r3, #24
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	78f9      	ldrb	r1, [r7, #3]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	460b      	mov	r3, r1
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	1a5b      	subs	r3, r3, r1
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4403      	add	r3, r0
 8007184:	3344      	adds	r3, #68	; 0x44
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	fbb2 f1f3 	udiv	r1, r2, r3
 800718c:	fb03 f301 	mul.w	r3, r3, r1
 8007190:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007192:	2b00      	cmp	r3, #0
 8007194:	d110      	bne.n	80071b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	3318      	adds	r3, #24
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071aa:	78f9      	ldrb	r1, [r7, #3]
 80071ac:	2300      	movs	r3, #0
 80071ae:	2200      	movs	r2, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 ff46 	bl	8009042 <USBD_LL_Transmit>
 80071b6:	e015      	b.n	80071e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007200:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e015      	b.n	800723c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 ff56 	bl	80090c6 <USBD_LL_GetRxDataSize>
 800721a:	4602      	mov	r2, r0
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007236:	4611      	mov	r1, r2
 8007238:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007252:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	e01b      	b.n	8007296 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <USBD_CDC_EP0_RxReady+0x50>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800726e:	2bff      	cmp	r3, #255	; 0xff
 8007270:	d010      	beq.n	8007294 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007280:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007288:	b292      	uxth	r2, r2
 800728a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2243      	movs	r2, #67	; 0x43
 80072ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80072ae:	4b03      	ldr	r3, [pc, #12]	; (80072bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	20000094 	.word	0x20000094

080072c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2243      	movs	r2, #67	; 0x43
 80072cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80072ce:	4b03      	ldr	r3, [pc, #12]	; (80072dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20000050 	.word	0x20000050

080072e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2243      	movs	r2, #67	; 0x43
 80072ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80072ee:	4b03      	ldr	r3, [pc, #12]	; (80072fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	200000d8 	.word	0x200000d8

08007300 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	220a      	movs	r2, #10
 800730c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800730e:	4b03      	ldr	r3, [pc, #12]	; (800731c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	2000000c 	.word	0x2000000c

08007320 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	e004      	b.n	800733e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800735c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007364:	2303      	movs	r3, #3
 8007366:	e008      	b.n	800737a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007396:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800739e:	2303      	movs	r3, #3
 80073a0:	e004      	b.n	80073ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e01a      	b.n	8007410 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d114      	bne.n	800740e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007402:	2181      	movs	r1, #129	; 0x81
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fe1c 	bl	8009042 <USBD_LL_Transmit>

    ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007426:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007432:	2303      	movs	r3, #3
 8007434:	e016      	b.n	8007464 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1b      	ldrb	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007448:	2101      	movs	r1, #1
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 fe1a 	bl	8009084 <USBD_LL_PrepareReceive>
 8007450:	e007      	b.n	8007462 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fe11 	bl	8009084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	e01f      	b.n	80074c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	79fa      	ldrb	r2, [r7, #7]
 80074b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 fc8d 	bl	8008dd8 <USBD_LL_Init>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e016      	b.n	8007512 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	f107 020e 	add.w	r2, r7, #14
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 fca4 	bl	8008e70 <USBD_LL_Start>
 8007528:	4603      	mov	r3, r0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007554:	2303      	movs	r3, #3
 8007556:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	4611      	mov	r1, r2
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
 8007572:	4603      	mov	r3, r0
 8007574:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	4611      	mov	r1, r2
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
  }

  return USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 ff90 	bl	80084e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d01a      	beq.n	8007622 <USBD_LL_SetupStage+0x72>
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d822      	bhi.n	8007636 <USBD_LL_SetupStage+0x86>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <USBD_LL_SetupStage+0x4a>
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d00a      	beq.n	800760e <USBD_LL_SetupStage+0x5e>
 80075f8:	e01d      	b.n	8007636 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa62 	bl	8007acc <USBD_StdDevReq>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]
      break;
 800760c:	e020      	b.n	8007650 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fac6 	bl	8007ba8 <USBD_StdItfReq>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
      break;
 8007620:	e016      	b.n	8007650 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fb05 	bl	8007c3a <USBD_StdEPReq>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
      break;
 8007634:	e00c      	b.n	8007650 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800763c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007640:	b2db      	uxtb	r3, r3
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fc73 	bl	8008f30 <USBD_LL_StallEP>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	bf00      	nop
  }

  return ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	460b      	mov	r3, r1
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d138      	bne.n	80076e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007674:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800767c:	2b03      	cmp	r3, #3
 800767e:	d14a      	bne.n	8007716 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	429a      	cmp	r2, r3
 800768a:	d913      	bls.n	80076b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	1ad2      	subs	r2, r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4293      	cmp	r3, r2
 80076a4:	bf28      	it	cs
 80076a6:	4613      	movcs	r3, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f001 f80f 	bl	80086d0 <USBD_CtlContinueRx>
 80076b2:	e030      	b.n	8007716 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d10b      	bne.n	80076d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 f80a 	bl	80086f2 <USBD_CtlSendStatus>
 80076de:	e01a      	b.n	8007716 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d114      	bne.n	8007716 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00e      	beq.n	8007716 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	7afa      	ldrb	r2, [r7, #11]
 8007702:	4611      	mov	r1, r2
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	4798      	blx	r3
 8007708:	4603      	mov	r3, r0
 800770a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	e000      	b.n	8007718 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	460b      	mov	r3, r1
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d16b      	bne.n	800780c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3314      	adds	r3, #20
 8007738:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007740:	2b02      	cmp	r3, #2
 8007742:	d156      	bne.n	80077f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	429a      	cmp	r2, r3
 800774e:	d914      	bls.n	800777a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	1ad2      	subs	r2, r2, r3
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	461a      	mov	r2, r3
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 ff84 	bl	8008674 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800776c:	2300      	movs	r3, #0
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f001 fc86 	bl	8009084 <USBD_LL_PrepareReceive>
 8007778:	e03b      	b.n	80077f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	429a      	cmp	r2, r3
 8007784:	d11c      	bne.n	80077c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800778e:	429a      	cmp	r2, r3
 8007790:	d316      	bcc.n	80077c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800779c:	429a      	cmp	r2, r3
 800779e:	d20f      	bcs.n	80077c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077a0:	2200      	movs	r2, #0
 80077a2:	2100      	movs	r1, #0
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 ff65 	bl	8008674 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077b2:	2300      	movs	r3, #0
 80077b4:	2200      	movs	r2, #0
 80077b6:	2100      	movs	r1, #0
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f001 fc63 	bl	8009084 <USBD_LL_PrepareReceive>
 80077be:	e018      	b.n	80077f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d10b      	bne.n	80077e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f001 fba2 	bl	8008f30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 ff93 	bl	8008718 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d122      	bne.n	8007842 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff fe98 	bl	8007532 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800780a:	e01a      	b.n	8007842 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b03      	cmp	r3, #3
 8007816:	d114      	bne.n	8007842 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00e      	beq.n	8007842 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	7afa      	ldrb	r2, [r7, #11]
 800782e:	4611      	mov	r1, r2
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	e000      	b.n	8007844 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800787c:	2303      	movs	r3, #3
 800787e:	e02f      	b.n	80078e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6852      	ldr	r2, [r2, #4]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	4611      	mov	r1, r2
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078aa:	2340      	movs	r3, #64	; 0x40
 80078ac:	2200      	movs	r2, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 faf8 	bl	8008ea6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2240      	movs	r2, #64	; 0x40
 80078c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078c6:	2340      	movs	r3, #64	; 0x40
 80078c8:	2200      	movs	r2, #0
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 faea 	bl	8008ea6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2240      	movs	r2, #64	; 0x40
 80078dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007916:	b2da      	uxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2204      	movs	r2, #4
 8007922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b04      	cmp	r3, #4
 8007946:	d106      	bne.n	8007956 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800794e:	b2da      	uxtb	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	e012      	b.n	80079a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d10b      	bne.n	800799e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80079be:	2303      	movs	r3, #3
 80079c0:	e014      	b.n	80079ec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d10d      	bne.n	80079ea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	4611      	mov	r1, r2
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e014      	b.n	8007a38 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d10d      	bne.n	8007a36 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6852      	ldr	r2, [r2, #4]
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	4611      	mov	r1, r2
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	4798      	blx	r3
  }

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b087      	sub	sp, #28
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aac:	8a3b      	ldrh	r3, [r7, #16]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b21a      	sxth	r2, r3
 8007ab2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b21b      	sxth	r3, r3
 8007aba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007abc:	89fb      	ldrh	r3, [r7, #14]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d005      	beq.n	8007af2 <USBD_StdDevReq+0x26>
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d853      	bhi.n	8007b92 <USBD_StdDevReq+0xc6>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <USBD_StdDevReq+0x3a>
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d14f      	bne.n	8007b92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
      break;
 8007b04:	e04a      	b.n	8007b9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b09      	cmp	r3, #9
 8007b0c:	d83b      	bhi.n	8007b86 <USBD_StdDevReq+0xba>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <USBD_StdDevReq+0x48>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007b7d 	.word	0x08007b7d
 8007b1c:	08007b87 	.word	0x08007b87
 8007b20:	08007b73 	.word	0x08007b73
 8007b24:	08007b87 	.word	0x08007b87
 8007b28:	08007b47 	.word	0x08007b47
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b87 	.word	0x08007b87
 8007b34:	08007b5f 	.word	0x08007b5f
 8007b38:	08007b51 	.word	0x08007b51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f9de 	bl	8007f00 <USBD_GetDescriptor>
          break;
 8007b44:	e024      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fb43 	bl	80081d4 <USBD_SetAddress>
          break;
 8007b4e:	e01f      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fb82 	bl	800825c <USBD_SetConfig>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b5c:	e018      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc21 	bl	80083a8 <USBD_GetConfig>
          break;
 8007b66:	e013      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fc52 	bl	8008414 <USBD_GetStatus>
          break;
 8007b70:	e00e      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc81 	bl	800847c <USBD_SetFeature>
          break;
 8007b7a:	e009      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fc90 	bl	80084a4 <USBD_ClrFeature>
          break;
 8007b84:	e004      	b.n	8007b90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fce7 	bl	800855c <USBD_CtlError>
          break;
 8007b8e:	bf00      	nop
      }
      break;
 8007b90:	e004      	b.n	8007b9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fce1 	bl	800855c <USBD_CtlError>
      break;
 8007b9a:	bf00      	nop
  }

  return ret;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop

08007ba8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d005      	beq.n	8007bce <USBD_StdItfReq+0x26>
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d82f      	bhi.n	8007c26 <USBD_StdItfReq+0x7e>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <USBD_StdItfReq+0x26>
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d12b      	bne.n	8007c26 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d81d      	bhi.n	8007c18 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	889b      	ldrh	r3, [r3, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d813      	bhi.n	8007c0e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	88db      	ldrh	r3, [r3, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d110      	bne.n	8007c22 <USBD_StdItfReq+0x7a>
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fd73 	bl	80086f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c0c:	e009      	b.n	8007c22 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fca3 	bl	800855c <USBD_CtlError>
          break;
 8007c16:	e004      	b.n	8007c22 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fc9e 	bl	800855c <USBD_CtlError>
          break;
 8007c20:	e000      	b.n	8007c24 <USBD_StdItfReq+0x7c>
          break;
 8007c22:	bf00      	nop
      }
      break;
 8007c24:	e004      	b.n	8007c30 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc97 	bl	800855c <USBD_CtlError>
      break;
 8007c2e:	bf00      	nop
  }

  return ret;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	889b      	ldrh	r3, [r3, #4]
 8007c4c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d007      	beq.n	8007c6a <USBD_StdEPReq+0x30>
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	f200 8145 	bhi.w	8007eea <USBD_StdEPReq+0x2b0>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00c      	beq.n	8007c7e <USBD_StdEPReq+0x44>
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	f040 8140 	bne.w	8007eea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7c:	e13a      	b.n	8007ef4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d007      	beq.n	8007c96 <USBD_StdEPReq+0x5c>
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f300 8129 	bgt.w	8007ede <USBD_StdEPReq+0x2a4>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d07f      	beq.n	8007d90 <USBD_StdEPReq+0x156>
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d03c      	beq.n	8007d0e <USBD_StdEPReq+0xd4>
 8007c94:	e123      	b.n	8007ede <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_StdEPReq+0x6e>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d016      	beq.n	8007cd4 <USBD_StdEPReq+0x9a>
 8007ca6:	e02c      	b.n	8007d02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <USBD_StdEPReq+0x90>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d00a      	beq.n	8007cca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f939 	bl	8008f30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f935 	bl	8008f30 <USBD_LL_StallEP>
 8007cc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc8:	e020      	b.n	8007d0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc45 	bl	800855c <USBD_CtlError>
              break;
 8007cd2:	e01b      	b.n	8007d0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	885b      	ldrh	r3, [r3, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10e      	bne.n	8007cfa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <USBD_StdEPReq+0xc0>
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d008      	beq.n	8007cfa <USBD_StdEPReq+0xc0>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	88db      	ldrh	r3, [r3, #6]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f91b 	bl	8008f30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fcf9 	bl	80086f2 <USBD_CtlSendStatus>

              break;
 8007d00:	e004      	b.n	8007d0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc29 	bl	800855c <USBD_CtlError>
              break;
 8007d0a:	bf00      	nop
          }
          break;
 8007d0c:	e0ec      	b.n	8007ee8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d002      	beq.n	8007d20 <USBD_StdEPReq+0xe6>
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d016      	beq.n	8007d4c <USBD_StdEPReq+0x112>
 8007d1e:	e030      	b.n	8007d82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00d      	beq.n	8007d42 <USBD_StdEPReq+0x108>
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	2b80      	cmp	r3, #128	; 0x80
 8007d2a:	d00a      	beq.n	8007d42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 f8fd 	bl	8008f30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d36:	2180      	movs	r1, #128	; 0x80
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f8f9 	bl	8008f30 <USBD_LL_StallEP>
 8007d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d40:	e025      	b.n	8007d8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fc09 	bl	800855c <USBD_CtlError>
              break;
 8007d4a:	e020      	b.n	8007d8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	885b      	ldrh	r3, [r3, #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11b      	bne.n	8007d8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 f903 	bl	8008f6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fcc2 	bl	80086f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007d80:	e004      	b.n	8007d8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fbe9 	bl	800855c <USBD_CtlError>
              break;
 8007d8a:	e000      	b.n	8007d8e <USBD_StdEPReq+0x154>
              break;
 8007d8c:	bf00      	nop
          }
          break;
 8007d8e:	e0ab      	b.n	8007ee8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d002      	beq.n	8007da2 <USBD_StdEPReq+0x168>
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d032      	beq.n	8007e06 <USBD_StdEPReq+0x1cc>
 8007da0:	e097      	b.n	8007ed2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <USBD_StdEPReq+0x17e>
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b80      	cmp	r3, #128	; 0x80
 8007dac:	d004      	beq.n	8007db8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fbd3 	bl	800855c <USBD_CtlError>
                break;
 8007db6:	e091      	b.n	8007edc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da0b      	bge.n	8007dd8 <USBD_StdEPReq+0x19e>
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	3310      	adds	r3, #16
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	e00b      	b.n	8007df0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	3304      	adds	r3, #4
 8007df0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fc1d 	bl	800863e <USBD_CtlSendData>
              break;
 8007e04:	e06a      	b.n	8007edc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	da11      	bge.n	8007e32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	3324      	adds	r3, #36	; 0x24
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d117      	bne.n	8007e58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb96 	bl	800855c <USBD_CtlError>
                  break;
 8007e30:	e054      	b.n	8007edc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb83 	bl	800855c <USBD_CtlError>
                  break;
 8007e56:	e041      	b.n	8007edc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	da0b      	bge.n	8007e78 <USBD_StdEPReq+0x23e>
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	3310      	adds	r3, #16
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	3304      	adds	r3, #4
 8007e76:	e00b      	b.n	8007e90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3304      	adds	r3, #4
 8007e90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <USBD_StdEPReq+0x264>
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b80      	cmp	r3, #128	; 0x80
 8007e9c:	d103      	bne.n	8007ea6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e00e      	b.n	8007ec4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 f87e 	bl	8008fac <USBD_LL_IsStallEP>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e002      	b.n	8007ec4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fbb7 	bl	800863e <USBD_CtlSendData>
              break;
 8007ed0:	e004      	b.n	8007edc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fb41 	bl	800855c <USBD_CtlError>
              break;
 8007eda:	bf00      	nop
          }
          break;
 8007edc:	e004      	b.n	8007ee8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb3b 	bl	800855c <USBD_CtlError>
          break;
 8007ee6:	bf00      	nop
      }
      break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb35 	bl	800855c <USBD_CtlError>
      break;
 8007ef2:	bf00      	nop
  }

  return ret;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	2b06      	cmp	r3, #6
 8007f22:	f200 8128 	bhi.w	8008176 <USBD_GetDescriptor+0x276>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <USBD_GetDescriptor+0x2c>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f49 	.word	0x08007f49
 8007f30:	08007f61 	.word	0x08007f61
 8007f34:	08007fa1 	.word	0x08007fa1
 8007f38:	08008177 	.word	0x08008177
 8007f3c:	08008177 	.word	0x08008177
 8007f40:	08008117 	.word	0x08008117
 8007f44:	08008143 	.word	0x08008143
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	7c12      	ldrb	r2, [r2, #16]
 8007f54:	f107 0108 	add.w	r1, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
      break;
 8007f5e:	e112      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10d      	bne.n	8007f84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	f107 0208 	add.w	r2, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	2202      	movs	r2, #2
 8007f80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f82:	e100      	b.n	8008186 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	f107 0208 	add.w	r2, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	701a      	strb	r2, [r3, #0]
      break;
 8007f9e:	e0f2      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	f200 80ac 	bhi.w	8008104 <USBD_GetDescriptor+0x204>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <USBD_GetDescriptor+0xb4>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fcd 	.word	0x08007fcd
 8007fb8:	08008001 	.word	0x08008001
 8007fbc:	08008035 	.word	0x08008035
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	0800809d 	.word	0x0800809d
 8007fc8:	080080d1 	.word	0x080080d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	7c12      	ldrb	r2, [r2, #16]
 8007fe4:	f107 0108 	add.w	r1, r7, #8
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fee:	e091      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fab2 	bl	800855c <USBD_CtlError>
            err++;
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffe:	e089      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008022:	e077      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa98 	bl	800855c <USBD_CtlError>
            err++;
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	3301      	adds	r3, #1
 8008030:	72fb      	strb	r3, [r7, #11]
          break;
 8008032:	e06f      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7c12      	ldrb	r2, [r2, #16]
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008056:	e05d      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa7e 	bl	800855c <USBD_CtlError>
            err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
          break;
 8008066:	e055      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	7c12      	ldrb	r2, [r2, #16]
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
 8008088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808a:	e043      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa64 	bl	800855c <USBD_CtlError>
            err++;
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	3301      	adds	r3, #1
 8008098:	72fb      	strb	r3, [r7, #11]
          break;
 800809a:	e03b      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080be:	e029      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa4a 	bl	800855c <USBD_CtlError>
            err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
          break;
 80080ce:	e021      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	7c12      	ldrb	r2, [r2, #16]
 80080e8:	f107 0108 	add.w	r1, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f2:	e00f      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa30 	bl	800855c <USBD_CtlError>
            err++;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	3301      	adds	r3, #1
 8008100:	72fb      	strb	r3, [r7, #11]
          break;
 8008102:	e007      	b.n	8008114 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa28 	bl	800855c <USBD_CtlError>
          err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008112:	bf00      	nop
      }
      break;
 8008114:	e037      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7c1b      	ldrb	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008126:	f107 0208 	add.w	r2, r7, #8
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
 800812e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008130:	e029      	b.n	8008186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa11 	bl	800855c <USBD_CtlError>
        err++;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	3301      	adds	r3, #1
 800813e:	72fb      	strb	r3, [r7, #11]
      break;
 8008140:	e021      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	7c1b      	ldrb	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10d      	bne.n	8008166 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008152:	f107 0208 	add.w	r2, r7, #8
 8008156:	4610      	mov	r0, r2
 8008158:	4798      	blx	r3
 800815a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	2207      	movs	r2, #7
 8008162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008164:	e00f      	b.n	8008186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f9f7 	bl	800855c <USBD_CtlError>
        err++;
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	3301      	adds	r3, #1
 8008172:	72fb      	strb	r3, [r7, #11]
      break;
 8008174:	e007      	b.n	8008186 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f9ef 	bl	800855c <USBD_CtlError>
      err++;
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	3301      	adds	r3, #1
 8008182:	72fb      	strb	r3, [r7, #11]
      break;
 8008184:	bf00      	nop
  }

  if (err != 0U)
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11e      	bne.n	80081ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	88db      	ldrh	r3, [r3, #6]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d016      	beq.n	80081c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008194:	893b      	ldrh	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00e      	beq.n	80081b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88da      	ldrh	r2, [r3, #6]
 800819e:	893b      	ldrh	r3, [r7, #8]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	bf28      	it	cs
 80081a4:	4613      	movcs	r3, r2
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081aa:	893b      	ldrh	r3, [r7, #8]
 80081ac:	461a      	mov	r2, r3
 80081ae:	68f9      	ldr	r1, [r7, #12]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fa44 	bl	800863e <USBD_CtlSendData>
 80081b6:	e009      	b.n	80081cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9ce 	bl	800855c <USBD_CtlError>
 80081c0:	e004      	b.n	80081cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa95 	bl	80086f2 <USBD_CtlSendStatus>
 80081c8:	e000      	b.n	80081cc <USBD_GetDescriptor+0x2cc>
    return;
 80081ca:	bf00      	nop
  }
}
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	889b      	ldrh	r3, [r3, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d131      	bne.n	800824a <USBD_SetAddress+0x76>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	88db      	ldrh	r3, [r3, #6]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d12d      	bne.n	800824a <USBD_SetAddress+0x76>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	885b      	ldrh	r3, [r3, #2]
 80081f2:	2b7f      	cmp	r3, #127	; 0x7f
 80081f4:	d829      	bhi.n	800824a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b03      	cmp	r3, #3
 800820c:	d104      	bne.n	8008218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f9a3 	bl	800855c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008216:	e01d      	b.n	8008254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7bfa      	ldrb	r2, [r7, #15]
 800821c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 feed 	bl	8009004 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa61 	bl	80086f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823e:	e009      	b.n	8008254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008248:	e004      	b.n	8008254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f985 	bl	800855c <USBD_CtlError>
  }
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	885b      	ldrh	r3, [r3, #2]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	4b4c      	ldr	r3, [pc, #304]	; (80083a4 <USBD_SetConfig+0x148>)
 8008272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008274:	4b4b      	ldr	r3, [pc, #300]	; (80083a4 <USBD_SetConfig+0x148>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d905      	bls.n	8008288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f96c 	bl	800855c <USBD_CtlError>
    return USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	e088      	b.n	800839a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d002      	beq.n	800829a <USBD_SetConfig+0x3e>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d025      	beq.n	80082e4 <USBD_SetConfig+0x88>
 8008298:	e071      	b.n	800837e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800829a:	4b42      	ldr	r3, [pc, #264]	; (80083a4 <USBD_SetConfig+0x148>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01c      	beq.n	80082dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80082a2:	4b40      	ldr	r3, [pc, #256]	; (80083a4 <USBD_SetConfig+0x148>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082ac:	4b3d      	ldr	r3, [pc, #244]	; (80083a4 <USBD_SetConfig+0x148>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff f948 	bl	8007548 <USBD_SetClassConfig>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f949 	bl	800855c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082ca:	e065      	b.n	8008398 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa10 	bl	80086f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2203      	movs	r2, #3
 80082d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082da:	e05d      	b.n	8008398 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fa08 	bl	80086f2 <USBD_CtlSendStatus>
      break;
 80082e2:	e059      	b.n	8008398 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082e4:	4b2f      	ldr	r3, [pc, #188]	; (80083a4 <USBD_SetConfig+0x148>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d112      	bne.n	8008312 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082f4:	4b2b      	ldr	r3, [pc, #172]	; (80083a4 <USBD_SetConfig+0x148>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082fe:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <USBD_SetConfig+0x148>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff f93b 	bl	8007580 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f9f1 	bl	80086f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008310:	e042      	b.n	8008398 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008312:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <USBD_SetConfig+0x148>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d02a      	beq.n	8008376 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff f929 	bl	8007580 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800832e:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <USBD_SetConfig+0x148>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008338:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <USBD_SetConfig+0x148>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff f902 	bl	8007548 <USBD_SetClassConfig>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00f      	beq.n	800836e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f903 	bl	800855c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff f90e 	bl	8007580 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800836c:	e014      	b.n	8008398 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9bf 	bl	80086f2 <USBD_CtlSendStatus>
      break;
 8008374:	e010      	b.n	8008398 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f9bb 	bl	80086f2 <USBD_CtlSendStatus>
      break;
 800837c:	e00c      	b.n	8008398 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f8eb 	bl	800855c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008386:	4b07      	ldr	r3, [pc, #28]	; (80083a4 <USBD_SetConfig+0x148>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff f8f7 	bl	8007580 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008392:	2303      	movs	r3, #3
 8008394:	73fb      	strb	r3, [r7, #15]
      break;
 8008396:	bf00      	nop
  }

  return ret;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000202 	.word	0x20000202

080083a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	88db      	ldrh	r3, [r3, #6]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d004      	beq.n	80083c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f8cd 	bl	800855c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083c2:	e023      	b.n	800840c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	dc02      	bgt.n	80083d6 <USBD_GetConfig+0x2e>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	dc03      	bgt.n	80083dc <USBD_GetConfig+0x34>
 80083d4:	e015      	b.n	8008402 <USBD_GetConfig+0x5a>
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d00b      	beq.n	80083f2 <USBD_GetConfig+0x4a>
 80083da:	e012      	b.n	8008402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3308      	adds	r3, #8
 80083e6:	2201      	movs	r2, #1
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f927 	bl	800863e <USBD_CtlSendData>
        break;
 80083f0:	e00c      	b.n	800840c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3304      	adds	r3, #4
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f91f 	bl	800863e <USBD_CtlSendData>
        break;
 8008400:	e004      	b.n	800840c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f8a9 	bl	800855c <USBD_CtlError>
        break;
 800840a:	bf00      	nop
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008424:	b2db      	uxtb	r3, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	2b02      	cmp	r3, #2
 800842a:	d81e      	bhi.n	800846a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	88db      	ldrh	r3, [r3, #6]
 8008430:	2b02      	cmp	r3, #2
 8008432:	d004      	beq.n	800843e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f890 	bl	800855c <USBD_CtlError>
        break;
 800843c:	e01a      	b.n	8008474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f043 0202 	orr.w	r2, r3, #2
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	330c      	adds	r3, #12
 800845e:	2202      	movs	r2, #2
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f8eb 	bl	800863e <USBD_CtlSendData>
      break;
 8008468:	e004      	b.n	8008474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f875 	bl	800855c <USBD_CtlError>
      break;
 8008472:	bf00      	nop
  }
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	885b      	ldrh	r3, [r3, #2]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d106      	bne.n	800849c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f92b 	bl	80086f2 <USBD_CtlSendStatus>
  }
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d80b      	bhi.n	80084d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	885b      	ldrh	r3, [r3, #2]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d10c      	bne.n	80084de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f910 	bl	80086f2 <USBD_CtlSendStatus>
      }
      break;
 80084d2:	e004      	b.n	80084de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f840 	bl	800855c <USBD_CtlError>
      break;
 80084dc:	e000      	b.n	80084e0 <USBD_ClrFeature+0x3c>
      break;
 80084de:	bf00      	nop
  }
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3301      	adds	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fabb 	bl	8007a8e <SWAPBYTE>
 8008518:	4603      	mov	r3, r0
 800851a:	461a      	mov	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3301      	adds	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3301      	adds	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff faae 	bl	8007a8e <SWAPBYTE>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7ff faa1 	bl	8007a8e <SWAPBYTE>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	80da      	strh	r2, [r3, #6]
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008566:	2180      	movs	r1, #128	; 0x80
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fce1 	bl	8008f30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800856e:	2100      	movs	r1, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fcdd 	bl	8008f30 <USBD_LL_StallEP>
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b086      	sub	sp, #24
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d036      	beq.n	8008602 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008598:	6938      	ldr	r0, [r7, #16]
 800859a:	f000 f836 	bl	800860a <USBD_GetLen>
 800859e:	4603      	mov	r3, r0
 80085a0:	3301      	adds	r3, #1
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	3301      	adds	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	4413      	add	r3, r2
 80085c4:	2203      	movs	r2, #3
 80085c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	3301      	adds	r3, #1
 80085cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80085ce:	e013      	b.n	80085f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	7812      	ldrb	r2, [r2, #0]
 80085da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3301      	adds	r3, #1
 80085e0:	613b      	str	r3, [r7, #16]
    idx++;
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	3301      	adds	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	4413      	add	r3, r2
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	3301      	adds	r3, #1
 80085f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e7      	bne.n	80085d0 <USBD_GetString+0x52>
 8008600:	e000      	b.n	8008604 <USBD_GetString+0x86>
    return;
 8008602:	bf00      	nop
  }
}
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800861a:	e005      	b.n	8008628 <USBD_GetLen+0x1e>
  {
    len++;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	3301      	adds	r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	3301      	adds	r3, #1
 8008626:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1f5      	bne.n	800861c <USBD_GetLen+0x12>
  }

  return len;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2202      	movs	r2, #2
 800864e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	2100      	movs	r1, #0
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fcec 	bl	8009042 <USBD_LL_Transmit>

  return USBD_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	2100      	movs	r1, #0
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fcdb 	bl	8009042 <USBD_LL_Transmit>

  return USBD_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2203      	movs	r2, #3
 80086a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	2100      	movs	r1, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fcdf 	bl	8009084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	2100      	movs	r1, #0
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 fcce 	bl	8009084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2204      	movs	r2, #4
 80086fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008702:	2300      	movs	r3, #0
 8008704:	2200      	movs	r2, #0
 8008706:	2100      	movs	r1, #0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fc9a 	bl	8009042 <USBD_LL_Transmit>

  return USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2205      	movs	r2, #5
 8008724:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008728:	2300      	movs	r3, #0
 800872a:	2200      	movs	r2, #0
 800872c:	2100      	movs	r1, #0
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fca8 	bl	8009084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008744:	2200      	movs	r2, #0
 8008746:	4912      	ldr	r1, [pc, #72]	; (8008790 <MX_USB_DEVICE_Init+0x50>)
 8008748:	4812      	ldr	r0, [pc, #72]	; (8008794 <MX_USB_DEVICE_Init+0x54>)
 800874a:	f7fe fe8f 	bl	800746c <USBD_Init>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008754:	f7f9 fbfa 	bl	8001f4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008758:	490f      	ldr	r1, [pc, #60]	; (8008798 <MX_USB_DEVICE_Init+0x58>)
 800875a:	480e      	ldr	r0, [pc, #56]	; (8008794 <MX_USB_DEVICE_Init+0x54>)
 800875c:	f7fe feb6 	bl	80074cc <USBD_RegisterClass>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008766:	f7f9 fbf1 	bl	8001f4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800876a:	490c      	ldr	r1, [pc, #48]	; (800879c <MX_USB_DEVICE_Init+0x5c>)
 800876c:	4809      	ldr	r0, [pc, #36]	; (8008794 <MX_USB_DEVICE_Init+0x54>)
 800876e:	f7fe fdd7 	bl	8007320 <USBD_CDC_RegisterInterface>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008778:	f7f9 fbe8 	bl	8001f4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800877c:	4805      	ldr	r0, [pc, #20]	; (8008794 <MX_USB_DEVICE_Init+0x54>)
 800877e:	f7fe fecc 	bl	800751a <USBD_Start>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008788:	f7f9 fbe0 	bl	8001f4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800878c:	bf00      	nop
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000130 	.word	0x20000130
 8008794:	20000628 	.word	0x20000628
 8008798:	20000018 	.word	0x20000018
 800879c:	2000011c 	.word	0x2000011c

080087a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087a4:	2200      	movs	r2, #0
 80087a6:	4905      	ldr	r1, [pc, #20]	; (80087bc <CDC_Init_FS+0x1c>)
 80087a8:	4805      	ldr	r0, [pc, #20]	; (80087c0 <CDC_Init_FS+0x20>)
 80087aa:	f7fe fdce 	bl	800734a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087ae:	4905      	ldr	r1, [pc, #20]	; (80087c4 <CDC_Init_FS+0x24>)
 80087b0:	4803      	ldr	r0, [pc, #12]	; (80087c0 <CDC_Init_FS+0x20>)
 80087b2:	f7fe fde8 	bl	8007386 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	200010f8 	.word	0x200010f8
 80087c0:	20000628 	.word	0x20000628
 80087c4:	200008f8 	.word	0x200008f8

080087c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
 80087e4:	4613      	mov	r3, r2
 80087e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b23      	cmp	r3, #35	; 0x23
 80087ec:	d84a      	bhi.n	8008884 <CDC_Control_FS+0xac>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <CDC_Control_FS+0x1c>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008885 	.word	0x08008885
 80087f8:	08008885 	.word	0x08008885
 80087fc:	08008885 	.word	0x08008885
 8008800:	08008885 	.word	0x08008885
 8008804:	08008885 	.word	0x08008885
 8008808:	08008885 	.word	0x08008885
 800880c:	08008885 	.word	0x08008885
 8008810:	08008885 	.word	0x08008885
 8008814:	08008885 	.word	0x08008885
 8008818:	08008885 	.word	0x08008885
 800881c:	08008885 	.word	0x08008885
 8008820:	08008885 	.word	0x08008885
 8008824:	08008885 	.word	0x08008885
 8008828:	08008885 	.word	0x08008885
 800882c:	08008885 	.word	0x08008885
 8008830:	08008885 	.word	0x08008885
 8008834:	08008885 	.word	0x08008885
 8008838:	08008885 	.word	0x08008885
 800883c:	08008885 	.word	0x08008885
 8008840:	08008885 	.word	0x08008885
 8008844:	08008885 	.word	0x08008885
 8008848:	08008885 	.word	0x08008885
 800884c:	08008885 	.word	0x08008885
 8008850:	08008885 	.word	0x08008885
 8008854:	08008885 	.word	0x08008885
 8008858:	08008885 	.word	0x08008885
 800885c:	08008885 	.word	0x08008885
 8008860:	08008885 	.word	0x08008885
 8008864:	08008885 	.word	0x08008885
 8008868:	08008885 	.word	0x08008885
 800886c:	08008885 	.word	0x08008885
 8008870:	08008885 	.word	0x08008885
 8008874:	08008885 	.word	0x08008885
 8008878:	08008885 	.word	0x08008885
 800887c:	08008885 	.word	0x08008885
 8008880:	08008885 	.word	0x08008885
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008884:	bf00      	nop
  }

  return (USBD_OK);
 8008886:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4805      	ldr	r0, [pc, #20]	; (80088b8 <CDC_Receive_FS+0x24>)
 80088a2:	f7fe fd70 	bl	8007386 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088a6:	4804      	ldr	r0, [pc, #16]	; (80088b8 <CDC_Receive_FS+0x24>)
 80088a8:	f7fe fdb6 	bl	8007418 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80088ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000628 	.word	0x20000628

080088bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <CDC_Transmit_FS+0x48>)
 80088ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088de:	2301      	movs	r3, #1
 80088e0:	e00b      	b.n	80088fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088e2:	887b      	ldrh	r3, [r7, #2]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4806      	ldr	r0, [pc, #24]	; (8008904 <CDC_Transmit_FS+0x48>)
 80088ea:	f7fe fd2e 	bl	800734a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088ee:	4805      	ldr	r0, [pc, #20]	; (8008904 <CDC_Transmit_FS+0x48>)
 80088f0:	f7fe fd62 	bl	80073b8 <USBD_CDC_TransmitPacket>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000628 	.word	0x20000628

08008908 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800891a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800891e:	4618      	mov	r0, r3
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
	...

0800892c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	6039      	str	r1, [r7, #0]
 8008936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2212      	movs	r2, #18
 800893c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800893e:	4b03      	ldr	r3, [pc, #12]	; (800894c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	2000014c 	.word	0x2000014c

08008950 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2204      	movs	r2, #4
 8008960:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008962:	4b03      	ldr	r3, [pc, #12]	; (8008970 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000160 	.word	0x20000160

08008974 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d105      	bne.n	8008992 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	4907      	ldr	r1, [pc, #28]	; (80089a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800898a:	4808      	ldr	r0, [pc, #32]	; (80089ac <USBD_FS_ProductStrDescriptor+0x38>)
 800898c:	f7ff fdf7 	bl	800857e <USBD_GetString>
 8008990:	e004      	b.n	800899c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	4904      	ldr	r1, [pc, #16]	; (80089a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008996:	4805      	ldr	r0, [pc, #20]	; (80089ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008998:	f7ff fdf1 	bl	800857e <USBD_GetString>
  }
  return USBD_StrDesc;
 800899c:	4b02      	ldr	r3, [pc, #8]	; (80089a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200018f8 	.word	0x200018f8
 80089ac:	0800a1f4 	.word	0x0800a1f4

080089b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	6039      	str	r1, [r7, #0]
 80089ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	4904      	ldr	r1, [pc, #16]	; (80089d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089c0:	4804      	ldr	r0, [pc, #16]	; (80089d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089c2:	f7ff fddc 	bl	800857e <USBD_GetString>
  return USBD_StrDesc;
 80089c6:	4b02      	ldr	r3, [pc, #8]	; (80089d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	200018f8 	.word	0x200018f8
 80089d4:	0800a20c 	.word	0x0800a20c

080089d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	221a      	movs	r2, #26
 80089e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089ea:	f000 f843 	bl	8008a74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089ee:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000164 	.word	0x20000164

080089fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d105      	bne.n	8008a1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	4907      	ldr	r1, [pc, #28]	; (8008a30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a12:	4808      	ldr	r0, [pc, #32]	; (8008a34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a14:	f7ff fdb3 	bl	800857e <USBD_GetString>
 8008a18:	e004      	b.n	8008a24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4904      	ldr	r1, [pc, #16]	; (8008a30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a1e:	4805      	ldr	r0, [pc, #20]	; (8008a34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a20:	f7ff fdad 	bl	800857e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a24:	4b02      	ldr	r3, [pc, #8]	; (8008a30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	200018f8 	.word	0x200018f8
 8008a34:	0800a220 	.word	0x0800a220

08008a38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d105      	bne.n	8008a56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4907      	ldr	r1, [pc, #28]	; (8008a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a4e:	4808      	ldr	r0, [pc, #32]	; (8008a70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a50:	f7ff fd95 	bl	800857e <USBD_GetString>
 8008a54:	e004      	b.n	8008a60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4904      	ldr	r1, [pc, #16]	; (8008a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a5a:	4805      	ldr	r0, [pc, #20]	; (8008a70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a5c:	f7ff fd8f 	bl	800857e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a60:	4b02      	ldr	r3, [pc, #8]	; (8008a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200018f8 	.word	0x200018f8
 8008a70:	0800a22c 	.word	0x0800a22c

08008a74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <Get_SerialNum+0x44>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a80:	4b0e      	ldr	r3, [pc, #56]	; (8008abc <Get_SerialNum+0x48>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a86:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <Get_SerialNum+0x4c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4413      	add	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	4909      	ldr	r1, [pc, #36]	; (8008ac4 <Get_SerialNum+0x50>)
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f814 	bl	8008acc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	4908      	ldr	r1, [pc, #32]	; (8008ac8 <Get_SerialNum+0x54>)
 8008aa8:	68b8      	ldr	r0, [r7, #8]
 8008aaa:	f000 f80f 	bl	8008acc <IntToUnicode>
  }
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	1fff7a10 	.word	0x1fff7a10
 8008abc:	1fff7a14 	.word	0x1fff7a14
 8008ac0:	1fff7a18 	.word	0x1fff7a18
 8008ac4:	20000166 	.word	0x20000166
 8008ac8:	20000176 	.word	0x20000176

08008acc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ade:	2300      	movs	r3, #0
 8008ae0:	75fb      	strb	r3, [r7, #23]
 8008ae2:	e027      	b.n	8008b34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	0f1b      	lsrs	r3, r3, #28
 8008ae8:	2b09      	cmp	r3, #9
 8008aea:	d80b      	bhi.n	8008b04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	0f1b      	lsrs	r3, r3, #28
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4619      	mov	r1, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	440b      	add	r3, r1
 8008afc:	3230      	adds	r2, #48	; 0x30
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e00a      	b.n	8008b1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	0f1b      	lsrs	r3, r3, #28
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	440b      	add	r3, r1
 8008b14:	3237      	adds	r2, #55	; 0x37
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	3301      	adds	r3, #1
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	3301      	adds	r3, #1
 8008b32:	75fb      	strb	r3, [r7, #23]
 8008b34:	7dfa      	ldrb	r2, [r7, #23]
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d3d3      	bcc.n	8008ae4 <IntToUnicode+0x18>
  }
}
 8008b3c:	bf00      	nop
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
	...

08008b4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	609a      	str	r2, [r3, #8]
 8008b60:	60da      	str	r2, [r3, #12]
 8008b62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6c:	d13a      	bne.n	8008be4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	4a1d      	ldr	r2, [pc, #116]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b78:	f043 0301 	orr.w	r3, r3, #1
 8008b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b7e:	4b1b      	ldr	r3, [pc, #108]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	613b      	str	r3, [r7, #16]
 8008b88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b90:	2302      	movs	r3, #2
 8008b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b9c:	230a      	movs	r3, #10
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4812      	ldr	r0, [pc, #72]	; (8008bf0 <HAL_PCD_MspInit+0xa4>)
 8008ba8:	f7f9 fd00 	bl	80025ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	4a0e      	ldr	r2, [pc, #56]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb6:	6353      	str	r3, [r2, #52]	; 0x34
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8008bc8:	4b08      	ldr	r3, [pc, #32]	; (8008bec <HAL_PCD_MspInit+0xa0>)
 8008bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	2043      	movs	r0, #67	; 0x43
 8008bda:	f7f9 fcb0 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bde:	2043      	movs	r0, #67	; 0x43
 8008be0:	f7f9 fcc9 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008be4:	bf00      	nop
 8008be6:	3728      	adds	r7, #40	; 0x28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	40020000 	.word	0x40020000

08008bf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f7fe fcd0 	bl	80075b0 <USBD_LL_SetupStage>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	4619      	mov	r1, r3
 8008c42:	f7fe fd0a 	bl	800765a <USBD_LL_DataOutStage>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3348      	adds	r3, #72	; 0x48
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	4619      	mov	r1, r3
 8008c76:	f7fe fd53 	bl	8007720 <USBD_LL_DataInStage>
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fe67 	bl	8007964 <USBD_LL_SOF>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
 8008cb6:	e008      	b.n	8008cca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d102      	bne.n	8008cc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
 8008cc4:	e001      	b.n	8008cca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008cc6:	f7f9 f941 	bl	8001f4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cd0:	7bfa      	ldrb	r2, [r7, #15]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fe07 	bl	80078e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fdb3 	bl	800784c <USBD_LL_Reset>
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fe02 	bl	8007908 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <HAL_PCD_SuspendCallback+0x48>)
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	4a03      	ldr	r2, [pc, #12]	; (8008d38 <HAL_PCD_SuspendCallback+0x48>)
 8008d2a:	f043 0306 	orr.w	r3, r3, #6
 8008d2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	e000ed00 	.word	0xe000ed00

08008d3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fdf2 	bl	8007934 <USBD_LL_Resume>
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fe40 	bl	80079f4 <USBD_LL_IsoOUTIncomplete>
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fe08 	bl	80079a8 <USBD_LL_IsoINIncomplete>
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fe46 	bl	8007a40 <USBD_LL_DevConnected>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fe43 	bl	8007a56 <USBD_LL_DevDisconnected>
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d13c      	bne.n	8008e62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008de8:	4a20      	ldr	r2, [pc, #128]	; (8008e6c <USBD_LL_Init+0x94>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a1e      	ldr	r2, [pc, #120]	; (8008e6c <USBD_LL_Init+0x94>)
 8008df4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008df8:	4b1c      	ldr	r3, [pc, #112]	; (8008e6c <USBD_LL_Init+0x94>)
 8008dfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e00:	4b1a      	ldr	r3, [pc, #104]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e02:	2204      	movs	r2, #4
 8008e04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e06:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e08:	2202      	movs	r2, #2
 8008e0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e0c:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e12:	4b16      	ldr	r3, [pc, #88]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e14:	2202      	movs	r2, #2
 8008e16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e18:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e1e:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e2a:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e30:	4b0e      	ldr	r3, [pc, #56]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e36:	480d      	ldr	r0, [pc, #52]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e38:	f7f9 fd6d 	bl	8002916 <HAL_PCD_Init>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e42:	f7f9 f883 	bl	8001f4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e46:	2180      	movs	r1, #128	; 0x80
 8008e48:	4808      	ldr	r0, [pc, #32]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e4a:	f7fa feca 	bl	8003be2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e4e:	2240      	movs	r2, #64	; 0x40
 8008e50:	2100      	movs	r1, #0
 8008e52:	4806      	ldr	r0, [pc, #24]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e54:	f7fa fe7e 	bl	8003b54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e58:	2280      	movs	r2, #128	; 0x80
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	4803      	ldr	r0, [pc, #12]	; (8008e6c <USBD_LL_Init+0x94>)
 8008e5e:	f7fa fe79 	bl	8003b54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20001af8 	.word	0x20001af8

08008e70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f9 fe62 	bl	8002b50 <HAL_PCD_Start>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f942 	bl	800911c <USBD_Get_USB_Status>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	70fb      	strb	r3, [r7, #3]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70bb      	strb	r3, [r7, #2]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ece:	78bb      	ldrb	r3, [r7, #2]
 8008ed0:	883a      	ldrh	r2, [r7, #0]
 8008ed2:	78f9      	ldrb	r1, [r7, #3]
 8008ed4:	f7fa fa46 	bl	8003364 <HAL_PCD_EP_Open>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f91c 	bl	800911c <USBD_Get_USB_Status>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fa fa8f 	bl	8003434 <HAL_PCD_EP_Close>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 f8fd 	bl	800911c <USBD_Get_USB_Status>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f4a:	78fa      	ldrb	r2, [r7, #3]
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fa fb67 	bl	8003622 <HAL_PCD_EP_SetStall>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f8de 	bl	800911c <USBD_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fa fbac 	bl	80036ea <HAL_PCD_EP_ClrStall>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f8bf 	bl	800911c <USBD_Get_USB_Status>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da0b      	bge.n	8008fe0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	440b      	add	r3, r1
 8008fda:	333e      	adds	r3, #62	; 0x3e
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	e00b      	b.n	8008ff8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fe6:	68f9      	ldr	r1, [r7, #12]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ff6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7fa f979 	bl	800331a <HAL_PCD_SetAddress>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f874 	bl	800911c <USBD_Get_USB_Status>
 8009034:	4603      	mov	r3, r0
 8009036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009038:	7bbb      	ldrb	r3, [r7, #14]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
 800904e:	460b      	mov	r3, r1
 8009050:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009060:	7af9      	ldrb	r1, [r7, #11]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	f7fa fa92 	bl	800358e <HAL_PCD_EP_Transmit>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	4618      	mov	r0, r3
 8009072:	f000 f853 	bl	800911c <USBD_Get_USB_Status>
 8009076:	4603      	mov	r3, r0
 8009078:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800907a:	7dbb      	ldrb	r3, [r7, #22]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	607a      	str	r2, [r7, #4]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	460b      	mov	r3, r1
 8009092:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090a2:	7af9      	ldrb	r1, [r7, #11]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	f7fa fa0e 	bl	80034c8 <HAL_PCD_EP_Receive>
 80090ac:	4603      	mov	r3, r0
 80090ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f832 	bl	800911c <USBD_Get_USB_Status>
 80090b8:	4603      	mov	r3, r0
 80090ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fa fa3e 	bl	800355e <HAL_PCD_EP_GetRxCount>
 80090e2:	4603      	mov	r3, r0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090f4:	4b03      	ldr	r3, [pc, #12]	; (8009104 <USBD_static_malloc+0x18>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000204 	.word	0x20000204

08009108 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	2b03      	cmp	r3, #3
 800912e:	d817      	bhi.n	8009160 <USBD_Get_USB_Status+0x44>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <USBD_Get_USB_Status+0x1c>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009149 	.word	0x08009149
 800913c:	0800914f 	.word	0x0800914f
 8009140:	08009155 	.word	0x08009155
 8009144:	0800915b 	.word	0x0800915b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
    break;
 800914c:	e00b      	b.n	8009166 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800914e:	2303      	movs	r3, #3
 8009150:	73fb      	strb	r3, [r7, #15]
    break;
 8009152:	e008      	b.n	8009166 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
    break;
 8009158:	e005      	b.n	8009166 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800915a:	2303      	movs	r3, #3
 800915c:	73fb      	strb	r3, [r7, #15]
    break;
 800915e:	e002      	b.n	8009166 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	73fb      	strb	r3, [r7, #15]
    break;
 8009164:	bf00      	nop
  }
  return usb_status;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <pow>:
 8009174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009178:	ec59 8b10 	vmov	r8, r9, d0
 800917c:	ec57 6b11 	vmov	r6, r7, d1
 8009180:	f000 f8a6 	bl	80092d0 <__ieee754_pow>
 8009184:	4b4e      	ldr	r3, [pc, #312]	; (80092c0 <pow+0x14c>)
 8009186:	f993 3000 	ldrsb.w	r3, [r3]
 800918a:	3301      	adds	r3, #1
 800918c:	ec55 4b10 	vmov	r4, r5, d0
 8009190:	d015      	beq.n	80091be <pow+0x4a>
 8009192:	4632      	mov	r2, r6
 8009194:	463b      	mov	r3, r7
 8009196:	4630      	mov	r0, r6
 8009198:	4639      	mov	r1, r7
 800919a:	f7f7 fc6b 	bl	8000a74 <__aeabi_dcmpun>
 800919e:	b970      	cbnz	r0, 80091be <pow+0x4a>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 fc64 	bl	8000a74 <__aeabi_dcmpun>
 80091ac:	2200      	movs	r2, #0
 80091ae:	2300      	movs	r3, #0
 80091b0:	b148      	cbz	r0, 80091c6 <pow+0x52>
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 fc2b 	bl	8000a10 <__aeabi_dcmpeq>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d17d      	bne.n	80092ba <pow+0x146>
 80091be:	ec45 4b10 	vmov	d0, r4, r5
 80091c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 fc21 	bl	8000a10 <__aeabi_dcmpeq>
 80091ce:	b1e0      	cbz	r0, 800920a <pow+0x96>
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	4630      	mov	r0, r6
 80091d6:	4639      	mov	r1, r7
 80091d8:	f7f7 fc1a 	bl	8000a10 <__aeabi_dcmpeq>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d16c      	bne.n	80092ba <pow+0x146>
 80091e0:	ec47 6b10 	vmov	d0, r6, r7
 80091e4:	f000 fe53 	bl	8009e8e <finite>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0e8      	beq.n	80091be <pow+0x4a>
 80091ec:	2200      	movs	r2, #0
 80091ee:	2300      	movs	r3, #0
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fc16 	bl	8000a24 <__aeabi_dcmplt>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d0e0      	beq.n	80091be <pow+0x4a>
 80091fc:	f000 ff6e 	bl	800a0dc <__errno>
 8009200:	2321      	movs	r3, #33	; 0x21
 8009202:	6003      	str	r3, [r0, #0]
 8009204:	2400      	movs	r4, #0
 8009206:	4d2f      	ldr	r5, [pc, #188]	; (80092c4 <pow+0x150>)
 8009208:	e7d9      	b.n	80091be <pow+0x4a>
 800920a:	ec45 4b10 	vmov	d0, r4, r5
 800920e:	f000 fe3e 	bl	8009e8e <finite>
 8009212:	bbb8      	cbnz	r0, 8009284 <pow+0x110>
 8009214:	ec49 8b10 	vmov	d0, r8, r9
 8009218:	f000 fe39 	bl	8009e8e <finite>
 800921c:	b390      	cbz	r0, 8009284 <pow+0x110>
 800921e:	ec47 6b10 	vmov	d0, r6, r7
 8009222:	f000 fe34 	bl	8009e8e <finite>
 8009226:	b368      	cbz	r0, 8009284 <pow+0x110>
 8009228:	4622      	mov	r2, r4
 800922a:	462b      	mov	r3, r5
 800922c:	4620      	mov	r0, r4
 800922e:	4629      	mov	r1, r5
 8009230:	f7f7 fc20 	bl	8000a74 <__aeabi_dcmpun>
 8009234:	b160      	cbz	r0, 8009250 <pow+0xdc>
 8009236:	f000 ff51 	bl	800a0dc <__errno>
 800923a:	2321      	movs	r3, #33	; 0x21
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	4610      	mov	r0, r2
 8009244:	4619      	mov	r1, r3
 8009246:	f7f7 faa5 	bl	8000794 <__aeabi_ddiv>
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	e7b6      	b.n	80091be <pow+0x4a>
 8009250:	f000 ff44 	bl	800a0dc <__errno>
 8009254:	2322      	movs	r3, #34	; 0x22
 8009256:	6003      	str	r3, [r0, #0]
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 fbe0 	bl	8000a24 <__aeabi_dcmplt>
 8009264:	2400      	movs	r4, #0
 8009266:	b158      	cbz	r0, 8009280 <pow+0x10c>
 8009268:	ec47 6b10 	vmov	d0, r6, r7
 800926c:	f000 fe24 	bl	8009eb8 <rint>
 8009270:	4632      	mov	r2, r6
 8009272:	ec51 0b10 	vmov	r0, r1, d0
 8009276:	463b      	mov	r3, r7
 8009278:	f7f7 fbca 	bl	8000a10 <__aeabi_dcmpeq>
 800927c:	2800      	cmp	r0, #0
 800927e:	d0c2      	beq.n	8009206 <pow+0x92>
 8009280:	4d11      	ldr	r5, [pc, #68]	; (80092c8 <pow+0x154>)
 8009282:	e79c      	b.n	80091be <pow+0x4a>
 8009284:	2200      	movs	r2, #0
 8009286:	2300      	movs	r3, #0
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f7 fbc0 	bl	8000a10 <__aeabi_dcmpeq>
 8009290:	2800      	cmp	r0, #0
 8009292:	d094      	beq.n	80091be <pow+0x4a>
 8009294:	ec49 8b10 	vmov	d0, r8, r9
 8009298:	f000 fdf9 	bl	8009e8e <finite>
 800929c:	2800      	cmp	r0, #0
 800929e:	d08e      	beq.n	80091be <pow+0x4a>
 80092a0:	ec47 6b10 	vmov	d0, r6, r7
 80092a4:	f000 fdf3 	bl	8009e8e <finite>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d088      	beq.n	80091be <pow+0x4a>
 80092ac:	f000 ff16 	bl	800a0dc <__errno>
 80092b0:	2322      	movs	r3, #34	; 0x22
 80092b2:	6003      	str	r3, [r0, #0]
 80092b4:	2400      	movs	r4, #0
 80092b6:	2500      	movs	r5, #0
 80092b8:	e781      	b.n	80091be <pow+0x4a>
 80092ba:	4d04      	ldr	r5, [pc, #16]	; (80092cc <pow+0x158>)
 80092bc:	2400      	movs	r4, #0
 80092be:	e77e      	b.n	80091be <pow+0x4a>
 80092c0:	2000017e 	.word	0x2000017e
 80092c4:	fff00000 	.word	0xfff00000
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	3ff00000 	.word	0x3ff00000

080092d0 <__ieee754_pow>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	ed2d 8b06 	vpush	{d8-d10}
 80092d8:	b08d      	sub	sp, #52	; 0x34
 80092da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80092de:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80092e2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80092e6:	ea56 0100 	orrs.w	r1, r6, r0
 80092ea:	ec53 2b10 	vmov	r2, r3, d0
 80092ee:	f000 84d1 	beq.w	8009c94 <__ieee754_pow+0x9c4>
 80092f2:	497f      	ldr	r1, [pc, #508]	; (80094f0 <__ieee754_pow+0x220>)
 80092f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80092f8:	428c      	cmp	r4, r1
 80092fa:	ee10 8a10 	vmov	r8, s0
 80092fe:	4699      	mov	r9, r3
 8009300:	dc09      	bgt.n	8009316 <__ieee754_pow+0x46>
 8009302:	d103      	bne.n	800930c <__ieee754_pow+0x3c>
 8009304:	b97a      	cbnz	r2, 8009326 <__ieee754_pow+0x56>
 8009306:	42a6      	cmp	r6, r4
 8009308:	dd02      	ble.n	8009310 <__ieee754_pow+0x40>
 800930a:	e00c      	b.n	8009326 <__ieee754_pow+0x56>
 800930c:	428e      	cmp	r6, r1
 800930e:	dc02      	bgt.n	8009316 <__ieee754_pow+0x46>
 8009310:	428e      	cmp	r6, r1
 8009312:	d110      	bne.n	8009336 <__ieee754_pow+0x66>
 8009314:	b178      	cbz	r0, 8009336 <__ieee754_pow+0x66>
 8009316:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800931a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800931e:	ea54 0308 	orrs.w	r3, r4, r8
 8009322:	f000 84b7 	beq.w	8009c94 <__ieee754_pow+0x9c4>
 8009326:	4873      	ldr	r0, [pc, #460]	; (80094f4 <__ieee754_pow+0x224>)
 8009328:	b00d      	add	sp, #52	; 0x34
 800932a:	ecbd 8b06 	vpop	{d8-d10}
 800932e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009332:	f000 bdb9 	b.w	8009ea8 <nan>
 8009336:	f1b9 0f00 	cmp.w	r9, #0
 800933a:	da36      	bge.n	80093aa <__ieee754_pow+0xda>
 800933c:	496e      	ldr	r1, [pc, #440]	; (80094f8 <__ieee754_pow+0x228>)
 800933e:	428e      	cmp	r6, r1
 8009340:	dc51      	bgt.n	80093e6 <__ieee754_pow+0x116>
 8009342:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009346:	428e      	cmp	r6, r1
 8009348:	f340 84af 	ble.w	8009caa <__ieee754_pow+0x9da>
 800934c:	1531      	asrs	r1, r6, #20
 800934e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009352:	2914      	cmp	r1, #20
 8009354:	dd0f      	ble.n	8009376 <__ieee754_pow+0xa6>
 8009356:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800935a:	fa20 fc01 	lsr.w	ip, r0, r1
 800935e:	fa0c f101 	lsl.w	r1, ip, r1
 8009362:	4281      	cmp	r1, r0
 8009364:	f040 84a1 	bne.w	8009caa <__ieee754_pow+0x9da>
 8009368:	f00c 0c01 	and.w	ip, ip, #1
 800936c:	f1cc 0102 	rsb	r1, ip, #2
 8009370:	9100      	str	r1, [sp, #0]
 8009372:	b180      	cbz	r0, 8009396 <__ieee754_pow+0xc6>
 8009374:	e059      	b.n	800942a <__ieee754_pow+0x15a>
 8009376:	2800      	cmp	r0, #0
 8009378:	d155      	bne.n	8009426 <__ieee754_pow+0x156>
 800937a:	f1c1 0114 	rsb	r1, r1, #20
 800937e:	fa46 fc01 	asr.w	ip, r6, r1
 8009382:	fa0c f101 	lsl.w	r1, ip, r1
 8009386:	42b1      	cmp	r1, r6
 8009388:	f040 848c 	bne.w	8009ca4 <__ieee754_pow+0x9d4>
 800938c:	f00c 0c01 	and.w	ip, ip, #1
 8009390:	f1cc 0102 	rsb	r1, ip, #2
 8009394:	9100      	str	r1, [sp, #0]
 8009396:	4959      	ldr	r1, [pc, #356]	; (80094fc <__ieee754_pow+0x22c>)
 8009398:	428e      	cmp	r6, r1
 800939a:	d12d      	bne.n	80093f8 <__ieee754_pow+0x128>
 800939c:	2f00      	cmp	r7, #0
 800939e:	da79      	bge.n	8009494 <__ieee754_pow+0x1c4>
 80093a0:	4956      	ldr	r1, [pc, #344]	; (80094fc <__ieee754_pow+0x22c>)
 80093a2:	2000      	movs	r0, #0
 80093a4:	f7f7 f9f6 	bl	8000794 <__aeabi_ddiv>
 80093a8:	e016      	b.n	80093d8 <__ieee754_pow+0x108>
 80093aa:	2100      	movs	r1, #0
 80093ac:	9100      	str	r1, [sp, #0]
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d13b      	bne.n	800942a <__ieee754_pow+0x15a>
 80093b2:	494f      	ldr	r1, [pc, #316]	; (80094f0 <__ieee754_pow+0x220>)
 80093b4:	428e      	cmp	r6, r1
 80093b6:	d1ee      	bne.n	8009396 <__ieee754_pow+0xc6>
 80093b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80093bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80093c0:	ea53 0308 	orrs.w	r3, r3, r8
 80093c4:	f000 8466 	beq.w	8009c94 <__ieee754_pow+0x9c4>
 80093c8:	4b4d      	ldr	r3, [pc, #308]	; (8009500 <__ieee754_pow+0x230>)
 80093ca:	429c      	cmp	r4, r3
 80093cc:	dd0d      	ble.n	80093ea <__ieee754_pow+0x11a>
 80093ce:	2f00      	cmp	r7, #0
 80093d0:	f280 8464 	bge.w	8009c9c <__ieee754_pow+0x9cc>
 80093d4:	2000      	movs	r0, #0
 80093d6:	2100      	movs	r1, #0
 80093d8:	ec41 0b10 	vmov	d0, r0, r1
 80093dc:	b00d      	add	sp, #52	; 0x34
 80093de:	ecbd 8b06 	vpop	{d8-d10}
 80093e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e6:	2102      	movs	r1, #2
 80093e8:	e7e0      	b.n	80093ac <__ieee754_pow+0xdc>
 80093ea:	2f00      	cmp	r7, #0
 80093ec:	daf2      	bge.n	80093d4 <__ieee754_pow+0x104>
 80093ee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80093f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80093f6:	e7ef      	b.n	80093d8 <__ieee754_pow+0x108>
 80093f8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80093fc:	d104      	bne.n	8009408 <__ieee754_pow+0x138>
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	f7f7 f89d 	bl	8000540 <__aeabi_dmul>
 8009406:	e7e7      	b.n	80093d8 <__ieee754_pow+0x108>
 8009408:	493e      	ldr	r1, [pc, #248]	; (8009504 <__ieee754_pow+0x234>)
 800940a:	428f      	cmp	r7, r1
 800940c:	d10d      	bne.n	800942a <__ieee754_pow+0x15a>
 800940e:	f1b9 0f00 	cmp.w	r9, #0
 8009412:	db0a      	blt.n	800942a <__ieee754_pow+0x15a>
 8009414:	ec43 2b10 	vmov	d0, r2, r3
 8009418:	b00d      	add	sp, #52	; 0x34
 800941a:	ecbd 8b06 	vpop	{d8-d10}
 800941e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009422:	f000 bc77 	b.w	8009d14 <__ieee754_sqrt>
 8009426:	2100      	movs	r1, #0
 8009428:	9100      	str	r1, [sp, #0]
 800942a:	ec43 2b10 	vmov	d0, r2, r3
 800942e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009432:	f000 fd23 	bl	8009e7c <fabs>
 8009436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800943a:	ec51 0b10 	vmov	r0, r1, d0
 800943e:	f1b8 0f00 	cmp.w	r8, #0
 8009442:	d12a      	bne.n	800949a <__ieee754_pow+0x1ca>
 8009444:	b12c      	cbz	r4, 8009452 <__ieee754_pow+0x182>
 8009446:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80094fc <__ieee754_pow+0x22c>
 800944a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800944e:	45e6      	cmp	lr, ip
 8009450:	d123      	bne.n	800949a <__ieee754_pow+0x1ca>
 8009452:	2f00      	cmp	r7, #0
 8009454:	da05      	bge.n	8009462 <__ieee754_pow+0x192>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	2000      	movs	r0, #0
 800945c:	4927      	ldr	r1, [pc, #156]	; (80094fc <__ieee754_pow+0x22c>)
 800945e:	f7f7 f999 	bl	8000794 <__aeabi_ddiv>
 8009462:	f1b9 0f00 	cmp.w	r9, #0
 8009466:	dab7      	bge.n	80093d8 <__ieee754_pow+0x108>
 8009468:	9b00      	ldr	r3, [sp, #0]
 800946a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800946e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009472:	4323      	orrs	r3, r4
 8009474:	d108      	bne.n	8009488 <__ieee754_pow+0x1b8>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4610      	mov	r0, r2
 800947c:	4619      	mov	r1, r3
 800947e:	f7f6 fea7 	bl	80001d0 <__aeabi_dsub>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	e78d      	b.n	80093a4 <__ieee754_pow+0xd4>
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d1a4      	bne.n	80093d8 <__ieee754_pow+0x108>
 800948e:	4602      	mov	r2, r0
 8009490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009494:	4610      	mov	r0, r2
 8009496:	4619      	mov	r1, r3
 8009498:	e79e      	b.n	80093d8 <__ieee754_pow+0x108>
 800949a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800949e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80094a2:	950a      	str	r5, [sp, #40]	; 0x28
 80094a4:	9d00      	ldr	r5, [sp, #0]
 80094a6:	46ac      	mov	ip, r5
 80094a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80094aa:	ea5c 0505 	orrs.w	r5, ip, r5
 80094ae:	d0e4      	beq.n	800947a <__ieee754_pow+0x1aa>
 80094b0:	4b15      	ldr	r3, [pc, #84]	; (8009508 <__ieee754_pow+0x238>)
 80094b2:	429e      	cmp	r6, r3
 80094b4:	f340 80fc 	ble.w	80096b0 <__ieee754_pow+0x3e0>
 80094b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80094bc:	429e      	cmp	r6, r3
 80094be:	4b10      	ldr	r3, [pc, #64]	; (8009500 <__ieee754_pow+0x230>)
 80094c0:	dd07      	ble.n	80094d2 <__ieee754_pow+0x202>
 80094c2:	429c      	cmp	r4, r3
 80094c4:	dc0a      	bgt.n	80094dc <__ieee754_pow+0x20c>
 80094c6:	2f00      	cmp	r7, #0
 80094c8:	da84      	bge.n	80093d4 <__ieee754_pow+0x104>
 80094ca:	a307      	add	r3, pc, #28	; (adr r3, 80094e8 <__ieee754_pow+0x218>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	e795      	b.n	80093fe <__ieee754_pow+0x12e>
 80094d2:	429c      	cmp	r4, r3
 80094d4:	dbf7      	blt.n	80094c6 <__ieee754_pow+0x1f6>
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <__ieee754_pow+0x22c>)
 80094d8:	429c      	cmp	r4, r3
 80094da:	dd17      	ble.n	800950c <__ieee754_pow+0x23c>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	dcf4      	bgt.n	80094ca <__ieee754_pow+0x1fa>
 80094e0:	e778      	b.n	80093d4 <__ieee754_pow+0x104>
 80094e2:	bf00      	nop
 80094e4:	f3af 8000 	nop.w
 80094e8:	8800759c 	.word	0x8800759c
 80094ec:	7e37e43c 	.word	0x7e37e43c
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	0800a254 	.word	0x0800a254
 80094f8:	433fffff 	.word	0x433fffff
 80094fc:	3ff00000 	.word	0x3ff00000
 8009500:	3fefffff 	.word	0x3fefffff
 8009504:	3fe00000 	.word	0x3fe00000
 8009508:	41e00000 	.word	0x41e00000
 800950c:	4b64      	ldr	r3, [pc, #400]	; (80096a0 <__ieee754_pow+0x3d0>)
 800950e:	2200      	movs	r2, #0
 8009510:	f7f6 fe5e 	bl	80001d0 <__aeabi_dsub>
 8009514:	a356      	add	r3, pc, #344	; (adr r3, 8009670 <__ieee754_pow+0x3a0>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	4604      	mov	r4, r0
 800951c:	460d      	mov	r5, r1
 800951e:	f7f7 f80f 	bl	8000540 <__aeabi_dmul>
 8009522:	a355      	add	r3, pc, #340	; (adr r3, 8009678 <__ieee754_pow+0x3a8>)
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	4606      	mov	r6, r0
 800952a:	460f      	mov	r7, r1
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f7 f806 	bl	8000540 <__aeabi_dmul>
 8009534:	4b5b      	ldr	r3, [pc, #364]	; (80096a4 <__ieee754_pow+0x3d4>)
 8009536:	4682      	mov	sl, r0
 8009538:	468b      	mov	fp, r1
 800953a:	2200      	movs	r2, #0
 800953c:	4620      	mov	r0, r4
 800953e:	4629      	mov	r1, r5
 8009540:	f7f6 fffe 	bl	8000540 <__aeabi_dmul>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	a14d      	add	r1, pc, #308	; (adr r1, 8009680 <__ieee754_pow+0x3b0>)
 800954a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800954e:	f7f6 fe3f 	bl	80001d0 <__aeabi_dsub>
 8009552:	4622      	mov	r2, r4
 8009554:	462b      	mov	r3, r5
 8009556:	f7f6 fff3 	bl	8000540 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	2000      	movs	r0, #0
 8009560:	4951      	ldr	r1, [pc, #324]	; (80096a8 <__ieee754_pow+0x3d8>)
 8009562:	f7f6 fe35 	bl	80001d0 <__aeabi_dsub>
 8009566:	4622      	mov	r2, r4
 8009568:	4680      	mov	r8, r0
 800956a:	4689      	mov	r9, r1
 800956c:	462b      	mov	r3, r5
 800956e:	4620      	mov	r0, r4
 8009570:	4629      	mov	r1, r5
 8009572:	f7f6 ffe5 	bl	8000540 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	f7f6 ffdf 	bl	8000540 <__aeabi_dmul>
 8009582:	a341      	add	r3, pc, #260	; (adr r3, 8009688 <__ieee754_pow+0x3b8>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 ffda 	bl	8000540 <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4650      	mov	r0, sl
 8009592:	4659      	mov	r1, fp
 8009594:	f7f6 fe1c 	bl	80001d0 <__aeabi_dsub>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4680      	mov	r8, r0
 800959e:	4689      	mov	r9, r1
 80095a0:	4630      	mov	r0, r6
 80095a2:	4639      	mov	r1, r7
 80095a4:	f7f6 fe16 	bl	80001d4 <__adddf3>
 80095a8:	2400      	movs	r4, #0
 80095aa:	4632      	mov	r2, r6
 80095ac:	463b      	mov	r3, r7
 80095ae:	4620      	mov	r0, r4
 80095b0:	460d      	mov	r5, r1
 80095b2:	f7f6 fe0d 	bl	80001d0 <__aeabi_dsub>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4640      	mov	r0, r8
 80095bc:	4649      	mov	r1, r9
 80095be:	f7f6 fe07 	bl	80001d0 <__aeabi_dsub>
 80095c2:	9b00      	ldr	r3, [sp, #0]
 80095c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4313      	orrs	r3, r2
 80095ca:	4682      	mov	sl, r0
 80095cc:	468b      	mov	fp, r1
 80095ce:	f040 81f1 	bne.w	80099b4 <__ieee754_pow+0x6e4>
 80095d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009690 <__ieee754_pow+0x3c0>
 80095d6:	eeb0 8a47 	vmov.f32	s16, s14
 80095da:	eef0 8a67 	vmov.f32	s17, s15
 80095de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095e2:	2600      	movs	r6, #0
 80095e4:	4632      	mov	r2, r6
 80095e6:	463b      	mov	r3, r7
 80095e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ec:	f7f6 fdf0 	bl	80001d0 <__aeabi_dsub>
 80095f0:	4622      	mov	r2, r4
 80095f2:	462b      	mov	r3, r5
 80095f4:	f7f6 ffa4 	bl	8000540 <__aeabi_dmul>
 80095f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095fc:	4680      	mov	r8, r0
 80095fe:	4689      	mov	r9, r1
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	f7f6 ff9c 	bl	8000540 <__aeabi_dmul>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4640      	mov	r0, r8
 800960e:	4649      	mov	r1, r9
 8009610:	f7f6 fde0 	bl	80001d4 <__adddf3>
 8009614:	4632      	mov	r2, r6
 8009616:	463b      	mov	r3, r7
 8009618:	4680      	mov	r8, r0
 800961a:	4689      	mov	r9, r1
 800961c:	4620      	mov	r0, r4
 800961e:	4629      	mov	r1, r5
 8009620:	f7f6 ff8e 	bl	8000540 <__aeabi_dmul>
 8009624:	460b      	mov	r3, r1
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	4602      	mov	r2, r0
 800962c:	4649      	mov	r1, r9
 800962e:	4640      	mov	r0, r8
 8009630:	f7f6 fdd0 	bl	80001d4 <__adddf3>
 8009634:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <__ieee754_pow+0x3dc>)
 8009636:	4299      	cmp	r1, r3
 8009638:	ec45 4b19 	vmov	d9, r4, r5
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	468b      	mov	fp, r1
 8009642:	f340 82fe 	ble.w	8009c42 <__ieee754_pow+0x972>
 8009646:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800964a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800964e:	4303      	orrs	r3, r0
 8009650:	f000 81f0 	beq.w	8009a34 <__ieee754_pow+0x764>
 8009654:	a310      	add	r3, pc, #64	; (adr r3, 8009698 <__ieee754_pow+0x3c8>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	ec51 0b18 	vmov	r0, r1, d8
 800965e:	f7f6 ff6f 	bl	8000540 <__aeabi_dmul>
 8009662:	a30d      	add	r3, pc, #52	; (adr r3, 8009698 <__ieee754_pow+0x3c8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	e6cb      	b.n	8009402 <__ieee754_pow+0x132>
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w
 8009670:	60000000 	.word	0x60000000
 8009674:	3ff71547 	.word	0x3ff71547
 8009678:	f85ddf44 	.word	0xf85ddf44
 800967c:	3e54ae0b 	.word	0x3e54ae0b
 8009680:	55555555 	.word	0x55555555
 8009684:	3fd55555 	.word	0x3fd55555
 8009688:	652b82fe 	.word	0x652b82fe
 800968c:	3ff71547 	.word	0x3ff71547
 8009690:	00000000 	.word	0x00000000
 8009694:	bff00000 	.word	0xbff00000
 8009698:	8800759c 	.word	0x8800759c
 800969c:	7e37e43c 	.word	0x7e37e43c
 80096a0:	3ff00000 	.word	0x3ff00000
 80096a4:	3fd00000 	.word	0x3fd00000
 80096a8:	3fe00000 	.word	0x3fe00000
 80096ac:	408fffff 	.word	0x408fffff
 80096b0:	4bd7      	ldr	r3, [pc, #860]	; (8009a10 <__ieee754_pow+0x740>)
 80096b2:	ea03 0309 	and.w	r3, r3, r9
 80096b6:	2200      	movs	r2, #0
 80096b8:	b92b      	cbnz	r3, 80096c6 <__ieee754_pow+0x3f6>
 80096ba:	4bd6      	ldr	r3, [pc, #856]	; (8009a14 <__ieee754_pow+0x744>)
 80096bc:	f7f6 ff40 	bl	8000540 <__aeabi_dmul>
 80096c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80096c4:	460c      	mov	r4, r1
 80096c6:	1523      	asrs	r3, r4, #20
 80096c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80096cc:	4413      	add	r3, r2
 80096ce:	9309      	str	r3, [sp, #36]	; 0x24
 80096d0:	4bd1      	ldr	r3, [pc, #836]	; (8009a18 <__ieee754_pow+0x748>)
 80096d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80096d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80096da:	429c      	cmp	r4, r3
 80096dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096e0:	dd08      	ble.n	80096f4 <__ieee754_pow+0x424>
 80096e2:	4bce      	ldr	r3, [pc, #824]	; (8009a1c <__ieee754_pow+0x74c>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	f340 8163 	ble.w	80099b0 <__ieee754_pow+0x6e0>
 80096ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ec:	3301      	adds	r3, #1
 80096ee:	9309      	str	r3, [sp, #36]	; 0x24
 80096f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80096f4:	2400      	movs	r4, #0
 80096f6:	00e3      	lsls	r3, r4, #3
 80096f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80096fa:	4bc9      	ldr	r3, [pc, #804]	; (8009a20 <__ieee754_pow+0x750>)
 80096fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009700:	ed93 7b00 	vldr	d7, [r3]
 8009704:	4629      	mov	r1, r5
 8009706:	ec53 2b17 	vmov	r2, r3, d7
 800970a:	eeb0 8a47 	vmov.f32	s16, s14
 800970e:	eef0 8a67 	vmov.f32	s17, s15
 8009712:	4682      	mov	sl, r0
 8009714:	f7f6 fd5c 	bl	80001d0 <__aeabi_dsub>
 8009718:	4652      	mov	r2, sl
 800971a:	4606      	mov	r6, r0
 800971c:	460f      	mov	r7, r1
 800971e:	462b      	mov	r3, r5
 8009720:	ec51 0b18 	vmov	r0, r1, d8
 8009724:	f7f6 fd56 	bl	80001d4 <__adddf3>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	2000      	movs	r0, #0
 800972e:	49bd      	ldr	r1, [pc, #756]	; (8009a24 <__ieee754_pow+0x754>)
 8009730:	f7f7 f830 	bl	8000794 <__aeabi_ddiv>
 8009734:	ec41 0b19 	vmov	d9, r0, r1
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f6 fefe 	bl	8000540 <__aeabi_dmul>
 8009744:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800974c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009750:	2300      	movs	r3, #0
 8009752:	9304      	str	r3, [sp, #16]
 8009754:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009758:	46ab      	mov	fp, r5
 800975a:	106d      	asrs	r5, r5, #1
 800975c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009760:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009764:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009768:	2200      	movs	r2, #0
 800976a:	4640      	mov	r0, r8
 800976c:	4649      	mov	r1, r9
 800976e:	4614      	mov	r4, r2
 8009770:	461d      	mov	r5, r3
 8009772:	f7f6 fee5 	bl	8000540 <__aeabi_dmul>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4630      	mov	r0, r6
 800977c:	4639      	mov	r1, r7
 800977e:	f7f6 fd27 	bl	80001d0 <__aeabi_dsub>
 8009782:	ec53 2b18 	vmov	r2, r3, d8
 8009786:	4606      	mov	r6, r0
 8009788:	460f      	mov	r7, r1
 800978a:	4620      	mov	r0, r4
 800978c:	4629      	mov	r1, r5
 800978e:	f7f6 fd1f 	bl	80001d0 <__aeabi_dsub>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4650      	mov	r0, sl
 8009798:	4659      	mov	r1, fp
 800979a:	f7f6 fd19 	bl	80001d0 <__aeabi_dsub>
 800979e:	4642      	mov	r2, r8
 80097a0:	464b      	mov	r3, r9
 80097a2:	f7f6 fecd 	bl	8000540 <__aeabi_dmul>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4630      	mov	r0, r6
 80097ac:	4639      	mov	r1, r7
 80097ae:	f7f6 fd0f 	bl	80001d0 <__aeabi_dsub>
 80097b2:	ec53 2b19 	vmov	r2, r3, d9
 80097b6:	f7f6 fec3 	bl	8000540 <__aeabi_dmul>
 80097ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097be:	ec41 0b18 	vmov	d8, r0, r1
 80097c2:	4610      	mov	r0, r2
 80097c4:	4619      	mov	r1, r3
 80097c6:	f7f6 febb 	bl	8000540 <__aeabi_dmul>
 80097ca:	a37d      	add	r3, pc, #500	; (adr r3, 80099c0 <__ieee754_pow+0x6f0>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	4604      	mov	r4, r0
 80097d2:	460d      	mov	r5, r1
 80097d4:	f7f6 feb4 	bl	8000540 <__aeabi_dmul>
 80097d8:	a37b      	add	r3, pc, #492	; (adr r3, 80099c8 <__ieee754_pow+0x6f8>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fcf9 	bl	80001d4 <__adddf3>
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	f7f6 feab 	bl	8000540 <__aeabi_dmul>
 80097ea:	a379      	add	r3, pc, #484	; (adr r3, 80099d0 <__ieee754_pow+0x700>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7f6 fcf0 	bl	80001d4 <__adddf3>
 80097f4:	4622      	mov	r2, r4
 80097f6:	462b      	mov	r3, r5
 80097f8:	f7f6 fea2 	bl	8000540 <__aeabi_dmul>
 80097fc:	a376      	add	r3, pc, #472	; (adr r3, 80099d8 <__ieee754_pow+0x708>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f7f6 fce7 	bl	80001d4 <__adddf3>
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	f7f6 fe99 	bl	8000540 <__aeabi_dmul>
 800980e:	a374      	add	r3, pc, #464	; (adr r3, 80099e0 <__ieee754_pow+0x710>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fcde 	bl	80001d4 <__adddf3>
 8009818:	4622      	mov	r2, r4
 800981a:	462b      	mov	r3, r5
 800981c:	f7f6 fe90 	bl	8000540 <__aeabi_dmul>
 8009820:	a371      	add	r3, pc, #452	; (adr r3, 80099e8 <__ieee754_pow+0x718>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fcd5 	bl	80001d4 <__adddf3>
 800982a:	4622      	mov	r2, r4
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	462b      	mov	r3, r5
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f7f6 fe83 	bl	8000540 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f6 fe7d 	bl	8000540 <__aeabi_dmul>
 8009846:	4642      	mov	r2, r8
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	464b      	mov	r3, r9
 800984e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009852:	f7f6 fcbf 	bl	80001d4 <__adddf3>
 8009856:	ec53 2b18 	vmov	r2, r3, d8
 800985a:	f7f6 fe71 	bl	8000540 <__aeabi_dmul>
 800985e:	4622      	mov	r2, r4
 8009860:	462b      	mov	r3, r5
 8009862:	f7f6 fcb7 	bl	80001d4 <__adddf3>
 8009866:	4642      	mov	r2, r8
 8009868:	4682      	mov	sl, r0
 800986a:	468b      	mov	fp, r1
 800986c:	464b      	mov	r3, r9
 800986e:	4640      	mov	r0, r8
 8009870:	4649      	mov	r1, r9
 8009872:	f7f6 fe65 	bl	8000540 <__aeabi_dmul>
 8009876:	4b6c      	ldr	r3, [pc, #432]	; (8009a28 <__ieee754_pow+0x758>)
 8009878:	2200      	movs	r2, #0
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	f7f6 fca9 	bl	80001d4 <__adddf3>
 8009882:	4652      	mov	r2, sl
 8009884:	465b      	mov	r3, fp
 8009886:	f7f6 fca5 	bl	80001d4 <__adddf3>
 800988a:	9c04      	ldr	r4, [sp, #16]
 800988c:	460d      	mov	r5, r1
 800988e:	4622      	mov	r2, r4
 8009890:	460b      	mov	r3, r1
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	f7f6 fe53 	bl	8000540 <__aeabi_dmul>
 800989a:	4b63      	ldr	r3, [pc, #396]	; (8009a28 <__ieee754_pow+0x758>)
 800989c:	4680      	mov	r8, r0
 800989e:	4689      	mov	r9, r1
 80098a0:	2200      	movs	r2, #0
 80098a2:	4620      	mov	r0, r4
 80098a4:	4629      	mov	r1, r5
 80098a6:	f7f6 fc93 	bl	80001d0 <__aeabi_dsub>
 80098aa:	4632      	mov	r2, r6
 80098ac:	463b      	mov	r3, r7
 80098ae:	f7f6 fc8f 	bl	80001d0 <__aeabi_dsub>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4650      	mov	r0, sl
 80098b8:	4659      	mov	r1, fp
 80098ba:	f7f6 fc89 	bl	80001d0 <__aeabi_dsub>
 80098be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098c2:	f7f6 fe3d 	bl	8000540 <__aeabi_dmul>
 80098c6:	4622      	mov	r2, r4
 80098c8:	4606      	mov	r6, r0
 80098ca:	460f      	mov	r7, r1
 80098cc:	462b      	mov	r3, r5
 80098ce:	ec51 0b18 	vmov	r0, r1, d8
 80098d2:	f7f6 fe35 	bl	8000540 <__aeabi_dmul>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4630      	mov	r0, r6
 80098dc:	4639      	mov	r1, r7
 80098de:	f7f6 fc79 	bl	80001d4 <__adddf3>
 80098e2:	4606      	mov	r6, r0
 80098e4:	460f      	mov	r7, r1
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f6 fc71 	bl	80001d4 <__adddf3>
 80098f2:	9c04      	ldr	r4, [sp, #16]
 80098f4:	a33e      	add	r3, pc, #248	; (adr r3, 80099f0 <__ieee754_pow+0x720>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	4620      	mov	r0, r4
 80098fc:	460d      	mov	r5, r1
 80098fe:	f7f6 fe1f 	bl	8000540 <__aeabi_dmul>
 8009902:	4642      	mov	r2, r8
 8009904:	ec41 0b18 	vmov	d8, r0, r1
 8009908:	464b      	mov	r3, r9
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	f7f6 fc5f 	bl	80001d0 <__aeabi_dsub>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f6 fc59 	bl	80001d0 <__aeabi_dsub>
 800991e:	a336      	add	r3, pc, #216	; (adr r3, 80099f8 <__ieee754_pow+0x728>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f7f6 fe0c 	bl	8000540 <__aeabi_dmul>
 8009928:	a335      	add	r3, pc, #212	; (adr r3, 8009a00 <__ieee754_pow+0x730>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	4606      	mov	r6, r0
 8009930:	460f      	mov	r7, r1
 8009932:	4620      	mov	r0, r4
 8009934:	4629      	mov	r1, r5
 8009936:	f7f6 fe03 	bl	8000540 <__aeabi_dmul>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fc47 	bl	80001d4 <__adddf3>
 8009946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009948:	4b38      	ldr	r3, [pc, #224]	; (8009a2c <__ieee754_pow+0x75c>)
 800994a:	4413      	add	r3, r2
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fc40 	bl	80001d4 <__adddf3>
 8009954:	4682      	mov	sl, r0
 8009956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009958:	468b      	mov	fp, r1
 800995a:	f7f6 fd87 	bl	800046c <__aeabi_i2d>
 800995e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009960:	4b33      	ldr	r3, [pc, #204]	; (8009a30 <__ieee754_pow+0x760>)
 8009962:	4413      	add	r3, r2
 8009964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009968:	4606      	mov	r6, r0
 800996a:	460f      	mov	r7, r1
 800996c:	4652      	mov	r2, sl
 800996e:	465b      	mov	r3, fp
 8009970:	ec51 0b18 	vmov	r0, r1, d8
 8009974:	f7f6 fc2e 	bl	80001d4 <__adddf3>
 8009978:	4642      	mov	r2, r8
 800997a:	464b      	mov	r3, r9
 800997c:	f7f6 fc2a 	bl	80001d4 <__adddf3>
 8009980:	4632      	mov	r2, r6
 8009982:	463b      	mov	r3, r7
 8009984:	f7f6 fc26 	bl	80001d4 <__adddf3>
 8009988:	9c04      	ldr	r4, [sp, #16]
 800998a:	4632      	mov	r2, r6
 800998c:	463b      	mov	r3, r7
 800998e:	4620      	mov	r0, r4
 8009990:	460d      	mov	r5, r1
 8009992:	f7f6 fc1d 	bl	80001d0 <__aeabi_dsub>
 8009996:	4642      	mov	r2, r8
 8009998:	464b      	mov	r3, r9
 800999a:	f7f6 fc19 	bl	80001d0 <__aeabi_dsub>
 800999e:	ec53 2b18 	vmov	r2, r3, d8
 80099a2:	f7f6 fc15 	bl	80001d0 <__aeabi_dsub>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4650      	mov	r0, sl
 80099ac:	4659      	mov	r1, fp
 80099ae:	e606      	b.n	80095be <__ieee754_pow+0x2ee>
 80099b0:	2401      	movs	r4, #1
 80099b2:	e6a0      	b.n	80096f6 <__ieee754_pow+0x426>
 80099b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009a08 <__ieee754_pow+0x738>
 80099b8:	e60d      	b.n	80095d6 <__ieee754_pow+0x306>
 80099ba:	bf00      	nop
 80099bc:	f3af 8000 	nop.w
 80099c0:	4a454eef 	.word	0x4a454eef
 80099c4:	3fca7e28 	.word	0x3fca7e28
 80099c8:	93c9db65 	.word	0x93c9db65
 80099cc:	3fcd864a 	.word	0x3fcd864a
 80099d0:	a91d4101 	.word	0xa91d4101
 80099d4:	3fd17460 	.word	0x3fd17460
 80099d8:	518f264d 	.word	0x518f264d
 80099dc:	3fd55555 	.word	0x3fd55555
 80099e0:	db6fabff 	.word	0xdb6fabff
 80099e4:	3fdb6db6 	.word	0x3fdb6db6
 80099e8:	33333303 	.word	0x33333303
 80099ec:	3fe33333 	.word	0x3fe33333
 80099f0:	e0000000 	.word	0xe0000000
 80099f4:	3feec709 	.word	0x3feec709
 80099f8:	dc3a03fd 	.word	0xdc3a03fd
 80099fc:	3feec709 	.word	0x3feec709
 8009a00:	145b01f5 	.word	0x145b01f5
 8009a04:	be3e2fe0 	.word	0xbe3e2fe0
 8009a08:	00000000 	.word	0x00000000
 8009a0c:	3ff00000 	.word	0x3ff00000
 8009a10:	7ff00000 	.word	0x7ff00000
 8009a14:	43400000 	.word	0x43400000
 8009a18:	0003988e 	.word	0x0003988e
 8009a1c:	000bb679 	.word	0x000bb679
 8009a20:	0800a258 	.word	0x0800a258
 8009a24:	3ff00000 	.word	0x3ff00000
 8009a28:	40080000 	.word	0x40080000
 8009a2c:	0800a278 	.word	0x0800a278
 8009a30:	0800a268 	.word	0x0800a268
 8009a34:	a3b5      	add	r3, pc, #724	; (adr r3, 8009d0c <__ieee754_pow+0xa3c>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	f7f6 fbc9 	bl	80001d4 <__adddf3>
 8009a42:	4622      	mov	r2, r4
 8009a44:	ec41 0b1a 	vmov	d10, r0, r1
 8009a48:	462b      	mov	r3, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	f7f6 fbbf 	bl	80001d0 <__aeabi_dsub>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	ec51 0b1a 	vmov	r0, r1, d10
 8009a5a:	f7f7 f801 	bl	8000a60 <__aeabi_dcmpgt>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f47f adf8 	bne.w	8009654 <__ieee754_pow+0x384>
 8009a64:	4aa4      	ldr	r2, [pc, #656]	; (8009cf8 <__ieee754_pow+0xa28>)
 8009a66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	f340 810b 	ble.w	8009c86 <__ieee754_pow+0x9b6>
 8009a70:	151b      	asrs	r3, r3, #20
 8009a72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009a76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009a7a:	fa4a f303 	asr.w	r3, sl, r3
 8009a7e:	445b      	add	r3, fp
 8009a80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009a84:	4e9d      	ldr	r6, [pc, #628]	; (8009cfc <__ieee754_pow+0xa2c>)
 8009a86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009a8a:	4116      	asrs	r6, r2
 8009a8c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009a90:	2000      	movs	r0, #0
 8009a92:	ea23 0106 	bic.w	r1, r3, r6
 8009a96:	f1c2 0214 	rsb	r2, r2, #20
 8009a9a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009a9e:	fa4a fa02 	asr.w	sl, sl, r2
 8009aa2:	f1bb 0f00 	cmp.w	fp, #0
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4620      	mov	r0, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	bfb8      	it	lt
 8009ab0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ab4:	f7f6 fb8c 	bl	80001d0 <__aeabi_dsub>
 8009ab8:	ec41 0b19 	vmov	d9, r0, r1
 8009abc:	4642      	mov	r2, r8
 8009abe:	464b      	mov	r3, r9
 8009ac0:	ec51 0b19 	vmov	r0, r1, d9
 8009ac4:	f7f6 fb86 	bl	80001d4 <__adddf3>
 8009ac8:	2400      	movs	r4, #0
 8009aca:	a379      	add	r3, pc, #484	; (adr r3, 8009cb0 <__ieee754_pow+0x9e0>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	f7f6 fd34 	bl	8000540 <__aeabi_dmul>
 8009ad8:	ec53 2b19 	vmov	r2, r3, d9
 8009adc:	4606      	mov	r6, r0
 8009ade:	460f      	mov	r7, r1
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	f7f6 fb74 	bl	80001d0 <__aeabi_dsub>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4640      	mov	r0, r8
 8009aee:	4649      	mov	r1, r9
 8009af0:	f7f6 fb6e 	bl	80001d0 <__aeabi_dsub>
 8009af4:	a370      	add	r3, pc, #448	; (adr r3, 8009cb8 <__ieee754_pow+0x9e8>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fd21 	bl	8000540 <__aeabi_dmul>
 8009afe:	a370      	add	r3, pc, #448	; (adr r3, 8009cc0 <__ieee754_pow+0x9f0>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	4680      	mov	r8, r0
 8009b06:	4689      	mov	r9, r1
 8009b08:	4620      	mov	r0, r4
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7f6 fd18 	bl	8000540 <__aeabi_dmul>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4640      	mov	r0, r8
 8009b16:	4649      	mov	r1, r9
 8009b18:	f7f6 fb5c 	bl	80001d4 <__adddf3>
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	460d      	mov	r5, r1
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4630      	mov	r0, r6
 8009b26:	4639      	mov	r1, r7
 8009b28:	f7f6 fb54 	bl	80001d4 <__adddf3>
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	f7f6 fb4c 	bl	80001d0 <__aeabi_dsub>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	4629      	mov	r1, r5
 8009b40:	f7f6 fb46 	bl	80001d0 <__aeabi_dsub>
 8009b44:	4642      	mov	r2, r8
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f6 fcf6 	bl	8000540 <__aeabi_dmul>
 8009b54:	a35c      	add	r3, pc, #368	; (adr r3, 8009cc8 <__ieee754_pow+0x9f8>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	f7f6 fcef 	bl	8000540 <__aeabi_dmul>
 8009b62:	a35b      	add	r3, pc, #364	; (adr r3, 8009cd0 <__ieee754_pow+0xa00>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fb32 	bl	80001d0 <__aeabi_dsub>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	f7f6 fce6 	bl	8000540 <__aeabi_dmul>
 8009b74:	a358      	add	r3, pc, #352	; (adr r3, 8009cd8 <__ieee754_pow+0xa08>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb2b 	bl	80001d4 <__adddf3>
 8009b7e:	4622      	mov	r2, r4
 8009b80:	462b      	mov	r3, r5
 8009b82:	f7f6 fcdd 	bl	8000540 <__aeabi_dmul>
 8009b86:	a356      	add	r3, pc, #344	; (adr r3, 8009ce0 <__ieee754_pow+0xa10>)
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f7f6 fb20 	bl	80001d0 <__aeabi_dsub>
 8009b90:	4622      	mov	r2, r4
 8009b92:	462b      	mov	r3, r5
 8009b94:	f7f6 fcd4 	bl	8000540 <__aeabi_dmul>
 8009b98:	a353      	add	r3, pc, #332	; (adr r3, 8009ce8 <__ieee754_pow+0xa18>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 fb19 	bl	80001d4 <__adddf3>
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	f7f6 fccb 	bl	8000540 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fb0d 	bl	80001d0 <__aeabi_dsub>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	f7f6 fcbd 	bl	8000540 <__aeabi_dmul>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	ec41 0b19 	vmov	d9, r0, r1
 8009bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	f7f6 fafc 	bl	80001d0 <__aeabi_dsub>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	ec51 0b19 	vmov	r0, r1, d9
 8009be0:	f7f6 fdd8 	bl	8000794 <__aeabi_ddiv>
 8009be4:	4632      	mov	r2, r6
 8009be6:	4604      	mov	r4, r0
 8009be8:	460d      	mov	r5, r1
 8009bea:	463b      	mov	r3, r7
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f7f6 fca6 	bl	8000540 <__aeabi_dmul>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	f7f6 faec 	bl	80001d4 <__adddf3>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4620      	mov	r0, r4
 8009c02:	4629      	mov	r1, r5
 8009c04:	f7f6 fae4 	bl	80001d0 <__aeabi_dsub>
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	f7f6 fae0 	bl	80001d0 <__aeabi_dsub>
 8009c10:	460b      	mov	r3, r1
 8009c12:	4602      	mov	r2, r0
 8009c14:	493a      	ldr	r1, [pc, #232]	; (8009d00 <__ieee754_pow+0xa30>)
 8009c16:	2000      	movs	r0, #0
 8009c18:	f7f6 fada 	bl	80001d0 <__aeabi_dsub>
 8009c1c:	e9cd 0100 	strd	r0, r1, [sp]
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c2a:	da2f      	bge.n	8009c8c <__ieee754_pow+0x9bc>
 8009c2c:	4650      	mov	r0, sl
 8009c2e:	ed9d 0b00 	vldr	d0, [sp]
 8009c32:	f000 f9cd 	bl	8009fd0 <scalbn>
 8009c36:	ec51 0b10 	vmov	r0, r1, d0
 8009c3a:	ec53 2b18 	vmov	r2, r3, d8
 8009c3e:	f7ff bbe0 	b.w	8009402 <__ieee754_pow+0x132>
 8009c42:	4b30      	ldr	r3, [pc, #192]	; (8009d04 <__ieee754_pow+0xa34>)
 8009c44:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c48:	429e      	cmp	r6, r3
 8009c4a:	f77f af0b 	ble.w	8009a64 <__ieee754_pow+0x794>
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <__ieee754_pow+0xa38>)
 8009c50:	440b      	add	r3, r1
 8009c52:	4303      	orrs	r3, r0
 8009c54:	d00b      	beq.n	8009c6e <__ieee754_pow+0x99e>
 8009c56:	a326      	add	r3, pc, #152	; (adr r3, 8009cf0 <__ieee754_pow+0xa20>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	ec51 0b18 	vmov	r0, r1, d8
 8009c60:	f7f6 fc6e 	bl	8000540 <__aeabi_dmul>
 8009c64:	a322      	add	r3, pc, #136	; (adr r3, 8009cf0 <__ieee754_pow+0xa20>)
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f7ff bbca 	b.w	8009402 <__ieee754_pow+0x132>
 8009c6e:	4622      	mov	r2, r4
 8009c70:	462b      	mov	r3, r5
 8009c72:	f7f6 faad 	bl	80001d0 <__aeabi_dsub>
 8009c76:	4642      	mov	r2, r8
 8009c78:	464b      	mov	r3, r9
 8009c7a:	f7f6 fee7 	bl	8000a4c <__aeabi_dcmpge>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f43f aef0 	beq.w	8009a64 <__ieee754_pow+0x794>
 8009c84:	e7e7      	b.n	8009c56 <__ieee754_pow+0x986>
 8009c86:	f04f 0a00 	mov.w	sl, #0
 8009c8a:	e717      	b.n	8009abc <__ieee754_pow+0x7ec>
 8009c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c90:	4619      	mov	r1, r3
 8009c92:	e7d2      	b.n	8009c3a <__ieee754_pow+0x96a>
 8009c94:	491a      	ldr	r1, [pc, #104]	; (8009d00 <__ieee754_pow+0xa30>)
 8009c96:	2000      	movs	r0, #0
 8009c98:	f7ff bb9e 	b.w	80093d8 <__ieee754_pow+0x108>
 8009c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ca0:	f7ff bb9a 	b.w	80093d8 <__ieee754_pow+0x108>
 8009ca4:	9000      	str	r0, [sp, #0]
 8009ca6:	f7ff bb76 	b.w	8009396 <__ieee754_pow+0xc6>
 8009caa:	2100      	movs	r1, #0
 8009cac:	f7ff bb60 	b.w	8009370 <__ieee754_pow+0xa0>
 8009cb0:	00000000 	.word	0x00000000
 8009cb4:	3fe62e43 	.word	0x3fe62e43
 8009cb8:	fefa39ef 	.word	0xfefa39ef
 8009cbc:	3fe62e42 	.word	0x3fe62e42
 8009cc0:	0ca86c39 	.word	0x0ca86c39
 8009cc4:	be205c61 	.word	0xbe205c61
 8009cc8:	72bea4d0 	.word	0x72bea4d0
 8009ccc:	3e663769 	.word	0x3e663769
 8009cd0:	c5d26bf1 	.word	0xc5d26bf1
 8009cd4:	3ebbbd41 	.word	0x3ebbbd41
 8009cd8:	af25de2c 	.word	0xaf25de2c
 8009cdc:	3f11566a 	.word	0x3f11566a
 8009ce0:	16bebd93 	.word	0x16bebd93
 8009ce4:	3f66c16c 	.word	0x3f66c16c
 8009ce8:	5555553e 	.word	0x5555553e
 8009cec:	3fc55555 	.word	0x3fc55555
 8009cf0:	c2f8f359 	.word	0xc2f8f359
 8009cf4:	01a56e1f 	.word	0x01a56e1f
 8009cf8:	3fe00000 	.word	0x3fe00000
 8009cfc:	000fffff 	.word	0x000fffff
 8009d00:	3ff00000 	.word	0x3ff00000
 8009d04:	4090cbff 	.word	0x4090cbff
 8009d08:	3f6f3400 	.word	0x3f6f3400
 8009d0c:	652b82fe 	.word	0x652b82fe
 8009d10:	3c971547 	.word	0x3c971547

08009d14 <__ieee754_sqrt>:
 8009d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	ec55 4b10 	vmov	r4, r5, d0
 8009d1c:	4e56      	ldr	r6, [pc, #344]	; (8009e78 <__ieee754_sqrt+0x164>)
 8009d1e:	43ae      	bics	r6, r5
 8009d20:	ee10 0a10 	vmov	r0, s0
 8009d24:	ee10 3a10 	vmov	r3, s0
 8009d28:	4629      	mov	r1, r5
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	d110      	bne.n	8009d50 <__ieee754_sqrt+0x3c>
 8009d2e:	ee10 2a10 	vmov	r2, s0
 8009d32:	462b      	mov	r3, r5
 8009d34:	f7f6 fc04 	bl	8000540 <__aeabi_dmul>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fa48 	bl	80001d4 <__adddf3>
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	ec45 4b10 	vmov	d0, r4, r5
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	dc10      	bgt.n	8009d76 <__ieee754_sqrt+0x62>
 8009d54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d58:	4330      	orrs	r0, r6
 8009d5a:	d0f5      	beq.n	8009d48 <__ieee754_sqrt+0x34>
 8009d5c:	b15d      	cbz	r5, 8009d76 <__ieee754_sqrt+0x62>
 8009d5e:	ee10 2a10 	vmov	r2, s0
 8009d62:	462b      	mov	r3, r5
 8009d64:	ee10 0a10 	vmov	r0, s0
 8009d68:	f7f6 fa32 	bl	80001d0 <__aeabi_dsub>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	f7f6 fd10 	bl	8000794 <__aeabi_ddiv>
 8009d74:	e7e6      	b.n	8009d44 <__ieee754_sqrt+0x30>
 8009d76:	1509      	asrs	r1, r1, #20
 8009d78:	d076      	beq.n	8009e68 <__ieee754_sqrt+0x154>
 8009d7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009d7e:	07ce      	lsls	r6, r1, #31
 8009d80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009d84:	bf5e      	ittt	pl
 8009d86:	0fda      	lsrpl	r2, r3, #31
 8009d88:	005b      	lslpl	r3, r3, #1
 8009d8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009d8e:	0fda      	lsrs	r2, r3, #31
 8009d90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009d94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009d98:	2000      	movs	r0, #0
 8009d9a:	106d      	asrs	r5, r5, #1
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	f04f 0e16 	mov.w	lr, #22
 8009da2:	4684      	mov	ip, r0
 8009da4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009da8:	eb0c 0401 	add.w	r4, ip, r1
 8009dac:	4294      	cmp	r4, r2
 8009dae:	bfde      	ittt	le
 8009db0:	1b12      	suble	r2, r2, r4
 8009db2:	eb04 0c01 	addle.w	ip, r4, r1
 8009db6:	1840      	addle	r0, r0, r1
 8009db8:	0052      	lsls	r2, r2, #1
 8009dba:	f1be 0e01 	subs.w	lr, lr, #1
 8009dbe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009dc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009dc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dca:	d1ed      	bne.n	8009da8 <__ieee754_sqrt+0x94>
 8009dcc:	4671      	mov	r1, lr
 8009dce:	2720      	movs	r7, #32
 8009dd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009dd4:	4562      	cmp	r2, ip
 8009dd6:	eb04 060e 	add.w	r6, r4, lr
 8009dda:	dc02      	bgt.n	8009de2 <__ieee754_sqrt+0xce>
 8009ddc:	d113      	bne.n	8009e06 <__ieee754_sqrt+0xf2>
 8009dde:	429e      	cmp	r6, r3
 8009de0:	d811      	bhi.n	8009e06 <__ieee754_sqrt+0xf2>
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	eb06 0e04 	add.w	lr, r6, r4
 8009de8:	da43      	bge.n	8009e72 <__ieee754_sqrt+0x15e>
 8009dea:	f1be 0f00 	cmp.w	lr, #0
 8009dee:	db40      	blt.n	8009e72 <__ieee754_sqrt+0x15e>
 8009df0:	f10c 0801 	add.w	r8, ip, #1
 8009df4:	eba2 020c 	sub.w	r2, r2, ip
 8009df8:	429e      	cmp	r6, r3
 8009dfa:	bf88      	it	hi
 8009dfc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009e00:	1b9b      	subs	r3, r3, r6
 8009e02:	4421      	add	r1, r4
 8009e04:	46c4      	mov	ip, r8
 8009e06:	0052      	lsls	r2, r2, #1
 8009e08:	3f01      	subs	r7, #1
 8009e0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009e12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e16:	d1dd      	bne.n	8009dd4 <__ieee754_sqrt+0xc0>
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	d006      	beq.n	8009e2a <__ieee754_sqrt+0x116>
 8009e1c:	1c4c      	adds	r4, r1, #1
 8009e1e:	bf13      	iteet	ne
 8009e20:	3101      	addne	r1, #1
 8009e22:	3001      	addeq	r0, #1
 8009e24:	4639      	moveq	r1, r7
 8009e26:	f021 0101 	bicne.w	r1, r1, #1
 8009e2a:	1043      	asrs	r3, r0, #1
 8009e2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009e30:	0849      	lsrs	r1, r1, #1
 8009e32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009e36:	07c2      	lsls	r2, r0, #31
 8009e38:	bf48      	it	mi
 8009e3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009e3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009e42:	460c      	mov	r4, r1
 8009e44:	463d      	mov	r5, r7
 8009e46:	e77f      	b.n	8009d48 <__ieee754_sqrt+0x34>
 8009e48:	0ada      	lsrs	r2, r3, #11
 8009e4a:	3815      	subs	r0, #21
 8009e4c:	055b      	lsls	r3, r3, #21
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	d0fa      	beq.n	8009e48 <__ieee754_sqrt+0x134>
 8009e52:	02d7      	lsls	r7, r2, #11
 8009e54:	d50a      	bpl.n	8009e6c <__ieee754_sqrt+0x158>
 8009e56:	f1c1 0420 	rsb	r4, r1, #32
 8009e5a:	fa23 f404 	lsr.w	r4, r3, r4
 8009e5e:	1e4d      	subs	r5, r1, #1
 8009e60:	408b      	lsls	r3, r1
 8009e62:	4322      	orrs	r2, r4
 8009e64:	1b41      	subs	r1, r0, r5
 8009e66:	e788      	b.n	8009d7a <__ieee754_sqrt+0x66>
 8009e68:	4608      	mov	r0, r1
 8009e6a:	e7f0      	b.n	8009e4e <__ieee754_sqrt+0x13a>
 8009e6c:	0052      	lsls	r2, r2, #1
 8009e6e:	3101      	adds	r1, #1
 8009e70:	e7ef      	b.n	8009e52 <__ieee754_sqrt+0x13e>
 8009e72:	46e0      	mov	r8, ip
 8009e74:	e7be      	b.n	8009df4 <__ieee754_sqrt+0xe0>
 8009e76:	bf00      	nop
 8009e78:	7ff00000 	.word	0x7ff00000

08009e7c <fabs>:
 8009e7c:	ec51 0b10 	vmov	r0, r1, d0
 8009e80:	ee10 2a10 	vmov	r2, s0
 8009e84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e88:	ec43 2b10 	vmov	d0, r2, r3
 8009e8c:	4770      	bx	lr

08009e8e <finite>:
 8009e8e:	b082      	sub	sp, #8
 8009e90:	ed8d 0b00 	vstr	d0, [sp]
 8009e94:	9801      	ldr	r0, [sp, #4]
 8009e96:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009e9a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009e9e:	0fc0      	lsrs	r0, r0, #31
 8009ea0:	b002      	add	sp, #8
 8009ea2:	4770      	bx	lr
 8009ea4:	0000      	movs	r0, r0
	...

08009ea8 <nan>:
 8009ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009eb0 <nan+0x8>
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	00000000 	.word	0x00000000
 8009eb4:	7ff80000 	.word	0x7ff80000

08009eb8 <rint>:
 8009eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eba:	ec51 0b10 	vmov	r0, r1, d0
 8009ebe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ec2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009ec6:	2e13      	cmp	r6, #19
 8009ec8:	ee10 4a10 	vmov	r4, s0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009ed2:	dc58      	bgt.n	8009f86 <rint+0xce>
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	da2b      	bge.n	8009f30 <rint+0x78>
 8009ed8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009edc:	4302      	orrs	r2, r0
 8009ede:	d023      	beq.n	8009f28 <rint+0x70>
 8009ee0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009ee4:	4302      	orrs	r2, r0
 8009ee6:	4254      	negs	r4, r2
 8009ee8:	4314      	orrs	r4, r2
 8009eea:	0c4b      	lsrs	r3, r1, #17
 8009eec:	0b24      	lsrs	r4, r4, #12
 8009eee:	045b      	lsls	r3, r3, #17
 8009ef0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009ef4:	ea44 0103 	orr.w	r1, r4, r3
 8009ef8:	4b32      	ldr	r3, [pc, #200]	; (8009fc4 <rint+0x10c>)
 8009efa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009efe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4630      	mov	r0, r6
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f6 f963 	bl	80001d4 <__adddf3>
 8009f0e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f12:	463b      	mov	r3, r7
 8009f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f18:	4632      	mov	r2, r6
 8009f1a:	f7f6 f959 	bl	80001d0 <__aeabi_dsub>
 8009f1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009f26:	4639      	mov	r1, r7
 8009f28:	ec41 0b10 	vmov	d0, r0, r1
 8009f2c:	b003      	add	sp, #12
 8009f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f30:	4a25      	ldr	r2, [pc, #148]	; (8009fc8 <rint+0x110>)
 8009f32:	4132      	asrs	r2, r6
 8009f34:	ea01 0702 	and.w	r7, r1, r2
 8009f38:	4307      	orrs	r7, r0
 8009f3a:	d0f5      	beq.n	8009f28 <rint+0x70>
 8009f3c:	0851      	lsrs	r1, r2, #1
 8009f3e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8009f42:	4314      	orrs	r4, r2
 8009f44:	d00c      	beq.n	8009f60 <rint+0xa8>
 8009f46:	ea23 0201 	bic.w	r2, r3, r1
 8009f4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f4e:	2e13      	cmp	r6, #19
 8009f50:	fa43 f606 	asr.w	r6, r3, r6
 8009f54:	bf0c      	ite	eq
 8009f56:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009f5a:	2400      	movne	r4, #0
 8009f5c:	ea42 0306 	orr.w	r3, r2, r6
 8009f60:	4918      	ldr	r1, [pc, #96]	; (8009fc4 <rint+0x10c>)
 8009f62:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009f66:	4622      	mov	r2, r4
 8009f68:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f7f6 f930 	bl	80001d4 <__adddf3>
 8009f74:	e9cd 0100 	strd	r0, r1, [sp]
 8009f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	462b      	mov	r3, r5
 8009f80:	f7f6 f926 	bl	80001d0 <__aeabi_dsub>
 8009f84:	e7d0      	b.n	8009f28 <rint+0x70>
 8009f86:	2e33      	cmp	r6, #51	; 0x33
 8009f88:	dd07      	ble.n	8009f9a <rint+0xe2>
 8009f8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009f8e:	d1cb      	bne.n	8009f28 <rint+0x70>
 8009f90:	ee10 2a10 	vmov	r2, s0
 8009f94:	f7f6 f91e 	bl	80001d4 <__adddf3>
 8009f98:	e7c6      	b.n	8009f28 <rint+0x70>
 8009f9a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009f9e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009fa2:	40d6      	lsrs	r6, r2
 8009fa4:	4230      	tst	r0, r6
 8009fa6:	d0bf      	beq.n	8009f28 <rint+0x70>
 8009fa8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009fac:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009fb0:	bf1f      	itttt	ne
 8009fb2:	ea24 0101 	bicne.w	r1, r4, r1
 8009fb6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009fba:	fa44 f202 	asrne.w	r2, r4, r2
 8009fbe:	ea41 0402 	orrne.w	r4, r1, r2
 8009fc2:	e7cd      	b.n	8009f60 <rint+0xa8>
 8009fc4:	0800a288 	.word	0x0800a288
 8009fc8:	000fffff 	.word	0x000fffff
 8009fcc:	00000000 	.word	0x00000000

08009fd0 <scalbn>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	ec55 4b10 	vmov	r4, r5, d0
 8009fd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009fda:	4606      	mov	r6, r0
 8009fdc:	462b      	mov	r3, r5
 8009fde:	b99a      	cbnz	r2, 800a008 <scalbn+0x38>
 8009fe0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009fe4:	4323      	orrs	r3, r4
 8009fe6:	d036      	beq.n	800a056 <scalbn+0x86>
 8009fe8:	4b39      	ldr	r3, [pc, #228]	; (800a0d0 <scalbn+0x100>)
 8009fea:	4629      	mov	r1, r5
 8009fec:	ee10 0a10 	vmov	r0, s0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7f6 faa5 	bl	8000540 <__aeabi_dmul>
 8009ff6:	4b37      	ldr	r3, [pc, #220]	; (800a0d4 <scalbn+0x104>)
 8009ff8:	429e      	cmp	r6, r3
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	da10      	bge.n	800a022 <scalbn+0x52>
 800a000:	a32b      	add	r3, pc, #172	; (adr r3, 800a0b0 <scalbn+0xe0>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	e03a      	b.n	800a07e <scalbn+0xae>
 800a008:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a00c:	428a      	cmp	r2, r1
 800a00e:	d10c      	bne.n	800a02a <scalbn+0x5a>
 800a010:	ee10 2a10 	vmov	r2, s0
 800a014:	4620      	mov	r0, r4
 800a016:	4629      	mov	r1, r5
 800a018:	f7f6 f8dc 	bl	80001d4 <__adddf3>
 800a01c:	4604      	mov	r4, r0
 800a01e:	460d      	mov	r5, r1
 800a020:	e019      	b.n	800a056 <scalbn+0x86>
 800a022:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a026:	460b      	mov	r3, r1
 800a028:	3a36      	subs	r2, #54	; 0x36
 800a02a:	4432      	add	r2, r6
 800a02c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a030:	428a      	cmp	r2, r1
 800a032:	dd08      	ble.n	800a046 <scalbn+0x76>
 800a034:	2d00      	cmp	r5, #0
 800a036:	a120      	add	r1, pc, #128	; (adr r1, 800a0b8 <scalbn+0xe8>)
 800a038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a03c:	da1c      	bge.n	800a078 <scalbn+0xa8>
 800a03e:	a120      	add	r1, pc, #128	; (adr r1, 800a0c0 <scalbn+0xf0>)
 800a040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a044:	e018      	b.n	800a078 <scalbn+0xa8>
 800a046:	2a00      	cmp	r2, #0
 800a048:	dd08      	ble.n	800a05c <scalbn+0x8c>
 800a04a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a04e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a052:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a056:	ec45 4b10 	vmov	d0, r4, r5
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a060:	da19      	bge.n	800a096 <scalbn+0xc6>
 800a062:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a066:	429e      	cmp	r6, r3
 800a068:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a06c:	dd0a      	ble.n	800a084 <scalbn+0xb4>
 800a06e:	a112      	add	r1, pc, #72	; (adr r1, 800a0b8 <scalbn+0xe8>)
 800a070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1e2      	bne.n	800a03e <scalbn+0x6e>
 800a078:	a30f      	add	r3, pc, #60	; (adr r3, 800a0b8 <scalbn+0xe8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 fa5f 	bl	8000540 <__aeabi_dmul>
 800a082:	e7cb      	b.n	800a01c <scalbn+0x4c>
 800a084:	a10a      	add	r1, pc, #40	; (adr r1, 800a0b0 <scalbn+0xe0>)
 800a086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0b8      	beq.n	800a000 <scalbn+0x30>
 800a08e:	a10e      	add	r1, pc, #56	; (adr r1, 800a0c8 <scalbn+0xf8>)
 800a090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a094:	e7b4      	b.n	800a000 <scalbn+0x30>
 800a096:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a09a:	3236      	adds	r2, #54	; 0x36
 800a09c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <scalbn+0x108>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	e7e8      	b.n	800a07e <scalbn+0xae>
 800a0ac:	f3af 8000 	nop.w
 800a0b0:	c2f8f359 	.word	0xc2f8f359
 800a0b4:	01a56e1f 	.word	0x01a56e1f
 800a0b8:	8800759c 	.word	0x8800759c
 800a0bc:	7e37e43c 	.word	0x7e37e43c
 800a0c0:	8800759c 	.word	0x8800759c
 800a0c4:	fe37e43c 	.word	0xfe37e43c
 800a0c8:	c2f8f359 	.word	0xc2f8f359
 800a0cc:	81a56e1f 	.word	0x81a56e1f
 800a0d0:	43500000 	.word	0x43500000
 800a0d4:	ffff3cb0 	.word	0xffff3cb0
 800a0d8:	3c900000 	.word	0x3c900000

0800a0dc <__errno>:
 800a0dc:	4b01      	ldr	r3, [pc, #4]	; (800a0e4 <__errno+0x8>)
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20000180 	.word	0x20000180

0800a0e8 <__libc_init_array>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	4d0d      	ldr	r5, [pc, #52]	; (800a120 <__libc_init_array+0x38>)
 800a0ec:	4c0d      	ldr	r4, [pc, #52]	; (800a124 <__libc_init_array+0x3c>)
 800a0ee:	1b64      	subs	r4, r4, r5
 800a0f0:	10a4      	asrs	r4, r4, #2
 800a0f2:	2600      	movs	r6, #0
 800a0f4:	42a6      	cmp	r6, r4
 800a0f6:	d109      	bne.n	800a10c <__libc_init_array+0x24>
 800a0f8:	4d0b      	ldr	r5, [pc, #44]	; (800a128 <__libc_init_array+0x40>)
 800a0fa:	4c0c      	ldr	r4, [pc, #48]	; (800a12c <__libc_init_array+0x44>)
 800a0fc:	f000 f82e 	bl	800a15c <_init>
 800a100:	1b64      	subs	r4, r4, r5
 800a102:	10a4      	asrs	r4, r4, #2
 800a104:	2600      	movs	r6, #0
 800a106:	42a6      	cmp	r6, r4
 800a108:	d105      	bne.n	800a116 <__libc_init_array+0x2e>
 800a10a:	bd70      	pop	{r4, r5, r6, pc}
 800a10c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a110:	4798      	blx	r3
 800a112:	3601      	adds	r6, #1
 800a114:	e7ee      	b.n	800a0f4 <__libc_init_array+0xc>
 800a116:	f855 3b04 	ldr.w	r3, [r5], #4
 800a11a:	4798      	blx	r3
 800a11c:	3601      	adds	r6, #1
 800a11e:	e7f2      	b.n	800a106 <__libc_init_array+0x1e>
 800a120:	0800a2a0 	.word	0x0800a2a0
 800a124:	0800a2a0 	.word	0x0800a2a0
 800a128:	0800a2a0 	.word	0x0800a2a0
 800a12c:	0800a2a4 	.word	0x0800a2a4

0800a130 <memcpy>:
 800a130:	440a      	add	r2, r1
 800a132:	4291      	cmp	r1, r2
 800a134:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a138:	d100      	bne.n	800a13c <memcpy+0xc>
 800a13a:	4770      	bx	lr
 800a13c:	b510      	push	{r4, lr}
 800a13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a142:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a146:	4291      	cmp	r1, r2
 800a148:	d1f9      	bne.n	800a13e <memcpy+0xe>
 800a14a:	bd10      	pop	{r4, pc}

0800a14c <memset>:
 800a14c:	4402      	add	r2, r0
 800a14e:	4603      	mov	r3, r0
 800a150:	4293      	cmp	r3, r2
 800a152:	d100      	bne.n	800a156 <memset+0xa>
 800a154:	4770      	bx	lr
 800a156:	f803 1b01 	strb.w	r1, [r3], #1
 800a15a:	e7f9      	b.n	800a150 <memset+0x4>

0800a15c <_init>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	bf00      	nop
 800a160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a162:	bc08      	pop	{r3}
 800a164:	469e      	mov	lr, r3
 800a166:	4770      	bx	lr

0800a168 <_fini>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr
