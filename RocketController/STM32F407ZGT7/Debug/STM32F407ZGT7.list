
STM32F407ZGT7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800807c  0800807c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008084  08008084  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800808c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c60  20000180  0800820c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  0800820c  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d857  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ea  00000000  00000000  0003da07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000413f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00042878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b86  00000000  00000000  00043ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019642  00000000  00000000  00068726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1f14  00000000  00000000  00081d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056a4  00000000  00000000  00153cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fdc 	.word	0x08007fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007fdc 	.word	0x08007fdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <LSM6DS3_Init>:
	SPI_HandleTypeDef hspi;
	uint8_t ctrlx = 0;
	uint8_t ctrlg = 0;

	uint8_t LSM6DS3_Init(GPIO_TypeDef *GPIO_CS_let, uint16_t GPIO_CS_Num, SPI_HandleTypeDef spi, uint8_t Accel_G, uint8_t Gyro_R, uint8_t Freq)
	{
 80004c0:	b082      	sub	sp, #8
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b08a      	sub	sp, #40	; 0x28
 80004c6:	af02      	add	r7, sp, #8
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80004ce:	e880 000c 	stmia.w	r0, {r2, r3}
 80004d2:	460b      	mov	r3, r1
 80004d4:	807b      	strh	r3, [r7, #2]

		GPIO_CS = GPIO_CS_let;
 80004d6:	4a4e      	ldr	r2, [pc, #312]	; (8000610 <LSM6DS3_Init+0x150>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6013      	str	r3, [r2, #0]
		GPIO_PIN_CS = GPIO_CS_Num;
 80004dc:	4a4d      	ldr	r2, [pc, #308]	; (8000614 <LSM6DS3_Init+0x154>)
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	8013      	strh	r3, [r2, #0]
		hspi = spi;
 80004e2:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <LSM6DS3_Init+0x158>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ea:	2258      	movs	r2, #88	; 0x58
 80004ec:	4619      	mov	r1, r3
 80004ee:	f007 fd5f 	bl	8007fb0 <memcpy>
		ctrlx = Accel_G;
 80004f2:	4a4a      	ldr	r2, [pc, #296]	; (800061c <LSM6DS3_Init+0x15c>)
 80004f4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80004f8:	7013      	strb	r3, [r2, #0]
		ctrlg = Gyro_R;
 80004fa:	4a49      	ldr	r2, [pc, #292]	; (8000620 <LSM6DS3_Init+0x160>)
 80004fc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000500:	7013      	strb	r3, [r2, #0]

		uint8_t AccelMode = Accel_G | Freq;
 8000502:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8000506:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800050a:	4313      	orrs	r3, r2
 800050c:	77fb      	strb	r3, [r7, #31]
		uint8_t GyroMode = Gyro_R | Freq | 0x02;
 800050e:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000512:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000516:	4313      	orrs	r3, r2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	77bb      	strb	r3, [r7, #30]

		uint8_t AccelSetup[2] = {LSM6DSL_ACC_GYRO_CTRL1_XL, AccelMode};
 8000520:	2310      	movs	r3, #16
 8000522:	773b      	strb	r3, [r7, #28]
 8000524:	7ffb      	ldrb	r3, [r7, #31]
 8000526:	777b      	strb	r3, [r7, #29]
		uint8_t GyroSetup[2] = {LSM6DSL_ACC_GYRO_CTRL2_G, GyroMode};
 8000528:	2311      	movs	r3, #17
 800052a:	763b      	strb	r3, [r7, #24]
 800052c:	7fbb      	ldrb	r3, [r7, #30]
 800052e:	767b      	strb	r3, [r7, #25]

		uint8_t lsmSetup[6] = {LSM6DSL_ACC_GYRO_WHO_AM_I_REG | 0x80, 0x00,
 8000530:	4a3c      	ldr	r2, [pc, #240]	; (8000624 <LSM6DS3_Init+0x164>)
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	6018      	str	r0, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	8019      	strh	r1, [r3, #0]
								LSM6DSL_ACC_GYRO_CTRL1_XL | 0x80, 0x00,
								LSM6DSL_ACC_GYRO_CTRL2_G | 0x80, 0x00};

		uint8_t lsmCheck[6] = {0,0,0,0,0,0};
 8000540:	4a39      	ldr	r2, [pc, #228]	; (8000628 <LSM6DS3_Init+0x168>)
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054a:	6018      	str	r0, [r3, #0]
 800054c:	3304      	adds	r3, #4
 800054e:	8019      	strh	r1, [r3, #0]

		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8000550:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <LSM6DS3_Init+0x150>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <LSM6DS3_Init+0x154>)
 8000556:	8811      	ldrh	r1, [r2, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f8bc 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi, AccelSetup, 2, 1000);
 8000560:	f107 011c 	add.w	r1, r7, #28
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	2202      	movs	r2, #2
 800056a:	482b      	ldr	r0, [pc, #172]	; (8000618 <LSM6DS3_Init+0x158>)
 800056c:	f002 ff4d 	bl	800340a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <LSM6DS3_Init+0x150>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <LSM6DS3_Init+0x154>)
 8000576:	8811      	ldrh	r1, [r2, #0]
 8000578:	2201      	movs	r2, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 f8ac 	bl	80016d8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <LSM6DS3_Init+0x150>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a23      	ldr	r2, [pc, #140]	; (8000614 <LSM6DS3_Init+0x154>)
 8000586:	8811      	ldrh	r1, [r2, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f8a4 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi, GyroSetup, 2, 1000);
 8000590:	f107 0118 	add.w	r1, r7, #24
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	2202      	movs	r2, #2
 800059a:	481f      	ldr	r0, [pc, #124]	; (8000618 <LSM6DS3_Init+0x158>)
 800059c:	f002 ff35 	bl	800340a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <LSM6DS3_Init+0x150>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <LSM6DS3_Init+0x154>)
 80005a6:	8811      	ldrh	r1, [r2, #0]
 80005a8:	2201      	movs	r2, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f894 	bl	80016d8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <LSM6DS3_Init+0x150>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <LSM6DS3_Init+0x154>)
 80005b6:	8811      	ldrh	r1, [r2, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f88c 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi, lsmSetup, lsmCheck, 6, 1000);
 80005c0:	f107 0208 	add.w	r2, r7, #8
 80005c4:	f107 0110 	add.w	r1, r7, #16
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2306      	movs	r3, #6
 80005d0:	4811      	ldr	r0, [pc, #68]	; (8000618 <LSM6DS3_Init+0x158>)
 80005d2:	f003 f856 	bl	8003682 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <LSM6DS3_Init+0x150>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <LSM6DS3_Init+0x154>)
 80005dc:	8811      	ldrh	r1, [r2, #0]
 80005de:	2201      	movs	r2, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f879 	bl	80016d8 <HAL_GPIO_WritePin>


		if ((lsmCheck[1] == LSM6DSL_ACC_GYRO_WHO_AM_I) && (AccelMode == lsmCheck[2]) && (GyroMode == lsmCheck[3]))
 80005e6:	7a7b      	ldrb	r3, [r7, #9]
 80005e8:	2b6a      	cmp	r3, #106	; 0x6a
 80005ea:	d109      	bne.n	8000600 <LSM6DS3_Init+0x140>
 80005ec:	7abb      	ldrb	r3, [r7, #10]
 80005ee:	7ffa      	ldrb	r2, [r7, #31]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d105      	bne.n	8000600 <LSM6DS3_Init+0x140>
 80005f4:	7afb      	ldrb	r3, [r7, #11]
 80005f6:	7fba      	ldrb	r2, [r7, #30]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d101      	bne.n	8000600 <LSM6DS3_Init+0x140>
			return(HAL_OK);
 80005fc:	2300      	movs	r3, #0
 80005fe:	e000      	b.n	8000602 <LSM6DS3_Init+0x142>
		else
			return((uint8_t)1);
 8000600:	2301      	movs	r3, #1

	}
 8000602:	4618      	mov	r0, r3
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060c:	b002      	add	sp, #8
 800060e:	4770      	bx	lr
 8000610:	200003c4 	.word	0x200003c4
 8000614:	200003c0 	.word	0x200003c0
 8000618:	200003c8 	.word	0x200003c8
 800061c:	2000019c 	.word	0x2000019c
 8000620:	2000019d 	.word	0x2000019d
 8000624:	08007ff4 	.word	0x08007ff4
 8000628:	08007ffc 	.word	0x08007ffc

0800062c <LSM6DS3_AccReadXYZ>:

	void LSM6DS3_AccReadXYZ(vector3_t *data)
	{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af02      	add	r7, sp, #8
 8000632:	6078      	str	r0, [r7, #4]

	  float sensitivity = 0;
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

	  uint8_t DataReq[7] = {LSM6DSL_ACC_GYRO_OUTX_H_XL | 0x80, LSM6DSL_ACC_GYRO_OUTX_L_XL | 0x80,
 800063a:	4a58      	ldr	r2, [pc, #352]	; (800079c <LSM6DS3_AccReadXYZ+0x170>)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	6018      	str	r0, [r3, #0]
 8000646:	3304      	adds	r3, #4
 8000648:	8019      	strh	r1, [r3, #0]
 800064a:	3302      	adds	r3, #2
 800064c:	0c0a      	lsrs	r2, r1, #16
 800064e:	701a      	strb	r2, [r3, #0]
			  	  	  	  	LSM6DSL_ACC_GYRO_OUTY_H_XL | 0x80, LSM6DSL_ACC_GYRO_OUTY_L_XL | 0x80,
							LSM6DSL_ACC_GYRO_OUTZ_H_XL | 0x80, LSM6DSL_ACC_GYRO_OUTZ_L_XL | 0x80,
							0x00};
	  uint8_t OutBuf[7] = {0,0,0,0,0,0,0};
 8000650:	4a53      	ldr	r2, [pc, #332]	; (80007a0 <LSM6DS3_AccReadXYZ+0x174>)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	8019      	strh	r1, [r3, #0]
 8000660:	3302      	adds	r3, #2
 8000662:	0c0a      	lsrs	r2, r1, #16
 8000664:	701a      	strb	r2, [r3, #0]

	  int16_t DataX, DataY, DataZ;

	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 8000666:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <LSM6DS3_AccReadXYZ+0x178>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a4f      	ldr	r2, [pc, #316]	; (80007a8 <LSM6DS3_AccReadXYZ+0x17c>)
 800066c:	8811      	ldrh	r1, [r2, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f831 	bl	80016d8 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi, DataReq, OutBuf, 7, 1000);
 8000676:	f107 020c 	add.w	r2, r7, #12
 800067a:	f107 0114 	add.w	r1, r7, #20
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2307      	movs	r3, #7
 8000686:	4849      	ldr	r0, [pc, #292]	; (80007ac <LSM6DS3_AccReadXYZ+0x180>)
 8000688:	f002 fffb 	bl	8003682 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 800068c:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <LSM6DS3_AccReadXYZ+0x178>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a45      	ldr	r2, [pc, #276]	; (80007a8 <LSM6DS3_AccReadXYZ+0x17c>)
 8000692:	8811      	ldrh	r1, [r2, #0]
 8000694:	2201      	movs	r2, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f81e 	bl	80016d8 <HAL_GPIO_WritePin>

	  /* Normal mode */
	  /* Switch the sensitivity value set in the CRTL1_XL */
	  switch(ctrlx & 0x0C)
 800069c:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <LSM6DS3_AccReadXYZ+0x184>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f003 030c 	and.w	r3, r3, #12
 80006a4:	2b0c      	cmp	r3, #12
 80006a6:	d829      	bhi.n	80006fc <LSM6DS3_AccReadXYZ+0xd0>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <LSM6DS3_AccReadXYZ+0x84>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006e5 	.word	0x080006e5
 80006b4:	080006fd 	.word	0x080006fd
 80006b8:	080006fd 	.word	0x080006fd
 80006bc:	080006fd 	.word	0x080006fd
 80006c0:	080006f7 	.word	0x080006f7
 80006c4:	080006fd 	.word	0x080006fd
 80006c8:	080006fd 	.word	0x080006fd
 80006cc:	080006fd 	.word	0x080006fd
 80006d0:	080006eb 	.word	0x080006eb
 80006d4:	080006fd 	.word	0x080006fd
 80006d8:	080006fd 	.word	0x080006fd
 80006dc:	080006fd 	.word	0x080006fd
 80006e0:	080006f1 	.word	0x080006f1
	  {
	  case LSM6DSL_ACC_FULLSCALE_2G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <LSM6DS3_AccReadXYZ+0x188>)
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80006e8:	e008      	b.n	80006fc <LSM6DS3_AccReadXYZ+0xd0>
	  case LSM6DSL_ACC_FULLSCALE_4G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80006ea:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <LSM6DS3_AccReadXYZ+0x18c>)
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80006ee:	e005      	b.n	80006fc <LSM6DS3_AccReadXYZ+0xd0>
	  case LSM6DSL_ACC_FULLSCALE_8G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <LSM6DS3_AccReadXYZ+0x190>)
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80006f4:	e002      	b.n	80006fc <LSM6DS3_AccReadXYZ+0xd0>
	  case LSM6DSL_ACC_FULLSCALE_16G:
		sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <LSM6DS3_AccReadXYZ+0x194>)
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80006fa:	bf00      	nop
	  }

	  DataX = ((((uint16_t)OutBuf[1]) << 8) | (uint16_t)OutBuf[2]);
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	b21b      	sxth	r3, r3
 8000706:	4313      	orrs	r3, r2
 8000708:	847b      	strh	r3, [r7, #34]	; 0x22
	  DataY = ((((uint16_t)OutBuf[3]) << 8) | (uint16_t)OutBuf[4]);
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	7c3b      	ldrb	r3, [r7, #16]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	843b      	strh	r3, [r7, #32]
	  DataZ = ((((uint16_t)OutBuf[5]) << 8) | (uint16_t)OutBuf[6]);
 8000718:	7c7b      	ldrb	r3, [r7, #17]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	7cbb      	ldrb	r3, [r7, #18]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	83fb      	strh	r3, [r7, #30]


	  data->X = (int16_t)(DataX * sensitivity);
 8000726:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000732:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800073e:	ee17 3a90 	vmov	r3, s15
 8000742:	b21b      	sxth	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
	  data->Y = (int16_t)(DataY * sensitivity);
 800074a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000756:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800075a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000762:	ee17 3a90 	vmov	r3, s15
 8000766:	b21b      	sxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	605a      	str	r2, [r3, #4]
	  data->Z = (int16_t)(DataZ * sensitivity);
 800076e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800077a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800077e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000786:	ee17 3a90 	vmov	r3, s15
 800078a:	b21b      	sxth	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	609a      	str	r2, [r3, #8]

	}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08008004 	.word	0x08008004
 80007a0:	0800800c 	.word	0x0800800c
 80007a4:	200003c4 	.word	0x200003c4
 80007a8:	200003c0 	.word	0x200003c0
 80007ac:	200003c8 	.word	0x200003c8
 80007b0:	2000019c 	.word	0x2000019c
 80007b4:	3d79db23 	.word	0x3d79db23
 80007b8:	3df9db23 	.word	0x3df9db23
 80007bc:	3e79db23 	.word	0x3e79db23
 80007c0:	3ef9db23 	.word	0x3ef9db23

080007c4 <LSM6DS3_GyroReadXYZ>:

	void LSM6DS3_GyroReadXYZ(vector3_t *data)
	{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	6078      	str	r0, [r7, #4]

	  float sensitivity = 0;
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

	  uint8_t DataReq[7] = {LSM6DSL_ACC_GYRO_OUTX_H_G | 0x80, LSM6DSL_ACC_GYRO_OUTX_L_G | 0x80,
 80007d2:	4a58      	ldr	r2, [pc, #352]	; (8000934 <LSM6DS3_GyroReadXYZ+0x170>)
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007dc:	6018      	str	r0, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	8019      	strh	r1, [r3, #0]
 80007e2:	3302      	adds	r3, #2
 80007e4:	0c0a      	lsrs	r2, r1, #16
 80007e6:	701a      	strb	r2, [r3, #0]
			  	  	  	  	LSM6DSL_ACC_GYRO_OUTY_H_G | 0x80, LSM6DSL_ACC_GYRO_OUTY_L_G | 0x80,
							LSM6DSL_ACC_GYRO_OUTZ_H_G | 0x80, LSM6DSL_ACC_GYRO_OUTZ_L_G | 0x80,
							0x00};
	  uint8_t OutBuf[7] = {0,0,0,0,0,0,0};
 80007e8:	4a53      	ldr	r2, [pc, #332]	; (8000938 <LSM6DS3_GyroReadXYZ+0x174>)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f2:	6018      	str	r0, [r3, #0]
 80007f4:	3304      	adds	r3, #4
 80007f6:	8019      	strh	r1, [r3, #0]
 80007f8:	3302      	adds	r3, #2
 80007fa:	0c0a      	lsrs	r2, r1, #16
 80007fc:	701a      	strb	r2, [r3, #0]

	  int16_t DataX, DataY, DataZ;

	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_RESET);
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <LSM6DS3_GyroReadXYZ+0x178>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a4f      	ldr	r2, [pc, #316]	; (8000940 <LSM6DS3_GyroReadXYZ+0x17c>)
 8000804:	8811      	ldrh	r1, [r2, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f000 ff65 	bl	80016d8 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi, DataReq, OutBuf, 7, 1000);
 800080e:	f107 020c 	add.w	r2, r7, #12
 8000812:	f107 0114 	add.w	r1, r7, #20
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2307      	movs	r3, #7
 800081e:	4849      	ldr	r0, [pc, #292]	; (8000944 <LSM6DS3_GyroReadXYZ+0x180>)
 8000820:	f002 ff2f 	bl	8003682 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIO_CS, GPIO_PIN_CS, GPIO_PIN_SET);
 8000824:	4b45      	ldr	r3, [pc, #276]	; (800093c <LSM6DS3_GyroReadXYZ+0x178>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a45      	ldr	r2, [pc, #276]	; (8000940 <LSM6DS3_GyroReadXYZ+0x17c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2201      	movs	r2, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f000 ff52 	bl	80016d8 <HAL_GPIO_WritePin>

	  /* Normal mode */
	  /* Switch the sensitivity value set in the CRTL2_G */
	  switch(ctrlg & 0x0C)
 8000834:	4b44      	ldr	r3, [pc, #272]	; (8000948 <LSM6DS3_GyroReadXYZ+0x184>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	2b0c      	cmp	r3, #12
 800083e:	d829      	bhi.n	8000894 <LSM6DS3_GyroReadXYZ+0xd0>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <LSM6DS3_GyroReadXYZ+0x84>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800087d 	.word	0x0800087d
 800084c:	08000895 	.word	0x08000895
 8000850:	08000895 	.word	0x08000895
 8000854:	08000895 	.word	0x08000895
 8000858:	08000883 	.word	0x08000883
 800085c:	08000895 	.word	0x08000895
 8000860:	08000895 	.word	0x08000895
 8000864:	08000895 	.word	0x08000895
 8000868:	08000889 	.word	0x08000889
 800086c:	08000895 	.word	0x08000895
 8000870:	08000895 	.word	0x08000895
 8000874:	08000895 	.word	0x08000895
 8000878:	0800088f 	.word	0x0800088f
	  {
	  case LSM6DSL_GYRO_FS_245:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800087c:	4b33      	ldr	r3, [pc, #204]	; (800094c <LSM6DS3_GyroReadXYZ+0x188>)
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000880:	e008      	b.n	8000894 <LSM6DS3_GyroReadXYZ+0xd0>
	  case LSM6DSL_GYRO_FS_500:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <LSM6DS3_GyroReadXYZ+0x18c>)
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000886:	e005      	b.n	8000894 <LSM6DS3_GyroReadXYZ+0xd0>
	  case LSM6DSL_GYRO_FS_1000:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8000888:	4b32      	ldr	r3, [pc, #200]	; (8000954 <LSM6DS3_GyroReadXYZ+0x190>)
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800088c:	e002      	b.n	8000894 <LSM6DS3_GyroReadXYZ+0xd0>
	  case LSM6DSL_GYRO_FS_2000:
		sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <LSM6DS3_GyroReadXYZ+0x194>)
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000892:	bf00      	nop
	  }

	  DataX = ((((uint16_t)OutBuf[1]) << 8) | (uint16_t)OutBuf[2]);
 8000894:	7b7b      	ldrb	r3, [r7, #13]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	b21a      	sxth	r2, r3
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	847b      	strh	r3, [r7, #34]	; 0x22
	  DataY = ((((uint16_t)OutBuf[3]) << 8) | (uint16_t)OutBuf[4]);
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	7c3b      	ldrb	r3, [r7, #16]
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	843b      	strh	r3, [r7, #32]
	  DataZ = ((((uint16_t)OutBuf[5]) << 8) | (uint16_t)OutBuf[6]);
 80008b0:	7c7b      	ldrb	r3, [r7, #17]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	7cbb      	ldrb	r3, [r7, #18]
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	83fb      	strh	r3, [r7, #30]


	  data->X = (int16_t)(DataX * sensitivity);
 80008be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d6:	ee17 3a90 	vmov	r3, s15
 80008da:	b21b      	sxth	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
	  data->Y = (int16_t)(DataY * sensitivity);
 80008e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008e6:	ee07 3a90 	vmov	s15, r3
 80008ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fa:	ee17 3a90 	vmov	r3, s15
 80008fe:	b21b      	sxth	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	605a      	str	r2, [r3, #4]
	  data->Z = (int16_t)(DataZ * sensitivity);
 8000906:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000912:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800091e:	ee17 3a90 	vmov	r3, s15
 8000922:	b21b      	sxth	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	609a      	str	r2, [r3, #8]

	}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08008014 	.word	0x08008014
 8000938:	0800800c 	.word	0x0800800c
 800093c:	200003c4 	.word	0x200003c4
 8000940:	200003c0 	.word	0x200003c0
 8000944:	200003c8 	.word	0x200003c8
 8000948:	2000019d 	.word	0x2000019d
 800094c:	410c0000 	.word	0x410c0000
 8000950:	418c0000 	.word	0x418c0000
 8000954:	420c0000 	.word	0x420c0000
 8000958:	428c0000 	.word	0x428c0000

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b0b5      	sub	sp, #212	; 0xd4
 8000960:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fb75 	bl	8001050 <HAL_Init>
  //uint8_t byte = 0x55;

  vector3_t AccelData;
  vector3_t GyroData;

  bool Fire_Pyro1 = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  bool Pyro1_Fired = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  bool Fire_Pyro2 = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  bool Pyro2_Fired = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f879 	bl	8000a74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 f98f 	bl	8000ca4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000986:	f000 f8df 	bl	8000b48 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800098a:	f006 fdd3 	bl	8007534 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800098e:	f000 f911 	bl	8000bb4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000992:	f000 f95d 	bl	8000c50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	2120      	movs	r1, #32
 800099a:	4833      	ldr	r0, [pc, #204]	; (8000a68 <main+0x10c>)
 800099c:	f000 fe9c 	bl	80016d8 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);*/




  LSM6DS3_Init(GPIOC, GPIO_PIN_5, hspi1, LSM6DSL_ACC_FULLSCALE_16G, LSM6DSL_GYRO_FS_500, LSM6DSL_ODR_1660Hz );
 80009a0:	4c32      	ldr	r4, [pc, #200]	; (8000a6c <main+0x110>)
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	9316      	str	r3, [sp, #88]	; 0x58
 80009a6:	2304      	movs	r3, #4
 80009a8:	9315      	str	r3, [sp, #84]	; 0x54
 80009aa:	2304      	movs	r3, #4
 80009ac:	9314      	str	r3, [sp, #80]	; 0x50
 80009ae:	4668      	mov	r0, sp
 80009b0:	f104 0308 	add.w	r3, r4, #8
 80009b4:	2250      	movs	r2, #80	; 0x50
 80009b6:	4619      	mov	r1, r3
 80009b8:	f007 fafa 	bl	8007fb0 <memcpy>
 80009bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80009c0:	2120      	movs	r1, #32
 80009c2:	4829      	ldr	r0, [pc, #164]	; (8000a68 <main+0x10c>)
 80009c4:	f7ff fd7c 	bl	80004c0 <LSM6DS3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (Fire_Pyro1 == 1 && Pyro1_Fired != 1)
 80009c8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d019      	beq.n	8000a04 <main+0xa8>
 80009d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009d4:	f083 0301 	eor.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d012      	beq.n	8000a04 <main+0xa8>
		{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e4:	4822      	ldr	r0, [pc, #136]	; (8000a70 <main+0x114>)
 80009e6:	f000 fe77 	bl	80016d8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80009ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ee:	f000 fba1 	bl	8001134 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	481d      	ldr	r0, [pc, #116]	; (8000a70 <main+0x114>)
 80009fa:	f000 fe6d 	bl	80016d8 <HAL_GPIO_WritePin>
		  Pyro1_Fired = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		}

	  if (Fire_Pyro2 == 1 && Pyro2_Fired != 1)
 8000a04:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d019      	beq.n	8000a40 <main+0xe4>
 8000a0c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d012      	beq.n	8000a40 <main+0xe4>
		{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a20:	4813      	ldr	r0, [pc, #76]	; (8000a70 <main+0x114>)
 8000a22:	f000 fe59 	bl	80016d8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2a:	f000 fb83 	bl	8001134 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <main+0x114>)
 8000a36:	f000 fe4f 	bl	80016d8 <HAL_GPIO_WritePin>
		  Pyro2_Fired = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		}

	  LSM6DS3_AccReadXYZ(&AccelData);
 8000a40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fdf1 	bl	800062c <LSM6DS3_AccReadXYZ>
	  LSM6DS3_GyroReadXYZ(&GyroData);
 8000a4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff feb8 	bl	80007c4 <LSM6DS3_GyroReadXYZ>



	  //snprintf(uart_buf, sizeof(uart_buf), " ACCEL X: %d, Y: %d Z: %d | GYRO X: %d, Y: %d Z: %d    \r\n ", (AccelData.X), (AccelData.Y), (AccelData.Z), (GyroData.X), (GyroData.Y), (GyroData.Z));

	  CDC_Transmit_FS((uint8_t *) uart_buf, sizeof(uart_buf));
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2150      	movs	r1, #80	; 0x50
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 fe29 	bl	80076b0 <CDC_Transmit_FS>


	  //HAL_UART_Transmit(&huart1, &byte, 1, 100);
	  HAL_Delay(500);
 8000a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a62:	f000 fb67 	bl	8001134 <HAL_Delay>
	  if (Fire_Pyro1 == 1 && Pyro1_Fired != 1)
 8000a66:	e7af      	b.n	80009c8 <main+0x6c>
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	200004ac 	.word	0x200004ac
 8000a70:	40021000 	.word	0x40021000

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f007 faa2 	bl	8007fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0xcc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <SystemClock_Config+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemClock_Config+0xd0>)
 8000abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SystemClock_Config+0xd0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ae8:	2348      	movs	r3, #72	; 0x48
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000af0:	2303      	movs	r3, #3
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 ff89 	bl	8002a10 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b04:	f000 f952 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000b1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 f9ea 	bl	8002f00 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b32:	f000 f93b 	bl	8000dac <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <MX_SPI1_Init+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b9a:	f002 fbad 	bl	80032f8 <HAL_SPI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba4:	f000 f902 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200004ac 	.word	0x200004ac
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <MX_TIM4_Init+0x98>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000bf8:	f002 ffb0 	bl	8003b5c <HAL_TIM_Base_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f8d3 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000c14:	f002 fff1 	bl	8003bfa <HAL_TIM_ConfigClockSource>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 f8c5 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_TIM4_Init+0x94>)
 8000c30:	f003 f9e4 	bl	8003ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c3a:	f000 f8b7 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000420 	.word	0x20000420
 8000c4c:	40000800 	.word	0x40000800

08000c50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_USART1_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c88:	f003 fa34 	bl	80040f4 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f88b 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000468 	.word	0x20000468
 8000ca0:	40011000 	.word	0x40011000

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a37      	ldr	r2, [pc, #220]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a30      	ldr	r2, [pc, #192]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_GPIO_Init+0xfc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lsm6ds3_CS_GPIO_Port, lsm6ds3_CS_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <MX_GPIO_Init+0x100>)
 8000d4c:	f000 fcc4 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d56:	4814      	ldr	r0, [pc, #80]	; (8000da8 <MX_GPIO_Init+0x104>)
 8000d58:	f000 fcbe 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : lsm6ds3_CS_Pin */
  GPIO_InitStruct.Pin = lsm6ds3_CS_Pin;
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lsm6ds3_CS_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_GPIO_Init+0x100>)
 8000d74:	f000 fb14 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x104>)
 8000d92:	f000 fb05 	bl	80013a0 <HAL_GPIO_Init>

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40021000 	.word	0x40021000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();***
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x4>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12b      	bne.n	8000e7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e5e:	23e0      	movs	r3, #224	; 0xe0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_SPI_MspInit+0x8c>)
 8000e7a:	f000 fa91 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40000800 	.word	0x40000800
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f32:	23c0      	movs	r3, #192	; 0xc0
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x8c>)
 8000f4e:	f000 fa27 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  //HAL_SYSTICK_Callback();

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f89e 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <OTG_FS_IRQHandler+0x10>)
 8000fc2:	f000 fcf2 	bl	80019aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200019d8 	.word	0x200019d8

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SystemInit+0x28>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <SystemInit+0x28>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x28>)
 8000fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fea:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd3 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f006 ff9d 	bl	8007f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fc95 	bl	800095c <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001040:	0800808c 	.word	0x0800808c
  ldr r2, =_sbss
 8001044:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001048:	20001de0 	.word	0x20001de0

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f94f 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe96 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f967 	bl	8001386 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000504 	.word	0x20000504

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000504 	.word	0x20000504

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e16b      	b.n	8001694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 815a 	bne.w	800168e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80b4 	beq.w	800168e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b60      	ldr	r3, [pc, #384]	; (80016ac <HAL_GPIO_Init+0x30c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a5f      	ldr	r2, [pc, #380]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a5b      	ldr	r2, [pc, #364]	; (80016b0 <HAL_GPIO_Init+0x310>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x314>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d02b      	beq.n	80015c6 <HAL_GPIO_Init+0x226>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HAL_GPIO_Init+0x318>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x222>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_GPIO_Init+0x31c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x21e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4f      	ldr	r2, [pc, #316]	; (80016c0 <HAL_GPIO_Init+0x320>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_GPIO_Init+0x328>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4c      	ldr	r2, [pc, #304]	; (80016cc <HAL_GPIO_Init+0x32c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_GPIO_Init+0x330>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x20a>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x310>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_GPIO_Init+0x334>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160a:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae90 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800170a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170c:	b08f      	sub	sp, #60	; 0x3c
 800170e:	af0a      	add	r7, sp, #40	; 0x28
 8001710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e10f      	b.n	800193c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f006 f902 	bl	8007940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2203      	movs	r2, #3
 8001740:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fff5 	bl	800474a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	687e      	ldr	r6, [r7, #4]
 8001768:	466d      	mov	r5, sp
 800176a:	f106 0410 	add.w	r4, r6, #16
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800177a:	e885 0003 	stmia.w	r5, {r0, r1}
 800177e:	1d33      	adds	r3, r6, #4
 8001780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f002 fecc 	bl	8004520 <USB_CoreInit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0d0      	b.n	800193c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 ffe3 	bl	800476c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e04a      	b.n	8001842 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	333d      	adds	r3, #61	; 0x3d
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	333c      	adds	r3, #60	; 0x3c
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	b298      	uxth	r0, r3
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3342      	adds	r3, #66	; 0x42
 80017e8:	4602      	mov	r2, r0
 80017ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	333f      	adds	r3, #63	; 0x3f
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3344      	adds	r3, #68	; 0x44
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3348      	adds	r3, #72	; 0x48
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3350      	adds	r3, #80	; 0x50
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	3301      	adds	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3af      	bcc.n	80017ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e044      	b.n	80018dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3b5      	bcc.n	8001852 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	687e      	ldr	r6, [r7, #4]
 80018ee:	466d      	mov	r5, sp
 80018f0:	f106 0410 	add.w	r4, r6, #16
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001900:	e885 0003 	stmia.w	r5, {r0, r1}
 8001904:	1d33      	adds	r3, r6, #4
 8001906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f002 ff7b 	bl	8004804 <USB_DevInit>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e00d      	b.n	800193c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fff7 	bl	8005928 <USB_DevDisconnect>

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001944 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_PCD_Start+0x1c>
 800195c:	2302      	movs	r3, #2
 800195e:	e020      	b.n	80019a2 <HAL_PCD_Start+0x5e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b01      	cmp	r3, #1
 800196e:	d109      	bne.n	8001984 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fecd 	bl	8004728 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 ffa7 	bl	80058e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019aa:	b590      	push	{r4, r7, lr}
 80019ac:	b08d      	sub	sp, #52	; 0x34
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 f865 	bl	8005a90 <USB_GetMode>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 839d 	bne.w	8002108 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 ffc9 	bl	800596a <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8393 	beq.w	8002106 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 ffc0 	bl	800596a <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d107      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f002 0202 	and.w	r2, r2, #2
 8001a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 ffae 	bl	800596a <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d161      	bne.n	8001adc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0210 	bic.w	r2, r2, #16
 8001a26:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 020f 	and.w	r2, r3, #15
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	0c5b      	lsrs	r3, r3, #17
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d124      	bne.n	8001a9e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d035      	beq.n	8001acc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	6a38      	ldr	r0, [r7, #32]
 8001a74:	f003 fde5 	bl	8005642 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a84:	441a      	add	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a96:	441a      	add	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	619a      	str	r2, [r3, #24]
 8001a9c:	e016      	b.n	8001acc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	0c5b      	lsrs	r3, r3, #17
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d110      	bne.n	8001acc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6a38      	ldr	r0, [r7, #32]
 8001ab6:	f003 fdc4 	bl	8005642 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac6:	441a      	add	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0210 	orr.w	r2, r2, #16
 8001ada:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 ff42 	bl	800596a <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001af0:	d16e      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 ff48 	bl	8005990 <USB_ReadDevAllOutEpInterrupt>
 8001b00:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b02:	e062      	b.n	8001bca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d057      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 ff6d 	bl	80059f8 <USB_ReadDevOutEPInterrupt>
 8001b1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	015a      	lsls	r2, r3, #5
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b36:	461a      	mov	r2, r3
 8001b38:	2301      	movs	r3, #1
 8001b3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fdb0 	bl	80026a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 feaa 	bl	80028bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2310      	movs	r3, #16
 8001b82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d199      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fec8 	bl	800596a <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001be4:	f040 80c0 	bne.w	8001d68 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fee9 	bl	80059c4 <USB_ReadDevAllInEpInterrupt>
 8001bf2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bf8:	e0b2      	b.n	8001d60 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a7 	beq.w	8001d54 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 ff0f 	bl	8005a34 <USB_ReadDevInEPInterrupt>
 8001c16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d057      	beq.n	8001cd2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	2201      	movs	r2, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69f9      	ldr	r1, [r7, #28]
 8001c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c42:	4013      	ands	r3, r2
 8001c44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d132      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3348      	adds	r3, #72	; 0x48
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4403      	add	r3, r0
 8001c80:	3344      	adds	r3, #68	; 0x44
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4419      	add	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4403      	add	r3, r0
 8001c94:	3348      	adds	r3, #72	; 0x48
 8001c96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d113      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x31c>
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3350      	adds	r3, #80	; 0x50
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	f003 ff17 	bl	8005af4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f005 feb8 	bl	8007a42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2308      	movs	r3, #8
 8001cec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d04:	461a      	mov	r2, r3
 8001d06:	2310      	movs	r3, #16
 8001d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d20:	461a      	mov	r2, r3
 8001d22:	2340      	movs	r3, #64	; 0x40
 8001d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2302      	movs	r3, #2
 8001d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fc1b 	bl	800258a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f af49 	bne.w	8001bfa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fdfc 	bl	800596a <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d7c:	d122      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001da4:	2100      	movs	r1, #0
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fe26 	bl	80029f8 <HAL_PCDEx_LPM_Callback>
 8001dac:	e002      	b.n	8001db4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f005 febe 	bl	8007b30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fdce 	bl	800596a <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd8:	d112      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f005 fe7a 	bl	8007ae4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001dfe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fdb0 	bl	800596a <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e14:	f040 80c7 	bne.w	8001fa6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2110      	movs	r1, #16
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fe4a 	bl	8004acc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	e056      	b.n	8001eec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e62:	0151      	lsls	r1, r2, #5
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	440a      	add	r2, r1
 8001e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e70:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e82:	0151      	lsls	r1, r2, #5
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	440a      	add	r2, r1
 8001e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ea4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eb6:	0151      	lsls	r1, r2, #5
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	440a      	add	r2, r1
 8001ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ec0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ec4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed6:	0151      	lsls	r1, r2, #5
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	440a      	add	r2, r1
 8001edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ee0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ee4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	3301      	adds	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3a3      	bcc.n	8001e3e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f22:	f043 030b 	orr.w	r3, r3, #11
 8001f26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f38:	f043 030b 	orr.w	r3, r3, #11
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	e015      	b.n	8001f6c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f66:	f043 030b 	orr.w	r3, r3, #11
 8001f6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f90:	461a      	mov	r2, r3
 8001f92:	f003 fdaf 	bl	8005af4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 fcdd 	bl	800596a <USB_ReadInterrupts>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fba:	d124      	bne.n	8002006 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fd73 	bl	8005aac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fddb 	bl	8004b86 <USB_GetDevSpeed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681c      	ldr	r4, [r3, #0]
 8001fdc:	f001 f958 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f002 fafa 	bl	80045e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f005 fd4e 	bl	8007a92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002004:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fcad 	bl	800596a <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d10a      	bne.n	8002030 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f005 fd2b 	bl	8007a76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f002 0208 	and.w	r2, r2, #8
 800202e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fc98 	bl	800596a <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002044:	d10f      	bne.n	8002066 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f005 fd8d 	bl	8007b70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fc7d 	bl	800596a <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800207a:	d10f      	bne.n	800209c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f005 fd60 	bl	8007b4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800209a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fc62 	bl	800596a <USB_ReadInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d10a      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f005 fd6e 	bl	8007b94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fc4c 	bl	800596a <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d115      	bne.n	8002108 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f005 fd5e 	bl	8007bb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	e000      	b.n	8002108 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002106:	bf00      	nop
    }
  }
}
 8002108:	3734      	adds	r7, #52	; 0x34
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}

0800210e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_PCD_SetAddress+0x1a>
 8002124:	2302      	movs	r3, #2
 8002126:	e013      	b.n	8002150 <HAL_PCD_SetAddress+0x42>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fbaa 	bl	800589a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	70fb      	strb	r3, [r7, #3]
 800216a:	460b      	mov	r3, r1
 800216c:	803b      	strh	r3, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da0f      	bge.n	800219e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	3338      	adds	r3, #56	; 0x38
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	705a      	strb	r2, [r3, #1]
 800219c:	e00f      	b.n	80021be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021ca:	883a      	ldrh	r2, [r7, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	78ba      	ldrb	r2, [r7, #2]
 80021d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021e8:	78bb      	ldrb	r3, [r7, #2]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d102      	bne.n	80021f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_PCD_EP_Open+0xaa>
 80021fe:	2302      	movs	r3, #2
 8002200:	e00e      	b.n	8002220 <HAL_PCD_EP_Open+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fcdd 	bl	8004bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800221e:	7afb      	ldrb	r3, [r7, #11]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da0f      	bge.n	800225c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 020f 	and.w	r2, r3, #15
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3338      	adds	r3, #56	; 0x38
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	705a      	strb	r2, [r3, #1]
 800225a:	e00f      	b.n	800227c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	3304      	adds	r3, #4
 8002274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_PCD_EP_Close+0x6e>
 8002292:	2302      	movs	r3, #2
 8002294:	e00e      	b.n	80022b4 <HAL_PCD_EP_Close+0x8c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fd1b 	bl	8004ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	460b      	mov	r3, r1
 80022ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	f003 020f 	and.w	r2, r3, #15
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022fe:	7afb      	ldrb	r3, [r7, #11]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	b2da      	uxtb	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	f002 fff6 	bl	8005320 <USB_EP0StartXfer>
 8002334:	e008      	b.n	8002348 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6979      	ldr	r1, [r7, #20]
 8002344:	f002 fda8 	bl	8004e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002374:	681b      	ldr	r3, [r3, #0]
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3338      	adds	r3, #56	; 0x38
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023dc:	7afb      	ldrb	r3, [r7, #11]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	f002 ff94 	bl	8005320 <USB_EP0StartXfer>
 80023f8:	e008      	b.n	800240c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	6979      	ldr	r1, [r7, #20]
 8002408:	f002 fd46 	bl	8004e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d901      	bls.n	8002434 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e050      	b.n	80024d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002438:	2b00      	cmp	r3, #0
 800243a:	da0f      	bge.n	800245c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	3338      	adds	r3, #56	; 0x38
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	705a      	strb	r2, [r3, #1]
 800245a:	e00d      	b.n	8002478 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_EP_SetStall+0x82>
 8002494:	2302      	movs	r3, #2
 8002496:	e01e      	b.n	80024d6 <HAL_PCD_EP_SetStall+0xc0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 f923 	bl	80056f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	b2d9      	uxtb	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c6:	461a      	mov	r2, r3
 80024c8:	f003 fb14 	bl	8005af4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d901      	bls.n	80024fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e042      	b.n	8002582 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002500:	2b00      	cmp	r3, #0
 8002502:	da0f      	bge.n	8002524 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	3338      	adds	r3, #56	; 0x38
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	705a      	strb	r2, [r3, #1]
 8002522:	e00f      	b.n	8002544 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 020f 	and.w	r2, r3, #15
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_PCD_EP_ClrStall+0x86>
 8002560:	2302      	movs	r3, #2
 8002562:	e00e      	b.n	8002582 <HAL_PCD_EP_ClrStall+0xa4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 f92b 	bl	80057ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b08a      	sub	sp, #40	; 0x28
 800258e:	af02      	add	r7, sp, #8
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3338      	adds	r3, #56	; 0x38
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d901      	bls.n	80025c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e06c      	b.n	800269c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d902      	bls.n	80025de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3303      	adds	r3, #3
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025e6:	e02b      	b.n	8002640 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d902      	bls.n	8002604 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3303      	adds	r3, #3
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68d9      	ldr	r1, [r3, #12]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800261c:	b2db      	uxtb	r3, r3
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	4603      	mov	r3, r0
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f002 ffcf 	bl	80055c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	441a      	add	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	441a      	add	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	b29b      	uxth	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	429a      	cmp	r2, r3
 8002654:	d809      	bhi.n	800266a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800265e:	429a      	cmp	r2, r3
 8002660:	d203      	bcs.n	800266a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1be      	bne.n	80025e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	d811      	bhi.n	800269a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	2201      	movs	r2, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	43db      	mvns	r3, r3
 8002690:	6939      	ldr	r1, [r7, #16]
 8002692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002696:	4013      	ands	r3, r2
 8002698:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	333c      	adds	r3, #60	; 0x3c
 80026bc:	3304      	adds	r3, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80a0 	bne.w	800281c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d015      	beq.n	8002712 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a72      	ldr	r2, [pc, #456]	; (80028b4 <PCD_EP_OutXfrComplete_int+0x210>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	f240 80dd 	bls.w	80028aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80d7 	beq.w	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	6093      	str	r3, [r2, #8]
 8002710:	e0cb      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002728:	461a      	mov	r2, r3
 800272a:	2320      	movs	r3, #32
 800272c:	6093      	str	r3, [r2, #8]
 800272e:	e0bc      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 80b7 	bne.w	80028aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d90f      	bls.n	8002764 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275a:	461a      	mov	r2, r3
 800275c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002760:	6093      	str	r3, [r2, #8]
 8002762:	e0a2      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002776:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	440b      	add	r3, r1
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800278a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800279e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4419      	add	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4403      	add	r3, r0
 80027d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d114      	bne.n	800280e <PCD_EP_OutXfrComplete_int+0x16a>
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d108      	bne.n	800280e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002806:	461a      	mov	r2, r3
 8002808:	2101      	movs	r1, #1
 800280a:	f003 f973 	bl	8005af4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f005 f8f9 	bl	8007a0c <HAL_PCD_DataOutStageCallback>
 800281a:	e046      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d124      	bne.n	800286e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002840:	6093      	str	r3, [r2, #8]
 8002842:	e032      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2320      	movs	r3, #32
 800285e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f005 f8d0 	bl	8007a0c <HAL_PCD_DataOutStageCallback>
 800286c:	e01d      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d114      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002896:	461a      	mov	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f003 f92b 	bl	8005af4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f005 f8b1 	bl	8007a0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	4f54300a 	.word	0x4f54300a
 80028b8:	4f54310a 	.word	0x4f54310a

080028bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	333c      	adds	r3, #60	; 0x3c
 80028d4:	3304      	adds	r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d90e      	bls.n	8002910 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002908:	461a      	mov	r2, r3
 800290a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f005 f869 	bl	80079e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <PCD_EP_OutSetupPacket_int+0x88>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d90c      	bls.n	8002938 <PCD_EP_OutSetupPacket_int+0x7c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	f003 f8de 	bl	8005af4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	4f54300a 	.word	0x4f54300a

08002948 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	4613      	mov	r3, r2
 8002956:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002966:	883b      	ldrh	r3, [r7, #0]
 8002968:	0419      	lsls	r1, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	430a      	orrs	r2, r1
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
 8002974:	e028      	b.n	80029c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e00d      	b.n	80029a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	3340      	adds	r3, #64	; 0x40
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	3301      	adds	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d3ec      	bcc.n	800298a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029b0:	883b      	ldrh	r3, [r7, #0]
 80029b2:	0418      	lsls	r0, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	4302      	orrs	r2, r0
 80029c0:	3340      	adds	r3, #64	; 0x40
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e264      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d075      	beq.n	8002b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2e:	4ba3      	ldr	r3, [pc, #652]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d00c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4ba0      	ldr	r3, [pc, #640]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d112      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a46:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b99      	ldr	r3, [pc, #612]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05b      	beq.n	8002b18 <HAL_RCC_OscConfig+0x108>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d157      	bne.n	8002b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e23f      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d106      	bne.n	8002a84 <HAL_RCC_OscConfig+0x74>
 8002a76:	4b91      	ldr	r3, [pc, #580]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a90      	ldr	r2, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a8a      	ldr	r2, [pc, #552]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a87      	ldr	r2, [pc, #540]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a80      	ldr	r2, [pc, #512]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb28 	bl	800111c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fb24 	bl	800111c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e204      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xc0>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fb14 	bl	800111c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fb10 	bl	800111c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1f0      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0xe8>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e1c4      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4952      	ldr	r1, [pc, #328]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e03a      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x2b0>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fac9 	bl	800111c <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fac5 	bl	800111c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1a5      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4940      	ldr	r1, [pc, #256]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_OscConfig+0x2b0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe faa8 	bl	800111c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe faa4 	bl	800111c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e184      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x2b4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fa88 	bl	800111c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fa84 	bl	800111c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e164      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x200>
 8002c2e:	e015      	b.n	8002c5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x2b4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fa71 	bl	800111c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fa6d 	bl	800111c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e14d      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a0 	beq.w	8002daa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d121      	bne.n	8002cea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fa33 	bl	800111c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e011      	b.n	8002cde <HAL_RCC_OscConfig+0x2ce>
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
 8002cc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fa26 	bl	800111c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e106      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCC_OscConfig+0x4e4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002cf2:	4b81      	ldr	r3, [pc, #516]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a80      	ldr	r2, [pc, #512]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	e01c      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d08:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a7a      	ldr	r2, [pc, #488]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	4b78      	ldr	r3, [pc, #480]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a77      	ldr	r2, [pc, #476]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
 8002d22:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a74      	ldr	r2, [pc, #464]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a71      	ldr	r2, [pc, #452]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe f9eb 	bl	800111c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe f9e7 	bl	800111c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0c5      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCC_OscConfig+0x33a>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f9d5 	bl	800111c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe f9d1 	bl	800111c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0af      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	4b5a      	ldr	r3, [pc, #360]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 809b 	beq.w	8002eea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d05c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d141      	bne.n	8002e4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_RCC_OscConfig+0x4ec>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe f9a5 	bl	800111c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe f9a1 	bl	800111c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e081      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	019b      	lsls	r3, r3, #6
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	4937      	ldr	r1, [pc, #220]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <HAL_RCC_OscConfig+0x4ec>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe f97a 	bl	800111c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe f976 	bl	800111c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e056      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002e4a:	e04e      	b.n	8002eea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCC_OscConfig+0x4ec>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe f963 	bl	800111c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe f95f 	bl	800111c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e03f      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x44a>
 8002e78:	e037      	b.n	8002eea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e032      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d028      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d121      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d11a      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ebc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d111      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	42470060 	.word	0x42470060

08002f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0cc      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f14:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d90c      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	4b59      	ldr	r3, [pc, #356]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	494d      	ldr	r1, [pc, #308]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d044      	beq.n	8003020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d119      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e067      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 0203 	bic.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4934      	ldr	r1, [pc, #208]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f894 	bl	800111c <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff8:	f7fe f890 	bl	800111c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e04f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 020c 	and.w	r2, r3, #12
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	429a      	cmp	r2, r3
 800301e:	d1eb      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d20c      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e032      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4916      	ldr	r1, [pc, #88]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490e      	ldr	r1, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003086:	f000 f821 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490a      	ldr	r1, [pc, #40]	; (80030c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fff4 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08008064 	.word	0x08008064
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	2300      	movs	r3, #0
 80030de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e4:	4b67      	ldr	r3, [pc, #412]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d00d      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x40>
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	f200 80bd 	bhi.w	8003270 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x3a>
 80030fe:	e0b7      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003102:	60bb      	str	r3, [r7, #8]
       break;
 8003104:	e0b7      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003106:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003108:	60bb      	str	r3, [r7, #8]
      break;
 800310a:	e0b4      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800310c:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003114:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04d      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003122:	4b58      	ldr	r3, [pc, #352]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	461a      	mov	r2, r3
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	ea02 0800 	and.w	r8, r2, r0
 800313a:	ea03 0901 	and.w	r9, r3, r1
 800313e:	4640      	mov	r0, r8
 8003140:	4649      	mov	r1, r9
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	014b      	lsls	r3, r1, #5
 800314c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003150:	0142      	lsls	r2, r0, #5
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	ebb0 0008 	subs.w	r0, r0, r8
 800315a:	eb61 0109 	sbc.w	r1, r1, r9
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316c:	0182      	lsls	r2, r0, #6
 800316e:	1a12      	subs	r2, r2, r0
 8003170:	eb63 0301 	sbc.w	r3, r3, r1
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	00d9      	lsls	r1, r3, #3
 800317e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003182:	00d0      	lsls	r0, r2, #3
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	eb12 0208 	adds.w	r2, r2, r8
 800318c:	eb43 0309 	adc.w	r3, r3, r9
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0259      	lsls	r1, r3, #9
 800319a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800319e:	0250      	lsls	r0, r2, #9
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f7fd f80a 	bl	80001c8 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e04a      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b31      	ldr	r3, [pc, #196]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	461a      	mov	r2, r3
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	ea02 0400 	and.w	r4, r2, r0
 80031d6:	ea03 0501 	and.w	r5, r3, r1
 80031da:	4620      	mov	r0, r4
 80031dc:	4629      	mov	r1, r5
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	014b      	lsls	r3, r1, #5
 80031e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031ec:	0142      	lsls	r2, r0, #5
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	1b00      	subs	r0, r0, r4
 80031f4:	eb61 0105 	sbc.w	r1, r1, r5
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	018b      	lsls	r3, r1, #6
 8003202:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003206:	0182      	lsls	r2, r0, #6
 8003208:	1a12      	subs	r2, r2, r0
 800320a:	eb63 0301 	sbc.w	r3, r3, r1
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	00d9      	lsls	r1, r3, #3
 8003218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800321c:	00d0      	lsls	r0, r2, #3
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	1912      	adds	r2, r2, r4
 8003224:	eb45 0303 	adc.w	r3, r5, r3
 8003228:	f04f 0000 	mov.w	r0, #0
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	0299      	lsls	r1, r3, #10
 8003232:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003236:	0290      	lsls	r0, r2, #10
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	f7fc ffbe 	bl	80001c8 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	3301      	adds	r3, #1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	60bb      	str	r3, [r7, #8]
      break;
 800326e:	e002      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003272:	60bb      	str	r3, [r7, #8]
      break;
 8003274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003276:	68bb      	ldr	r3, [r7, #8]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000000 	.word	0x20000000

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032ac:	f7ff fff0 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0a9b      	lsrs	r3, r3, #10
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4903      	ldr	r1, [pc, #12]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	08008074 	.word	0x08008074

080032d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d4:	f7ff ffdc 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0b5b      	lsrs	r3, r3, #13
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08008074 	.word	0x08008074

080032f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07b      	b.n	8003402 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331a:	d009      	beq.n	8003330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
 8003322:	e005      	b.n	8003330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fd5a 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003366:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	ea42 0103 	orr.w	r1, r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0104 	and.w	r1, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0210 	and.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b088      	sub	sp, #32
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_SPI_Transmit+0x22>
 8003428:	2302      	movs	r3, #2
 800342a:	e126      	b.n	800367a <HAL_SPI_Transmit+0x270>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003434:	f7fd fe72 	bl	800111c <HAL_GetTick>
 8003438:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800344a:	2302      	movs	r3, #2
 800344c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800344e:	e10b      	b.n	8003668 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_SPI_Transmit+0x52>
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003460:	e102      	b.n	8003668 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2203      	movs	r2, #3
 8003466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	d10f      	bne.n	80034ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d007      	beq.n	80034e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f0:	d14b      	bne.n	800358a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Transmit+0xf6>
 80034fa:	8afb      	ldrh	r3, [r7, #22]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d13e      	bne.n	800357e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003524:	e02b      	b.n	800357e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d112      	bne.n	800355a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	86da      	strh	r2, [r3, #54]	; 0x36
 8003558:	e011      	b.n	800357e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800355a:	f7fd fddf 	bl	800111c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d803      	bhi.n	8003572 <HAL_SPI_Transmit+0x168>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003570:	d102      	bne.n	8003578 <HAL_SPI_Transmit+0x16e>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800357c:	e074      	b.n	8003668 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ce      	bne.n	8003526 <HAL_SPI_Transmit+0x11c>
 8003588:	e04c      	b.n	8003624 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0x18e>
 8003592:	8afb      	ldrh	r3, [r7, #22]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d140      	bne.n	800361a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035be:	e02c      	b.n	800361a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d113      	bne.n	80035f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80035f4:	e011      	b.n	800361a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f6:	f7fd fd91 	bl	800111c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d803      	bhi.n	800360e <HAL_SPI_Transmit+0x204>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360c:	d102      	bne.n	8003614 <HAL_SPI_Transmit+0x20a>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003618:	e026      	b.n	8003668 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1cd      	bne.n	80035c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa55 	bl	8003ad8 <SPI_EndRxTxTransaction>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e000      	b.n	8003668 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003678:	7ffb      	ldrb	r3, [r7, #31]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08c      	sub	sp, #48	; 0x30
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x26>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e18a      	b.n	80039be <HAL_SPI_TransmitReceive+0x33c>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b0:	f7fd fd34 	bl	800111c <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d00f      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x70>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d8:	d107      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x68>
 80036e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d003      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036f0:	e15b      	b.n	80039aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x82>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x82>
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800370a:	e14e      	b.n	80039aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b04      	cmp	r3, #4
 8003716:	d003      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2205      	movs	r2, #5
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d007      	beq.n	8003774 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377c:	d178      	bne.n	8003870 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_SPI_TransmitReceive+0x10a>
 8003786:	8b7b      	ldrh	r3, [r7, #26]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d166      	bne.n	800385a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b0:	e053      	b.n	800385a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d11b      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x176>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x176>
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d113      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d119      	bne.n	800383a <HAL_SPI_TransmitReceive+0x1b8>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d014      	beq.n	800383a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	b292      	uxth	r2, r2
 800381c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	1c9a      	adds	r2, r3, #2
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003836:	2301      	movs	r3, #1
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800383a:	f7fd fc6f 	bl	800111c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003846:	429a      	cmp	r2, r3
 8003848:	d807      	bhi.n	800385a <HAL_SPI_TransmitReceive+0x1d8>
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003850:	d003      	beq.n	800385a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003858:	e0a7      	b.n	80039aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1a6      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x130>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1a1      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x130>
 800386e:	e07c      	b.n	800396a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_TransmitReceive+0x1fc>
 8003878:	8b7b      	ldrh	r3, [r7, #26]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d16b      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a4:	e057      	b.n	8003956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d11c      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x26c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x26c>
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d114      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d119      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x2ae>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d014      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800392c:	2301      	movs	r3, #1
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003930:	f7fd fbf4 	bl	800111c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393c:	429a      	cmp	r2, r3
 800393e:	d803      	bhi.n	8003948 <HAL_SPI_TransmitReceive+0x2c6>
 8003940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003946:	d102      	bne.n	800394e <HAL_SPI_TransmitReceive+0x2cc>
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003954:	e029      	b.n	80039aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1a2      	bne.n	80038a6 <HAL_SPI_TransmitReceive+0x224>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d19d      	bne.n	80038a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f8b2 	bl	8003ad8 <SPI_EndRxTxTransaction>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003986:	e010      	b.n	80039aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	e000      	b.n	80039aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3730      	adds	r7, #48	; 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d8:	f7fd fba0 	bl	800111c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e8:	f7fd fb98 	bl	800111c <HAL_GetTick>
 80039ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	015b      	lsls	r3, r3, #5
 80039f4:	0d1b      	lsrs	r3, r3, #20
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039fe:	e054      	b.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a06:	d050      	beq.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a08:	f7fd fb88 	bl	800111c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d902      	bls.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d13d      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a36:	d111      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a40:	d004      	beq.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d107      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a64:	d10f      	bne.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e017      	b.n	8003aca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d19b      	bne.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <SPI_EndRxTxTransaction+0x7c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <SPI_EndRxTxTransaction+0x80>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0d5b      	lsrs	r3, r3, #21
 8003af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b02:	d112      	bne.n	8003b2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ff5a 	bl	80039c8 <SPI_WaitFlagStateUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e00f      	b.n	8003b4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d0f2      	beq.n	8003b2a <SPI_EndRxTxTransaction+0x52>
 8003b44:	e000      	b.n	8003b48 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b46:	bf00      	nop
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000
 8003b58:	165e9f81 	.word	0x165e9f81

08003b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e041      	b.n	8003bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f986 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 f8f4 	bl	8003d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_TIM_ConfigClockSource+0x1c>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e0b4      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x186>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	d03e      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xd4>
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	f200 8087 	bhi.w	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	f000 8086 	beq.w	8003d6c <HAL_TIM_ConfigClockSource+0x172>
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c64:	d87f      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c66:	2b70      	cmp	r3, #112	; 0x70
 8003c68:	d01a      	beq.n	8003ca0 <HAL_TIM_ConfigClockSource+0xa6>
 8003c6a:	2b70      	cmp	r3, #112	; 0x70
 8003c6c:	d87b      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6e:	2b60      	cmp	r3, #96	; 0x60
 8003c70:	d050      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0x11a>
 8003c72:	2b60      	cmp	r3, #96	; 0x60
 8003c74:	d877      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c76:	2b50      	cmp	r3, #80	; 0x50
 8003c78:	d03c      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0xfa>
 8003c7a:	2b50      	cmp	r3, #80	; 0x50
 8003c7c:	d873      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d058      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0x13a>
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d86f      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c86:	2b30      	cmp	r3, #48	; 0x30
 8003c88:	d064      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8a:	2b30      	cmp	r3, #48	; 0x30
 8003c8c:	d86b      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d060      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x15a>
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d867      	bhi.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d05c      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x15a>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d05a      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0x15a>
 8003c9e:	e062      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f000 f984 	bl	8003fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e04f      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 f96d 	bl	8003fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf0:	609a      	str	r2, [r3, #8]
      break;
 8003cf2:	e03c      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f000 f8e1 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2150      	movs	r1, #80	; 0x50
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f93a 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d12:	e02c      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	461a      	mov	r2, r3
 8003d22:	f000 f900 	bl	8003f26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2160      	movs	r1, #96	; 0x60
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f92a 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d32:	e01c      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f000 f8c1 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f91a 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d52:	e00c      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 f911 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6a:	e000      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3d      	ldr	r2, [pc, #244]	; (8003ea0 <TIM_Base_SetConfig+0x118>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <TIM_Base_SetConfig+0x11c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a3b      	ldr	r2, [pc, #236]	; (8003ea8 <TIM_Base_SetConfig+0x120>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3a      	ldr	r2, [pc, #232]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d027      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <TIM_Base_SetConfig+0x118>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d023      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <TIM_Base_SetConfig+0x11c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <TIM_Base_SetConfig+0x120>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a29      	ldr	r2, [pc, #164]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <TIM_Base_SetConfig+0x128>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <TIM_Base_SetConfig+0x12c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <TIM_Base_SetConfig+0x130>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <TIM_Base_SetConfig+0x134>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <TIM_Base_SetConfig+0x138>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <TIM_Base_SetConfig+0x13c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0xf8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d103      	bne.n	8003e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	615a      	str	r2, [r3, #20]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800
 8003ebc:	40001800 	.word	0x40001800
 8003ec0:	40001c00 	.word	0x40001c00
 8003ec4:	40002000 	.word	0x40002000

08003ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f023 030a 	bic.w	r3, r3, #10
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0210 	bic.w	r2, r3, #16
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f043 0307 	orr.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004010:	2302      	movs	r3, #2
 8004012:	e05a      	b.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d01d      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10c      	bne.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40010400 	.word	0x40010400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40001800 	.word	0x40001800

080040f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e03f      	b.n	8004186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fedc 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	; 0x24
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f829 	bl	8004190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800414c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800416c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	b09f      	sub	sp, #124	; 0x7c
 8004196:	af00      	add	r7, sp, #0
 8004198:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	68d9      	ldr	r1, [r3, #12]
 80041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	ea40 0301 	orr.w	r3, r0, r1
 80041b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041d4:	f021 010c 	bic.w	r1, r1, #12
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041de:	430b      	orrs	r3, r1
 80041e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ee:	6999      	ldr	r1, [r3, #24]
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	ea40 0301 	orr.w	r3, r0, r1
 80041f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4bc5      	ldr	r3, [pc, #788]	; (8004514 <UART_SetConfig+0x384>)
 8004200:	429a      	cmp	r2, r3
 8004202:	d004      	beq.n	800420e <UART_SetConfig+0x7e>
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4bc3      	ldr	r3, [pc, #780]	; (8004518 <UART_SetConfig+0x388>)
 800420a:	429a      	cmp	r2, r3
 800420c:	d103      	bne.n	8004216 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800420e:	f7ff f85f 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8004212:	6778      	str	r0, [r7, #116]	; 0x74
 8004214:	e002      	b.n	800421c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7ff f847 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 800421a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	f040 80b6 	bne.w	8004394 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422a:	461c      	mov	r4, r3
 800422c:	f04f 0500 	mov.w	r5, #0
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1891      	adds	r1, r2, r2
 8004236:	6439      	str	r1, [r7, #64]	; 0x40
 8004238:	415b      	adcs	r3, r3
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004240:	1912      	adds	r2, r2, r4
 8004242:	eb45 0303 	adc.w	r3, r5, r3
 8004246:	f04f 0000 	mov.w	r0, #0
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	00d9      	lsls	r1, r3, #3
 8004250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004254:	00d0      	lsls	r0, r2, #3
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	1911      	adds	r1, r2, r4
 800425c:	6639      	str	r1, [r7, #96]	; 0x60
 800425e:	416b      	adcs	r3, r5
 8004260:	667b      	str	r3, [r7, #100]	; 0x64
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	1891      	adds	r1, r2, r2
 800426e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004270:	415b      	adcs	r3, r3
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004278:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800427c:	f7fb ffa4 	bl	80001c8 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4ba5      	ldr	r3, [pc, #660]	; (800451c <UART_SetConfig+0x38c>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011e      	lsls	r6, r3, #4
 800428e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004290:	461c      	mov	r4, r3
 8004292:	f04f 0500 	mov.w	r5, #0
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	1891      	adds	r1, r2, r2
 800429c:	6339      	str	r1, [r7, #48]	; 0x30
 800429e:	415b      	adcs	r3, r3
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
 80042a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042a6:	1912      	adds	r2, r2, r4
 80042a8:	eb45 0303 	adc.w	r3, r5, r3
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	00d9      	lsls	r1, r3, #3
 80042b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ba:	00d0      	lsls	r0, r2, #3
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	1911      	adds	r1, r2, r4
 80042c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80042c4:	416b      	adcs	r3, r5
 80042c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80042d6:	415b      	adcs	r3, r3
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042e2:	f7fb ff71 	bl	80001c8 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4b8c      	ldr	r3, [pc, #560]	; (800451c <UART_SetConfig+0x38c>)
 80042ec:	fba3 1302 	umull	r1, r3, r3, r2
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	2164      	movs	r1, #100	; 0x64
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	3332      	adds	r3, #50	; 0x32
 80042fe:	4a87      	ldr	r2, [pc, #540]	; (800451c <UART_SetConfig+0x38c>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430c:	441e      	add	r6, r3
 800430e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004310:	4618      	mov	r0, r3
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	1894      	adds	r4, r2, r2
 800431c:	623c      	str	r4, [r7, #32]
 800431e:	415b      	adcs	r3, r3
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004326:	1812      	adds	r2, r2, r0
 8004328:	eb41 0303 	adc.w	r3, r1, r3
 800432c:	f04f 0400 	mov.w	r4, #0
 8004330:	f04f 0500 	mov.w	r5, #0
 8004334:	00dd      	lsls	r5, r3, #3
 8004336:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800433a:	00d4      	lsls	r4, r2, #3
 800433c:	4622      	mov	r2, r4
 800433e:	462b      	mov	r3, r5
 8004340:	1814      	adds	r4, r2, r0
 8004342:	653c      	str	r4, [r7, #80]	; 0x50
 8004344:	414b      	adcs	r3, r1
 8004346:	657b      	str	r3, [r7, #84]	; 0x54
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	1891      	adds	r1, r2, r2
 8004354:	61b9      	str	r1, [r7, #24]
 8004356:	415b      	adcs	r3, r3
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004362:	f7fb ff31 	bl	80001c8 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <UART_SetConfig+0x38c>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a67      	ldr	r2, [pc, #412]	; (800451c <UART_SetConfig+0x38c>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4432      	add	r2, r6
 8004390:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004392:	e0b9      	b.n	8004508 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004396:	461c      	mov	r4, r3
 8004398:	f04f 0500 	mov.w	r5, #0
 800439c:	4622      	mov	r2, r4
 800439e:	462b      	mov	r3, r5
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	6139      	str	r1, [r7, #16]
 80043a4:	415b      	adcs	r3, r3
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043ac:	1912      	adds	r2, r2, r4
 80043ae:	eb45 0303 	adc.w	r3, r5, r3
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	00d9      	lsls	r1, r3, #3
 80043bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c0:	00d0      	lsls	r0, r2, #3
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	eb12 0804 	adds.w	r8, r2, r4
 80043ca:	eb43 0905 	adc.w	r9, r3, r5
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043e6:	0082      	lsls	r2, r0, #2
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fb feec 	bl	80001c8 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4b49      	ldr	r3, [pc, #292]	; (800451c <UART_SetConfig+0x38c>)
 80043f6:	fba3 2302 	umull	r2, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	011e      	lsls	r6, r3, #4
 80043fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004400:	4618      	mov	r0, r3
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	1894      	adds	r4, r2, r2
 800440c:	60bc      	str	r4, [r7, #8]
 800440e:	415b      	adcs	r3, r3
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004416:	1812      	adds	r2, r2, r0
 8004418:	eb41 0303 	adc.w	r3, r1, r3
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	f04f 0500 	mov.w	r5, #0
 8004424:	00dd      	lsls	r5, r3, #3
 8004426:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800442a:	00d4      	lsls	r4, r2, #3
 800442c:	4622      	mov	r2, r4
 800442e:	462b      	mov	r3, r5
 8004430:	1814      	adds	r4, r2, r0
 8004432:	64bc      	str	r4, [r7, #72]	; 0x48
 8004434:	414b      	adcs	r3, r1
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	008b      	lsls	r3, r1, #2
 800444c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004450:	0082      	lsls	r2, r0, #2
 8004452:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004456:	f7fb feb7 	bl	80001c8 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <UART_SetConfig+0x38c>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	4a2a      	ldr	r2, [pc, #168]	; (800451c <UART_SetConfig+0x38c>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447e:	441e      	add	r6, r3
 8004480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004482:	4618      	mov	r0, r3
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	1894      	adds	r4, r2, r2
 800448e:	603c      	str	r4, [r7, #0]
 8004490:	415b      	adcs	r3, r3
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004498:	1812      	adds	r2, r2, r0
 800449a:	eb41 0303 	adc.w	r3, r1, r3
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	f04f 0500 	mov.w	r5, #0
 80044a6:	00dd      	lsls	r5, r3, #3
 80044a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ac:	00d4      	lsls	r4, r2, #3
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	eb12 0a00 	adds.w	sl, r2, r0
 80044b6:	eb43 0b01 	adc.w	fp, r3, r1
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4618      	mov	r0, r3
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	008b      	lsls	r3, r1, #2
 80044ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044d2:	0082      	lsls	r2, r0, #2
 80044d4:	4650      	mov	r0, sl
 80044d6:	4659      	mov	r1, fp
 80044d8:	f7fb fe76 	bl	80001c8 <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <UART_SetConfig+0x38c>)
 80044e2:	fba3 1302 	umull	r1, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2164      	movs	r1, #100	; 0x64
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a09      	ldr	r2, [pc, #36]	; (800451c <UART_SetConfig+0x38c>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4432      	add	r2, r6
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	377c      	adds	r7, #124	; 0x7c
 800450c:	46bd      	mov	sp, r7
 800450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004512:	bf00      	nop
 8004514:	40011000 	.word	0x40011000
 8004518:	40011400 	.word	0x40011400
 800451c:	51eb851f 	.word	0x51eb851f

08004520 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004520:	b084      	sub	sp, #16
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	f107 001c 	add.w	r0, r7, #28
 800452e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d122      	bne.n	800457e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800454c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 fb1c 	bl	8005bb0 <USB_CoreReset>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e01a      	b.n	80045b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f001 fb10 	bl	8005bb0 <USB_CoreReset>
 8004590:	4603      	mov	r3, r0
 8004592:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
 80045a6:	e005      	b.n	80045b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10b      	bne.n	80045d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f043 0206 	orr.w	r2, r3, #6
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045de:	b004      	add	sp, #16
 80045e0:	4770      	bx	lr
	...

080045e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d165      	bne.n	80046c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a41      	ldr	r2, [pc, #260]	; (8004700 <USB_SetTurnaroundTime+0x11c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d906      	bls.n	800460e <USB_SetTurnaroundTime+0x2a>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4a40      	ldr	r2, [pc, #256]	; (8004704 <USB_SetTurnaroundTime+0x120>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d202      	bcs.n	800460e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004608:	230f      	movs	r3, #15
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e062      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <USB_SetTurnaroundTime+0x120>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d306      	bcc.n	8004624 <USB_SetTurnaroundTime+0x40>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <USB_SetTurnaroundTime+0x124>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d202      	bcs.n	8004624 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800461e:	230e      	movs	r3, #14
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e057      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a38      	ldr	r2, [pc, #224]	; (8004708 <USB_SetTurnaroundTime+0x124>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d306      	bcc.n	800463a <USB_SetTurnaroundTime+0x56>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4a37      	ldr	r2, [pc, #220]	; (800470c <USB_SetTurnaroundTime+0x128>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d202      	bcs.n	800463a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004634:	230d      	movs	r3, #13
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e04c      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a33      	ldr	r2, [pc, #204]	; (800470c <USB_SetTurnaroundTime+0x128>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d306      	bcc.n	8004650 <USB_SetTurnaroundTime+0x6c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a32      	ldr	r2, [pc, #200]	; (8004710 <USB_SetTurnaroundTime+0x12c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d802      	bhi.n	8004650 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800464a:	230c      	movs	r3, #12
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e041      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <USB_SetTurnaroundTime+0x12c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d906      	bls.n	8004666 <USB_SetTurnaroundTime+0x82>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4a2e      	ldr	r2, [pc, #184]	; (8004714 <USB_SetTurnaroundTime+0x130>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d802      	bhi.n	8004666 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004660:	230b      	movs	r3, #11
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e036      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <USB_SetTurnaroundTime+0x130>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d906      	bls.n	800467c <USB_SetTurnaroundTime+0x98>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <USB_SetTurnaroundTime+0x134>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d802      	bhi.n	800467c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004676:	230a      	movs	r3, #10
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e02b      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a26      	ldr	r2, [pc, #152]	; (8004718 <USB_SetTurnaroundTime+0x134>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d906      	bls.n	8004692 <USB_SetTurnaroundTime+0xae>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a25      	ldr	r2, [pc, #148]	; (800471c <USB_SetTurnaroundTime+0x138>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d202      	bcs.n	8004692 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800468c:	2309      	movs	r3, #9
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e020      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a21      	ldr	r2, [pc, #132]	; (800471c <USB_SetTurnaroundTime+0x138>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d306      	bcc.n	80046a8 <USB_SetTurnaroundTime+0xc4>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4a20      	ldr	r2, [pc, #128]	; (8004720 <USB_SetTurnaroundTime+0x13c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d802      	bhi.n	80046a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046a2:	2308      	movs	r3, #8
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e015      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <USB_SetTurnaroundTime+0x13c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d906      	bls.n	80046be <USB_SetTurnaroundTime+0xda>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <USB_SetTurnaroundTime+0x140>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d202      	bcs.n	80046be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046b8:	2307      	movs	r3, #7
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e00a      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046be:	2306      	movs	r3, #6
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e007      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ca:	2309      	movs	r3, #9
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e001      	b.n	80046d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046d0:	2309      	movs	r3, #9
 80046d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	00d8acbf 	.word	0x00d8acbf
 8004704:	00e4e1c0 	.word	0x00e4e1c0
 8004708:	00f42400 	.word	0x00f42400
 800470c:	01067380 	.word	0x01067380
 8004710:	011a499f 	.word	0x011a499f
 8004714:	01312cff 	.word	0x01312cff
 8004718:	014ca43f 	.word	0x014ca43f
 800471c:	016e3600 	.word	0x016e3600
 8004720:	01a6ab1f 	.word	0x01a6ab1f
 8004724:	01e84800 	.word	0x01e84800

08004728 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d115      	bne.n	80047ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800479a:	2001      	movs	r0, #1
 800479c:	f7fc fcca 	bl	8001134 <HAL_Delay>
      ms++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f001 f972 	bl	8005a90 <USB_GetMode>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d01e      	beq.n	80047f0 <USB_SetCurrentMode+0x84>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b31      	cmp	r3, #49	; 0x31
 80047b6:	d9f0      	bls.n	800479a <USB_SetCurrentMode+0x2e>
 80047b8:	e01a      	b.n	80047f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d115      	bne.n	80047ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047cc:	2001      	movs	r0, #1
 80047ce:	f7fc fcb1 	bl	8001134 <HAL_Delay>
      ms++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 f959 	bl	8005a90 <USB_GetMode>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <USB_SetCurrentMode+0x84>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b31      	cmp	r3, #49	; 0x31
 80047e8:	d9f0      	bls.n	80047cc <USB_SetCurrentMode+0x60>
 80047ea:	e001      	b.n	80047f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e005      	b.n	80047fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b32      	cmp	r3, #50	; 0x32
 80047f4:	d101      	bne.n	80047fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004804:	b084      	sub	sp, #16
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e009      	b.n	8004838 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3340      	adds	r3, #64	; 0x40
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0e      	cmp	r3, #14
 800483c:	d9f2      	bls.n	8004824 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11c      	bne.n	800487e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f043 0302 	orr.w	r3, r3, #2
 8004856:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
 800487c:	e00b      	b.n	8004896 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800489c:	461a      	mov	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	4619      	mov	r1, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	461a      	mov	r2, r3
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10c      	bne.n	80048d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c2:	2100      	movs	r1, #0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f945 	bl	8004b54 <USB_SetDevSpeed>
 80048ca:	e008      	b.n	80048de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048cc:	2101      	movs	r1, #1
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f940 	bl	8004b54 <USB_SetDevSpeed>
 80048d4:	e003      	b.n	80048de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048d6:	2103      	movs	r1, #3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f93b 	bl	8004b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048de:	2110      	movs	r1, #16
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f8f3 	bl	8004acc <USB_FlushTxFifo>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f90f 	bl	8004b14 <USB_FlushRxFifo>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	461a      	mov	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	e043      	b.n	80049b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004940:	d118      	bne.n	8004974 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e013      	b.n	8004986 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e008      	b.n	8004986 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	461a      	mov	r2, r3
 8004994:	2300      	movs	r3, #0
 8004996:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	461a      	mov	r2, r3
 80049a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	3301      	adds	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b7      	bcc.n	800492a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e043      	b.n	8004a48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d6:	d118      	bne.n	8004a0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e013      	b.n	8004a1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	461a      	mov	r2, r3
 8004a02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	e008      	b.n	8004a1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	3301      	adds	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3b7      	bcc.n	80049c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f043 0210 	orr.w	r2, r3, #16
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <USB_DevInit+0x2c4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f043 0208 	orr.w	r2, r3, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac4:	b004      	add	sp, #16
 8004ac6:	4770      	bx	lr
 8004ac8:	803c3800 	.word	0x803c3800

08004acc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <USB_FlushTxFifo+0x44>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e006      	b.n	8004b04 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d0f1      	beq.n	8004ae6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2210      	movs	r2, #16
 8004b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <USB_FlushRxFifo+0x3c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e006      	b.n	8004b44 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d0f1      	beq.n	8004b26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	00030d40 	.word	0x00030d40

08004b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b087      	sub	sp, #28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0306 	and.w	r3, r3, #6
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
 8004baa:	e00a      	b.n	8004bc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d002      	beq.n	8004bb8 <USB_GetDevSpeed+0x32>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d102      	bne.n	8004bbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	75fb      	strb	r3, [r7, #23]
 8004bbc:	e001      	b.n	8004bc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bbe:	230f      	movs	r3, #15
 8004bc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d13a      	bne.n	8004c62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d155      	bne.n	8004cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	78db      	ldrb	r3, [r3, #3]
 8004c3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	059b      	lsls	r3, r3, #22
 8004c46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e036      	b.n	8004cd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11a      	bne.n	8004cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	78db      	ldrb	r3, [r3, #3]
 8004cb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d161      	bne.n	8004dc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d12:	d11f      	bne.n	8004d54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d74:	4013      	ands	r3, r2
 8004d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0159      	lsls	r1, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	4619      	mov	r1, r3
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <USB_DeactivateEndpoint+0x1b0>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]
 8004dbe:	e060      	b.n	8004e82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd6:	d11f      	bne.n	8004e18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	43db      	mvns	r3, r3
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e38:	4013      	ands	r3, r2
 8004e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	43db      	mvns	r3, r3
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <USB_DeactivateEndpoint+0x1b4>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	ec337800 	.word	0xec337800
 8004e94:	eff37800 	.word	0xeff37800

08004e98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 815c 	bne.w	8005172 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d132      	bne.n	8004f28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	0cdb      	lsrs	r3, r3, #19
 8004f22:	04db      	lsls	r3, r3, #19
 8004f24:	6113      	str	r3, [r2, #16]
 8004f26:	e074      	b.n	8005012 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f42:	0cdb      	lsrs	r3, r3, #19
 8004f44:	04db      	lsls	r3, r3, #19
 8004f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6959      	ldr	r1, [r3, #20]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	440b      	add	r3, r1
 8004f84:	1e59      	subs	r1, r3, #1
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f90:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <USB_EPStartXfer+0x370>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	0148      	lsls	r0, r1, #5
 8004f98:	69f9      	ldr	r1, [r7, #28]
 8004f9a:	4401      	add	r1, r0
 8004f9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	0148      	lsls	r0, r1, #5
 8004fbe:	69f9      	ldr	r1, [r7, #28]
 8004fc0:	4401      	add	r1, r0
 8004fc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	78db      	ldrb	r3, [r3, #3]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11f      	bne.n	8005012 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005010:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d14b      	bne.n	80050b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	78db      	ldrb	r3, [r3, #3]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d128      	bne.n	800508e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d110      	bne.n	800506e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e00f      	b.n	800508e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e12f      	b.n	8005310 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	78db      	ldrb	r3, [r3, #3]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d015      	beq.n	8005104 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8117 	beq.w	8005310 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fe:	4313      	orrs	r3, r2
 8005100:	634b      	str	r3, [r1, #52]	; 0x34
 8005102:	e105      	b.n	8005310 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d110      	bne.n	8005136 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e00f      	b.n	8005156 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005154:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68d9      	ldr	r1, [r3, #12]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	b298      	uxth	r0, r3
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa2b 	bl	80055c6 <USB_WritePacket>
 8005170:	e0ce      	b.n	8005310 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	0cdb      	lsrs	r3, r3, #19
 800518e:	04db      	lsls	r3, r3, #19
 8005190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d126      	bne.n	800520c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005202:	6113      	str	r3, [r2, #16]
 8005204:	e036      	b.n	8005274 <USB_EPStartXfer+0x3dc>
 8005206:	bf00      	nop
 8005208:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4413      	add	r3, r2
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	04d9      	lsls	r1, r3, #19
 8005234:	4b39      	ldr	r3, [pc, #228]	; (800531c <USB_EPStartXfer+0x484>)
 8005236:	400b      	ands	r3, r1
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	0148      	lsls	r0, r1, #5
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	4401      	add	r1, r0
 8005240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005244:	4313      	orrs	r3, r2
 8005246:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	8af9      	ldrh	r1, [r7, #22]
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	0148      	lsls	r0, r1, #5
 8005268:	69f9      	ldr	r1, [r7, #28]
 800526a:	4401      	add	r1, r0
 800526c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10d      	bne.n	8005296 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68d9      	ldr	r1, [r3, #12]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	460a      	mov	r2, r1
 8005294:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d128      	bne.n	80052f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d110      	bne.n	80052d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e00f      	b.n	80052f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800530e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	1ff80000 	.word	0x1ff80000

08005320 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b01      	cmp	r3, #1
 800533e:	f040 80cd 	bne.w	80054dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d132      	bne.n	80053b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800538c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	0cdb      	lsrs	r3, r3, #19
 80053aa:	04db      	lsls	r3, r3, #19
 80053ac:	6113      	str	r3, [r2, #16]
 80053ae:	e04e      	b.n	800544e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	0cdb      	lsrs	r3, r3, #19
 80053cc:	04db      	lsls	r3, r3, #19
 80053ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d903      	bls.n	8005408 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	0148      	lsls	r0, r1, #5
 8005442:	6979      	ldr	r1, [r7, #20]
 8005444:	4401      	add	r1, r0
 8005446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800544a:	4313      	orrs	r3, r2
 800544c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d11e      	bne.n	8005492 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	e092      	b.n	80055b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d07e      	beq.n	80055b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d6:	4313      	orrs	r3, r2
 80054d8:	634b      	str	r3, [r1, #52]	; 0x34
 80054da:	e06d      	b.n	80055b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	0cdb      	lsrs	r3, r3, #19
 80054f8:	04db      	lsls	r3, r3, #19
 80054fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800551a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800551e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800554e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	6939      	ldr	r1, [r7, #16]
 8005568:	0148      	lsls	r0, r1, #5
 800556a:	6979      	ldr	r1, [r7, #20]
 800556c:	4401      	add	r1, r0
 800556e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10d      	bne.n	8005598 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68d9      	ldr	r1, [r3, #12]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	460a      	mov	r2, r1
 8005596:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b089      	sub	sp, #36	; 0x24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	4611      	mov	r1, r2
 80055d2:	461a      	mov	r2, r3
 80055d4:	460b      	mov	r3, r1
 80055d6:	71fb      	strb	r3, [r7, #7]
 80055d8:	4613      	mov	r3, r2
 80055da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d123      	bne.n	8005634 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055ec:	88bb      	ldrh	r3, [r7, #4]
 80055ee:	3303      	adds	r3, #3
 80055f0:	089b      	lsrs	r3, r3, #2
 80055f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e018      	b.n	800562c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	031a      	lsls	r2, r3, #12
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005606:	461a      	mov	r2, r3
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3301      	adds	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3301      	adds	r3, #1
 8005618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3301      	adds	r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	3301      	adds	r3, #1
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	429a      	cmp	r2, r3
 8005632:	d3e2      	bcc.n	80055fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3724      	adds	r7, #36	; 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005642:	b480      	push	{r7}
 8005644:	b08b      	sub	sp, #44	; 0x2c
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	4613      	mov	r3, r2
 800564e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	b29b      	uxth	r3, r3
 800565e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005668:	2300      	movs	r3, #0
 800566a:	623b      	str	r3, [r7, #32]
 800566c:	e014      	b.n	8005698 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	601a      	str	r2, [r3, #0]
    pDest++;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	3301      	adds	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	3301      	adds	r3, #1
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	3301      	adds	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	3301      	adds	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	3301      	adds	r3, #1
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	429a      	cmp	r2, r3
 800569e:	d3e6      	bcc.n	800566e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056a0:	8bfb      	ldrh	r3, [r7, #30]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01e      	beq.n	80056e4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b0:	461a      	mov	r2, r3
 80056b2:	f107 0310 	add.w	r3, r7, #16
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	701a      	strb	r2, [r3, #0]
      i++;
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	3301      	adds	r3, #1
 80056d0:	623b      	str	r3, [r7, #32]
      pDest++;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	3301      	adds	r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056d8:	8bfb      	ldrh	r3, [r7, #30]
 80056da:	3b01      	subs	r3, #1
 80056dc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056de:	8bfb      	ldrh	r3, [r7, #30]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	372c      	adds	r7, #44	; 0x2c
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d12c      	bne.n	8005768 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	db12      	blt.n	8005746 <USB_EPSetStall+0x54>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00f      	beq.n	8005746 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005744:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e02b      	b.n	80057c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	db12      	blt.n	80057a0 <USB_EPSetStall+0xae>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800579e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d128      	bne.n	800583c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005804:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005808:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d003      	beq.n	800581a <USB_EPClearStall+0x4c>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d138      	bne.n	800588c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e027      	b.n	800588c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800585a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	78db      	ldrb	r3, [r3, #3]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <USB_EPClearStall+0x9e>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	78db      	ldrb	r3, [r3, #3]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d10f      	bne.n	800588c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005914:	f023 0302 	bic.w	r3, r3, #2
 8005918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005956:	f043 0302 	orr.w	r3, r3, #2
 800595a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4013      	ands	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	0c1b      	lsrs	r3, r3, #16
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	b29b      	uxth	r3, r3
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a26:	68bb      	ldr	r3, [r7, #8]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a82:	68bb      	ldr	r3, [r7, #8]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	460b      	mov	r3, r1
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	333c      	adds	r3, #60	; 0x3c
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4a26      	ldr	r2, [pc, #152]	; (8005bac <USB_EP0_OutStart+0xb8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d90a      	bls.n	8005b2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b28:	d101      	bne.n	8005b2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e037      	b.n	8005b9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5c:	f043 0318 	orr.w	r3, r3, #24
 8005b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10f      	bne.n	8005b9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	4f54300a 	.word	0x4f54300a

08005bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <USB_CoreReset+0x60>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e01a      	b.n	8005c02 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	daf3      	bge.n	8005bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f043 0201 	orr.w	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <USB_CoreReset+0x60>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d901      	bls.n	8005bf4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e006      	b.n	8005c02 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d0f1      	beq.n	8005be4 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	00030d40 	.word	0x00030d40

08005c14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c24:	f002 f95c 	bl	8007ee0 <USBD_static_malloc>
 8005c28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e066      	b.n	8005d0a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	7c1b      	ldrb	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d119      	bne.n	8005c80 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c50:	2202      	movs	r2, #2
 8005c52:	2181      	movs	r1, #129	; 0x81
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f002 f820 	bl	8007c9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c64:	2202      	movs	r2, #2
 8005c66:	2101      	movs	r1, #1
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f002 f816 	bl	8007c9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c7e:	e016      	b.n	8005cae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c80:	2340      	movs	r3, #64	; 0x40
 8005c82:	2202      	movs	r2, #2
 8005c84:	2181      	movs	r1, #129	; 0x81
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f002 f807 	bl	8007c9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	2202      	movs	r2, #2
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fffe 	bl	8007c9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cae:	2308      	movs	r3, #8
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	2182      	movs	r1, #130	; 0x82
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fff0 	bl	8007c9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	7c1b      	ldrb	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cee:	2101      	movs	r1, #1
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f002 f8c1 	bl	8007e78 <USBD_LL_PrepareReceive>
 8005cf6:	e007      	b.n	8005d08 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cfe:	2340      	movs	r3, #64	; 0x40
 8005d00:	2101      	movs	r1, #1
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f002 f8b8 	bl	8007e78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d1e:	2181      	movs	r1, #129	; 0x81
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 ffe0 	bl	8007ce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 ffd9 	bl	8007ce6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d3c:	2182      	movs	r1, #130	; 0x82
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 ffd1 	bl	8007ce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f002 f8c4 	bl	8007efc <USBD_static_free>
    pdev->pClassData = NULL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e0af      	b.n	8005f10 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d03f      	beq.n	8005e3c <USBD_CDC_Setup+0xb4>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	f040 809f 	bne.w	8005f00 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	88db      	ldrh	r3, [r3, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d02e      	beq.n	8005e28 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b25b      	sxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da16      	bge.n	8005e02 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005de0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	88d2      	ldrh	r2, [r2, #6]
 8005de6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	88db      	ldrh	r3, [r3, #6]
 8005dec:	2b07      	cmp	r3, #7
 8005dee:	bf28      	it	cs
 8005df0:	2307      	movcs	r3, #7
 8005df2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	89fa      	ldrh	r2, [r7, #14]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fb19 	bl	8007432 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e00:	e085      	b.n	8005f0e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	785a      	ldrb	r2, [r3, #1]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	88db      	ldrh	r3, [r3, #6]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	88db      	ldrh	r3, [r3, #6]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fb32 	bl	800748a <USBD_CtlPrepareRx>
      break;
 8005e26:	e072      	b.n	8005f0e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	7850      	ldrb	r0, [r2, #1]
 8005e34:	2200      	movs	r2, #0
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	4798      	blx	r3
      break;
 8005e3a:	e068      	b.n	8005f0e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b0b      	cmp	r3, #11
 8005e42:	d852      	bhi.n	8005eea <USBD_CDC_Setup+0x162>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <USBD_CDC_Setup+0xc4>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e7d 	.word	0x08005e7d
 8005e50:	08005ef9 	.word	0x08005ef9
 8005e54:	08005eeb 	.word	0x08005eeb
 8005e58:	08005eeb 	.word	0x08005eeb
 8005e5c:	08005eeb 	.word	0x08005eeb
 8005e60:	08005eeb 	.word	0x08005eeb
 8005e64:	08005eeb 	.word	0x08005eeb
 8005e68:	08005eeb 	.word	0x08005eeb
 8005e6c:	08005eeb 	.word	0x08005eeb
 8005e70:	08005eeb 	.word	0x08005eeb
 8005e74:	08005ea7 	.word	0x08005ea7
 8005e78:	08005ed1 	.word	0x08005ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d107      	bne.n	8005e98 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e88:	f107 030a 	add.w	r3, r7, #10
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 face 	bl	8007432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e96:	e032      	b.n	8005efe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fa58 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea4:	e02b      	b.n	8005efe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d107      	bne.n	8005ec2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005eb2:	f107 030d 	add.w	r3, r7, #13
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fab9 	bl	8007432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ec0:	e01d      	b.n	8005efe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 fa43 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ece:	e016      	b.n	8005efe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d00f      	beq.n	8005efc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fa36 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ee8:	e008      	b.n	8005efc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fa2f 	bl	8007350 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef6:	e002      	b.n	8005efe <USBD_CDC_Setup+0x176>
          break;
 8005ef8:	bf00      	nop
 8005efa:	e008      	b.n	8005f0e <USBD_CDC_Setup+0x186>
          break;
 8005efc:	bf00      	nop
      }
      break;
 8005efe:	e006      	b.n	8005f0e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fa24 	bl	8007350 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e04f      	b.n	8005fda <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3318      	adds	r3, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d029      	beq.n	8005fac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	3318      	adds	r3, #24
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	78f9      	ldrb	r1, [r7, #3]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4403      	add	r3, r0
 8005f78:	3344      	adds	r3, #68	; 0x44
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f80:	fb03 f301 	mul.w	r3, r3, r1
 8005f84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d110      	bne.n	8005fac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3318      	adds	r3, #24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f9e:	78f9      	ldrb	r1, [r7, #3]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 ff46 	bl	8007e36 <USBD_LL_Transmit>
 8005faa:	e015      	b.n	8005fd8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	e015      	b.n	8006030 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 ff56 	bl	8007eba <USBD_LL_GetRxDataSize>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800602a:	4611      	mov	r1, r2
 800602c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006046:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800604e:	2303      	movs	r3, #3
 8006050:	e01b      	b.n	800608a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <USBD_CDC_EP0_RxReady+0x50>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006062:	2bff      	cmp	r3, #255	; 0xff
 8006064:	d010      	beq.n	8006088 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006074:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800607c:	b292      	uxth	r2, r2
 800607e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2243      	movs	r2, #67	; 0x43
 80060a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000094 	.word	0x20000094

080060b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2243      	movs	r2, #67	; 0x43
 80060c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80060c2:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000050 	.word	0x20000050

080060d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2243      	movs	r2, #67	; 0x43
 80060e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80060e2:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	200000d8 	.word	0x200000d8

080060f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	220a      	movs	r2, #10
 8006100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006102:	4b03      	ldr	r3, [pc, #12]	; (8006110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	2000000c 	.word	0x2000000c

08006114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e004      	b.n	8006132 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006150:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006158:	2303      	movs	r3, #3
 800615a:	e008      	b.n	800616e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800618a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006192:	2303      	movs	r3, #3
 8006194:	e004      	b.n	80061a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e01a      	b.n	8006204 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d114      	bne.n	8006202 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2201      	movs	r2, #1
 80061dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061f6:	2181      	movs	r1, #129	; 0x81
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fe1c 	bl	8007e36 <USBD_LL_Transmit>

    ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800621a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006226:	2303      	movs	r3, #3
 8006228:	e016      	b.n	8006258 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	7c1b      	ldrb	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800623c:	2101      	movs	r1, #1
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fe1a 	bl	8007e78 <USBD_LL_PrepareReceive>
 8006244:	e007      	b.n	8006256 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	2101      	movs	r1, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fe11 	bl	8007e78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	e01f      	b.n	80062b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	79fa      	ldrb	r2, [r7, #7]
 80062aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f001 fc8d 	bl	8007bcc <USBD_LL_Init>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e016      	b.n	8006306 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	f107 020e 	add.w	r2, r7, #14
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fca4 	bl	8007c64 <USBD_LL_Start>
 800631c:	4603      	mov	r3, r0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006348:	2303      	movs	r3, #3
 800634a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	4611      	mov	r1, r2
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	78fa      	ldrb	r2, [r7, #3]
 8006394:	4611      	mov	r1, r2
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
  }

  return USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 ff90 	bl	80072dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d01a      	beq.n	8006416 <USBD_LL_SetupStage+0x72>
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d822      	bhi.n	800642a <USBD_LL_SetupStage+0x86>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <USBD_LL_SetupStage+0x4a>
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d00a      	beq.n	8006402 <USBD_LL_SetupStage+0x5e>
 80063ec:	e01d      	b.n	800642a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa62 	bl	80068c0 <USBD_StdDevReq>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e020      	b.n	8006444 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fac6 	bl	800699c <USBD_StdItfReq>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
      break;
 8006414:	e016      	b.n	8006444 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fb05 	bl	8006a2e <USBD_StdEPReq>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
      break;
 8006428:	e00c      	b.n	8006444 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fc73 	bl	8007d24 <USBD_LL_StallEP>
 800643e:	4603      	mov	r3, r0
 8006440:	73fb      	strb	r3, [r7, #15]
      break;
 8006442:	bf00      	nop
  }

  return ret;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	460b      	mov	r3, r1
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d138      	bne.n	80064d4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006468:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006470:	2b03      	cmp	r3, #3
 8006472:	d14a      	bne.n	800650a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	429a      	cmp	r2, r3
 800647e:	d913      	bls.n	80064a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	1ad2      	subs	r2, r2, r3
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4293      	cmp	r3, r2
 8006498:	bf28      	it	cs
 800649a:	4613      	movcs	r3, r2
 800649c:	461a      	mov	r2, r3
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 f80f 	bl	80074c4 <USBD_CtlContinueRx>
 80064a6:	e030      	b.n	800650a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d10b      	bne.n	80064cc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f001 f80a 	bl	80074e6 <USBD_CtlSendStatus>
 80064d2:	e01a      	b.n	800650a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d114      	bne.n	800650a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00e      	beq.n	800650a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	7afa      	ldrb	r2, [r7, #11]
 80064f6:	4611      	mov	r1, r2
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	4798      	blx	r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	e000      	b.n	800650c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	460b      	mov	r3, r1
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d16b      	bne.n	8006600 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3314      	adds	r3, #20
 800652c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006534:	2b02      	cmp	r3, #2
 8006536:	d156      	bne.n	80065e6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	429a      	cmp	r2, r3
 8006542:	d914      	bls.n	800656e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	1ad2      	subs	r2, r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	461a      	mov	r2, r3
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 ff84 	bl	8007468 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f001 fc86 	bl	8007e78 <USBD_LL_PrepareReceive>
 800656c:	e03b      	b.n	80065e6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d11c      	bne.n	80065b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006582:	429a      	cmp	r2, r3
 8006584:	d316      	bcc.n	80065b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006590:	429a      	cmp	r2, r3
 8006592:	d20f      	bcs.n	80065b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006594:	2200      	movs	r2, #0
 8006596:	2100      	movs	r1, #0
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 ff65 	bl	8007468 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a6:	2300      	movs	r3, #0
 80065a8:	2200      	movs	r2, #0
 80065aa:	2100      	movs	r1, #0
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f001 fc63 	bl	8007e78 <USBD_LL_PrepareReceive>
 80065b2:	e018      	b.n	80065e6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d10b      	bne.n	80065d8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065d8:	2180      	movs	r1, #128	; 0x80
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f001 fba2 	bl	8007d24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 ff93 	bl	800750c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d122      	bne.n	8006636 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff fe98 	bl	8006326 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065fe:	e01a      	b.n	8006636 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b03      	cmp	r3, #3
 800660a:	d114      	bne.n	8006636 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00e      	beq.n	8006636 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	7afa      	ldrb	r2, [r7, #11]
 8006622:	4611      	mov	r1, r2
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	4798      	blx	r3
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	e000      	b.n	8006638 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e02f      	b.n	80066d4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00f      	beq.n	800669e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6852      	ldr	r2, [r2, #4]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	4611      	mov	r1, r2
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800669e:	2340      	movs	r3, #64	; 0x40
 80066a0:	2200      	movs	r2, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 faf8 	bl	8007c9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2240      	movs	r2, #64	; 0x40
 80066b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	2200      	movs	r2, #0
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 faea 	bl	8007c9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670a:	b2da      	uxtb	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2204      	movs	r2, #4
 8006716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b04      	cmp	r3, #4
 800673a:	d106      	bne.n	800674a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006742:	b2da      	uxtb	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800676a:	2303      	movs	r3, #3
 800676c:	e012      	b.n	8006794 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d10b      	bne.n	8006792 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e014      	b.n	80067e0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d10d      	bne.n	80067de <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	4611      	mov	r1, r2
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067fe:	2303      	movs	r3, #3
 8006800:	e014      	b.n	800682c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b03      	cmp	r3, #3
 800680c:	d10d      	bne.n	800682a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6852      	ldr	r2, [r2, #4]
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	4611      	mov	r1, r2
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
  }

  return USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	3301      	adds	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068a0:	8a3b      	ldrh	r3, [r7, #16]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	b21a      	sxth	r2, r3
 80068a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068b0:	89fb      	ldrh	r3, [r7, #14]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068d6:	2b40      	cmp	r3, #64	; 0x40
 80068d8:	d005      	beq.n	80068e6 <USBD_StdDevReq+0x26>
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d853      	bhi.n	8006986 <USBD_StdDevReq+0xc6>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <USBD_StdDevReq+0x3a>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d14f      	bne.n	8006986 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
      break;
 80068f8:	e04a      	b.n	8006990 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	2b09      	cmp	r3, #9
 8006900:	d83b      	bhi.n	800697a <USBD_StdDevReq+0xba>
 8006902:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <USBD_StdDevReq+0x48>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	0800695d 	.word	0x0800695d
 800690c:	08006971 	.word	0x08006971
 8006910:	0800697b 	.word	0x0800697b
 8006914:	08006967 	.word	0x08006967
 8006918:	0800697b 	.word	0x0800697b
 800691c:	0800693b 	.word	0x0800693b
 8006920:	08006931 	.word	0x08006931
 8006924:	0800697b 	.word	0x0800697b
 8006928:	08006953 	.word	0x08006953
 800692c:	08006945 	.word	0x08006945
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9de 	bl	8006cf4 <USBD_GetDescriptor>
          break;
 8006938:	e024      	b.n	8006984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb43 	bl	8006fc8 <USBD_SetAddress>
          break;
 8006942:	e01f      	b.n	8006984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fb82 	bl	8007050 <USBD_SetConfig>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]
          break;
 8006950:	e018      	b.n	8006984 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc21 	bl	800719c <USBD_GetConfig>
          break;
 800695a:	e013      	b.n	8006984 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc52 	bl	8007208 <USBD_GetStatus>
          break;
 8006964:	e00e      	b.n	8006984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc81 	bl	8007270 <USBD_SetFeature>
          break;
 800696e:	e009      	b.n	8006984 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fc90 	bl	8007298 <USBD_ClrFeature>
          break;
 8006978:	e004      	b.n	8006984 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fce7 	bl	8007350 <USBD_CtlError>
          break;
 8006982:	bf00      	nop
      }
      break;
 8006984:	e004      	b.n	8006990 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fce1 	bl	8007350 <USBD_CtlError>
      break;
 800698e:	bf00      	nop
  }

  return ret;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop

0800699c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d005      	beq.n	80069c2 <USBD_StdItfReq+0x26>
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d82f      	bhi.n	8006a1a <USBD_StdItfReq+0x7e>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <USBD_StdItfReq+0x26>
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d12b      	bne.n	8006a1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d81d      	bhi.n	8006a0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	889b      	ldrh	r3, [r3, #4]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d813      	bhi.n	8006a02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	88db      	ldrh	r3, [r3, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d110      	bne.n	8006a16 <USBD_StdItfReq+0x7a>
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10d      	bne.n	8006a16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fd73 	bl	80074e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a00:	e009      	b.n	8006a16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fca3 	bl	8007350 <USBD_CtlError>
          break;
 8006a0a:	e004      	b.n	8006a16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fc9e 	bl	8007350 <USBD_CtlError>
          break;
 8006a14:	e000      	b.n	8006a18 <USBD_StdItfReq+0x7c>
          break;
 8006a16:	bf00      	nop
      }
      break;
 8006a18:	e004      	b.n	8006a24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc97 	bl	8007350 <USBD_CtlError>
      break;
 8006a22:	bf00      	nop
  }

  return ret;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	889b      	ldrh	r3, [r3, #4]
 8006a40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d007      	beq.n	8006a5e <USBD_StdEPReq+0x30>
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	f200 8145 	bhi.w	8006cde <USBD_StdEPReq+0x2b0>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <USBD_StdEPReq+0x44>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	f040 8140 	bne.w	8006cde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	e13a      	b.n	8006ce8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d007      	beq.n	8006a8a <USBD_StdEPReq+0x5c>
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	f300 8129 	bgt.w	8006cd2 <USBD_StdEPReq+0x2a4>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d07f      	beq.n	8006b84 <USBD_StdEPReq+0x156>
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d03c      	beq.n	8006b02 <USBD_StdEPReq+0xd4>
 8006a88:	e123      	b.n	8006cd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d002      	beq.n	8006a9c <USBD_StdEPReq+0x6e>
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d016      	beq.n	8006ac8 <USBD_StdEPReq+0x9a>
 8006a9a:	e02c      	b.n	8006af6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <USBD_StdEPReq+0x90>
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b80      	cmp	r3, #128	; 0x80
 8006aa6:	d00a      	beq.n	8006abe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f939 	bl	8007d24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ab2:	2180      	movs	r1, #128	; 0x80
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f935 	bl	8007d24 <USBD_LL_StallEP>
 8006aba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006abc:	e020      	b.n	8006b00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fc45 	bl	8007350 <USBD_CtlError>
              break;
 8006ac6:	e01b      	b.n	8006b00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	885b      	ldrh	r3, [r3, #2]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10e      	bne.n	8006aee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <USBD_StdEPReq+0xc0>
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d008      	beq.n	8006aee <USBD_StdEPReq+0xc0>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f91b 	bl	8007d24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fcf9 	bl	80074e6 <USBD_CtlSendStatus>

              break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fc29 	bl	8007350 <USBD_CtlError>
              break;
 8006afe:	bf00      	nop
          }
          break;
 8006b00:	e0ec      	b.n	8006cdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d002      	beq.n	8006b14 <USBD_StdEPReq+0xe6>
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d016      	beq.n	8006b40 <USBD_StdEPReq+0x112>
 8006b12:	e030      	b.n	8006b76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <USBD_StdEPReq+0x108>
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b80      	cmp	r3, #128	; 0x80
 8006b1e:	d00a      	beq.n	8006b36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f8fd 	bl	8007d24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f8f9 	bl	8007d24 <USBD_LL_StallEP>
 8006b32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b34:	e025      	b.n	8006b82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fc09 	bl	8007350 <USBD_CtlError>
              break;
 8006b3e:	e020      	b.n	8006b82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11b      	bne.n	8006b80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f903 	bl	8007d62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fcc2 	bl	80074e6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4798      	blx	r3
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbe9 	bl	8007350 <USBD_CtlError>
              break;
 8006b7e:	e000      	b.n	8006b82 <USBD_StdEPReq+0x154>
              break;
 8006b80:	bf00      	nop
          }
          break;
 8006b82:	e0ab      	b.n	8006cdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d002      	beq.n	8006b96 <USBD_StdEPReq+0x168>
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d032      	beq.n	8006bfa <USBD_StdEPReq+0x1cc>
 8006b94:	e097      	b.n	8006cc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <USBD_StdEPReq+0x17e>
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d004      	beq.n	8006bac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fbd3 	bl	8007350 <USBD_CtlError>
                break;
 8006baa:	e091      	b.n	8006cd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da0b      	bge.n	8006bcc <USBD_StdEPReq+0x19e>
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	3310      	adds	r3, #16
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3304      	adds	r3, #4
 8006bca:	e00b      	b.n	8006be4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	3304      	adds	r3, #4
 8006be4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fc1d 	bl	8007432 <USBD_CtlSendData>
              break;
 8006bf8:	e06a      	b.n	8006cd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da11      	bge.n	8006c26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	3324      	adds	r3, #36	; 0x24
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d117      	bne.n	8006c4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fb96 	bl	8007350 <USBD_CtlError>
                  break;
 8006c24:	e054      	b.n	8006cd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fb83 	bl	8007350 <USBD_CtlError>
                  break;
 8006c4a:	e041      	b.n	8006cd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da0b      	bge.n	8006c6c <USBD_StdEPReq+0x23e>
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	3310      	adds	r3, #16
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	3304      	adds	r3, #4
 8006c6a:	e00b      	b.n	8006c84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	4413      	add	r3, r2
 8006c82:	3304      	adds	r3, #4
 8006c84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <USBD_StdEPReq+0x264>
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	d103      	bne.n	8006c9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e00e      	b.n	8006cb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 f87e 	bl	8007da0 <USBD_LL_IsStallEP>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2201      	movs	r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	e002      	b.n	8006cb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fbb7 	bl	8007432 <USBD_CtlSendData>
              break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fb41 	bl	8007350 <USBD_CtlError>
              break;
 8006cce:	bf00      	nop
          }
          break;
 8006cd0:	e004      	b.n	8006cdc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb3b 	bl	8007350 <USBD_CtlError>
          break;
 8006cda:	bf00      	nop
      }
      break;
 8006cdc:	e004      	b.n	8006ce8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fb35 	bl	8007350 <USBD_CtlError>
      break;
 8006ce6:	bf00      	nop
  }

  return ret;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	885b      	ldrh	r3, [r3, #2]
 8006d0e:	0a1b      	lsrs	r3, r3, #8
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	2b06      	cmp	r3, #6
 8006d16:	f200 8128 	bhi.w	8006f6a <USBD_GetDescriptor+0x276>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <USBD_GetDescriptor+0x2c>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d95 	.word	0x08006d95
 8006d2c:	08006f6b 	.word	0x08006f6b
 8006d30:	08006f6b 	.word	0x08006f6b
 8006d34:	08006f0b 	.word	0x08006f0b
 8006d38:	08006f37 	.word	0x08006f37
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
      break;
 8006d52:	e112      	b.n	8006f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7c1b      	ldrb	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f107 0208 	add.w	r2, r7, #8
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
 8006d6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	2202      	movs	r2, #2
 8006d74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d76:	e100      	b.n	8006f7a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	f107 0208 	add.w	r2, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	2202      	movs	r2, #2
 8006d90:	701a      	strb	r2, [r3, #0]
      break;
 8006d92:	e0f2      	b.n	8006f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	885b      	ldrh	r3, [r3, #2]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	f200 80ac 	bhi.w	8006ef8 <USBD_GetDescriptor+0x204>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <USBD_GetDescriptor+0xb4>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006df5 	.word	0x08006df5
 8006db0:	08006e29 	.word	0x08006e29
 8006db4:	08006e5d 	.word	0x08006e5d
 8006db8:	08006e91 	.word	0x08006e91
 8006dbc:	08006ec5 	.word	0x08006ec5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	7c12      	ldrb	r2, [r2, #16]
 8006dd8:	f107 0108 	add.w	r1, r7, #8
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006de2:	e091      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fab2 	bl	8007350 <USBD_CtlError>
            err++;
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	3301      	adds	r3, #1
 8006df0:	72fb      	strb	r3, [r7, #11]
          break;
 8006df2:	e089      	b.n	8006f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7c12      	ldrb	r2, [r2, #16]
 8006e0c:	f107 0108 	add.w	r1, r7, #8
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e16:	e077      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa98 	bl	8007350 <USBD_CtlError>
            err++;
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	3301      	adds	r3, #1
 8006e24:	72fb      	strb	r3, [r7, #11]
          break;
 8006e26:	e06f      	b.n	8006f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4a:	e05d      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa7e 	bl	8007350 <USBD_CtlError>
            err++;
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	3301      	adds	r3, #1
 8006e58:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5a:	e055      	b.n	8006f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	7c12      	ldrb	r2, [r2, #16]
 8006e74:	f107 0108 	add.w	r1, r7, #8
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
 8006e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e7e:	e043      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa64 	bl	8007350 <USBD_CtlError>
            err++;
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e8e:	e03b      	b.n	8006f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	7c12      	ldrb	r2, [r2, #16]
 8006ea8:	f107 0108 	add.w	r1, r7, #8
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb2:	e029      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa4a 	bl	8007350 <USBD_CtlError>
            err++;
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec2:	e021      	b.n	8006f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7c12      	ldrb	r2, [r2, #16]
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee6:	e00f      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa30 	bl	8007350 <USBD_CtlError>
            err++;
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef6:	e007      	b.n	8006f08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa28 	bl	8007350 <USBD_CtlError>
          err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006f06:	bf00      	nop
      }
      break;
 8006f08:	e037      	b.n	8006f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7c1b      	ldrb	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	f107 0208 	add.w	r2, r7, #8
 8006f1e:	4610      	mov	r0, r2
 8006f20:	4798      	blx	r3
 8006f22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f24:	e029      	b.n	8006f7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa11 	bl	8007350 <USBD_CtlError>
        err++;
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	3301      	adds	r3, #1
 8006f32:	72fb      	strb	r3, [r7, #11]
      break;
 8006f34:	e021      	b.n	8006f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7c1b      	ldrb	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10d      	bne.n	8006f5a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	f107 0208 	add.w	r2, r7, #8
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4798      	blx	r3
 8006f4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	2207      	movs	r2, #7
 8006f56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f58:	e00f      	b.n	8006f7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9f7 	bl	8007350 <USBD_CtlError>
        err++;
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	3301      	adds	r3, #1
 8006f66:	72fb      	strb	r3, [r7, #11]
      break;
 8006f68:	e007      	b.n	8006f7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9ef 	bl	8007350 <USBD_CtlError>
      err++;
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	3301      	adds	r3, #1
 8006f76:	72fb      	strb	r3, [r7, #11]
      break;
 8006f78:	bf00      	nop
  }

  if (err != 0U)
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11e      	bne.n	8006fbe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	88db      	ldrh	r3, [r3, #6]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d016      	beq.n	8006fb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f88:	893b      	ldrh	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00e      	beq.n	8006fac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	88da      	ldrh	r2, [r3, #6]
 8006f92:	893b      	ldrh	r3, [r7, #8]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	bf28      	it	cs
 8006f98:	4613      	movcs	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f9e:	893b      	ldrh	r3, [r7, #8]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa44 	bl	8007432 <USBD_CtlSendData>
 8006faa:	e009      	b.n	8006fc0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9ce 	bl	8007350 <USBD_CtlError>
 8006fb4:	e004      	b.n	8006fc0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa95 	bl	80074e6 <USBD_CtlSendStatus>
 8006fbc:	e000      	b.n	8006fc0 <USBD_GetDescriptor+0x2cc>
    return;
 8006fbe:	bf00      	nop
  }
}
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	889b      	ldrh	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d131      	bne.n	800703e <USBD_SetAddress+0x76>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	88db      	ldrh	r3, [r3, #6]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d12d      	bne.n	800703e <USBD_SetAddress+0x76>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe8:	d829      	bhi.n	800703e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d104      	bne.n	800700c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9a3 	bl	8007350 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700a:	e01d      	b.n	8007048 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7bfa      	ldrb	r2, [r7, #15]
 8007010:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 feed 	bl	8007df8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa61 	bl	80074e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007032:	e009      	b.n	8007048 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703c:	e004      	b.n	8007048 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f985 	bl	8007350 <USBD_CtlError>
  }
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	4b4c      	ldr	r3, [pc, #304]	; (8007198 <USBD_SetConfig+0x148>)
 8007066:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007068:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <USBD_SetConfig+0x148>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d905      	bls.n	800707c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f96c 	bl	8007350 <USBD_CtlError>
    return USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e088      	b.n	800718e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d002      	beq.n	800708e <USBD_SetConfig+0x3e>
 8007088:	2b03      	cmp	r3, #3
 800708a:	d025      	beq.n	80070d8 <USBD_SetConfig+0x88>
 800708c:	e071      	b.n	8007172 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800708e:	4b42      	ldr	r3, [pc, #264]	; (8007198 <USBD_SetConfig+0x148>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01c      	beq.n	80070d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007096:	4b40      	ldr	r3, [pc, #256]	; (8007198 <USBD_SetConfig+0x148>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070a0:	4b3d      	ldr	r3, [pc, #244]	; (8007198 <USBD_SetConfig+0x148>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff f948 	bl	800633c <USBD_SetClassConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f949 	bl	8007350 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070be:	e065      	b.n	800718c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fa10 	bl	80074e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2203      	movs	r2, #3
 80070ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070ce:	e05d      	b.n	800718c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa08 	bl	80074e6 <USBD_CtlSendStatus>
      break;
 80070d6:	e059      	b.n	800718c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070d8:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <USBD_SetConfig+0x148>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d112      	bne.n	8007106 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070e8:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <USBD_SetConfig+0x148>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070f2:	4b29      	ldr	r3, [pc, #164]	; (8007198 <USBD_SetConfig+0x148>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff f93b 	bl	8006374 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9f1 	bl	80074e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007104:	e042      	b.n	800718c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <USBD_SetConfig+0x148>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d02a      	beq.n	800716a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff f929 	bl	8006374 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007122:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <USBD_SetConfig+0x148>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800712c:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <USBD_SetConfig+0x148>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f902 	bl	800633c <USBD_SetClassConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00f      	beq.n	8007162 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f903 	bl	8007350 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff f90e 	bl	8006374 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007160:	e014      	b.n	800718c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f9bf 	bl	80074e6 <USBD_CtlSendStatus>
      break;
 8007168:	e010      	b.n	800718c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9bb 	bl	80074e6 <USBD_CtlSendStatus>
      break;
 8007170:	e00c      	b.n	800718c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8eb 	bl	8007350 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <USBD_SetConfig+0x148>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff f8f7 	bl	8006374 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	bf00      	nop
  }

  return ret;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2000019e 	.word	0x2000019e

0800719c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d004      	beq.n	80071b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8cd 	bl	8007350 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071b6:	e023      	b.n	8007200 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	dc02      	bgt.n	80071ca <USBD_GetConfig+0x2e>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dc03      	bgt.n	80071d0 <USBD_GetConfig+0x34>
 80071c8:	e015      	b.n	80071f6 <USBD_GetConfig+0x5a>
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d00b      	beq.n	80071e6 <USBD_GetConfig+0x4a>
 80071ce:	e012      	b.n	80071f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3308      	adds	r3, #8
 80071da:	2201      	movs	r2, #1
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f927 	bl	8007432 <USBD_CtlSendData>
        break;
 80071e4:	e00c      	b.n	8007200 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	2201      	movs	r2, #1
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f91f 	bl	8007432 <USBD_CtlSendData>
        break;
 80071f4:	e004      	b.n	8007200 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8a9 	bl	8007350 <USBD_CtlError>
        break;
 80071fe:	bf00      	nop
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007218:	b2db      	uxtb	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	2b02      	cmp	r3, #2
 800721e:	d81e      	bhi.n	800725e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	88db      	ldrh	r3, [r3, #6]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d004      	beq.n	8007232 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f890 	bl	8007350 <USBD_CtlError>
        break;
 8007230:	e01a      	b.n	8007268 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f043 0202 	orr.w	r2, r3, #2
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	330c      	adds	r3, #12
 8007252:	2202      	movs	r2, #2
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f8eb 	bl	8007432 <USBD_CtlSendData>
      break;
 800725c:	e004      	b.n	8007268 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f875 	bl	8007350 <USBD_CtlError>
      break;
 8007266:	bf00      	nop
  }
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	885b      	ldrh	r3, [r3, #2]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d106      	bne.n	8007290 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f92b 	bl	80074e6 <USBD_CtlSendStatus>
  }
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d80b      	bhi.n	80072c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	885b      	ldrh	r3, [r3, #2]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10c      	bne.n	80072d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f910 	bl	80074e6 <USBD_CtlSendStatus>
      }
      break;
 80072c6:	e004      	b.n	80072d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f840 	bl	8007350 <USBD_CtlError>
      break;
 80072d0:	e000      	b.n	80072d4 <USBD_ClrFeature+0x3c>
      break;
 80072d2:	bf00      	nop
  }
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff fabb 	bl	8006882 <SWAPBYTE>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff faae 	bl	8006882 <SWAPBYTE>
 8007326:	4603      	mov	r3, r0
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7ff faa1 	bl	8006882 <SWAPBYTE>
 8007340:	4603      	mov	r3, r0
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	80da      	strh	r2, [r3, #6]
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800735a:	2180      	movs	r1, #128	; 0x80
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fce1 	bl	8007d24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007362:	2100      	movs	r1, #0
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fcdd 	bl	8007d24 <USBD_LL_StallEP>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d036      	beq.n	80073f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800738c:	6938      	ldr	r0, [r7, #16]
 800738e:	f000 f836 	bl	80073fe <USBD_GetLen>
 8007392:	4603      	mov	r3, r0
 8007394:	3301      	adds	r3, #1
 8007396:	b29b      	uxth	r3, r3
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4413      	add	r3, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	3301      	adds	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	4413      	add	r3, r2
 80073b8:	2203      	movs	r2, #3
 80073ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	3301      	adds	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073c2:	e013      	b.n	80073ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	3301      	adds	r3, #1
 80073d4:	613b      	str	r3, [r7, #16]
    idx++;
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	3301      	adds	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	3301      	adds	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e7      	bne.n	80073c4 <USBD_GetString+0x52>
 80073f4:	e000      	b.n	80073f8 <USBD_GetString+0x86>
    return;
 80073f6:	bf00      	nop
  }
}
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800740e:	e005      	b.n	800741c <USBD_GetLen+0x1e>
  {
    len++;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	3301      	adds	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3301      	adds	r3, #1
 800741a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f5      	bne.n	8007410 <USBD_GetLen+0x12>
  }

  return len;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2202      	movs	r2, #2
 8007442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	2100      	movs	r1, #0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fcec 	bl	8007e36 <USBD_LL_Transmit>

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	2100      	movs	r1, #0
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fcdb 	bl	8007e36 <USBD_LL_Transmit>

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2203      	movs	r2, #3
 800749a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	2100      	movs	r1, #0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fcdf 	bl	8007e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	2100      	movs	r1, #0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fcce 	bl	8007e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2204      	movs	r2, #4
 80074f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074f6:	2300      	movs	r3, #0
 80074f8:	2200      	movs	r2, #0
 80074fa:	2100      	movs	r1, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fc9a 	bl	8007e36 <USBD_LL_Transmit>

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2205      	movs	r2, #5
 8007518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800751c:	2300      	movs	r3, #0
 800751e:	2200      	movs	r2, #0
 8007520:	2100      	movs	r1, #0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fca8 	bl	8007e78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007538:	2200      	movs	r2, #0
 800753a:	4912      	ldr	r1, [pc, #72]	; (8007584 <MX_USB_DEVICE_Init+0x50>)
 800753c:	4812      	ldr	r0, [pc, #72]	; (8007588 <MX_USB_DEVICE_Init+0x54>)
 800753e:	f7fe fe8f 	bl	8006260 <USBD_Init>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007548:	f7f9 fc30 	bl	8000dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800754c:	490f      	ldr	r1, [pc, #60]	; (800758c <MX_USB_DEVICE_Init+0x58>)
 800754e:	480e      	ldr	r0, [pc, #56]	; (8007588 <MX_USB_DEVICE_Init+0x54>)
 8007550:	f7fe feb6 	bl	80062c0 <USBD_RegisterClass>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800755a:	f7f9 fc27 	bl	8000dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800755e:	490c      	ldr	r1, [pc, #48]	; (8007590 <MX_USB_DEVICE_Init+0x5c>)
 8007560:	4809      	ldr	r0, [pc, #36]	; (8007588 <MX_USB_DEVICE_Init+0x54>)
 8007562:	f7fe fdd7 	bl	8006114 <USBD_CDC_RegisterInterface>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800756c:	f7f9 fc1e 	bl	8000dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <MX_USB_DEVICE_Init+0x54>)
 8007572:	f7fe fecc 	bl	800630e <USBD_Start>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800757c:	f7f9 fc16 	bl	8000dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007580:	bf00      	nop
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000130 	.word	0x20000130
 8007588:	20000508 	.word	0x20000508
 800758c:	20000018 	.word	0x20000018
 8007590:	2000011c 	.word	0x2000011c

08007594 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007598:	2200      	movs	r2, #0
 800759a:	4905      	ldr	r1, [pc, #20]	; (80075b0 <CDC_Init_FS+0x1c>)
 800759c:	4805      	ldr	r0, [pc, #20]	; (80075b4 <CDC_Init_FS+0x20>)
 800759e:	f7fe fdce 	bl	800613e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075a2:	4905      	ldr	r1, [pc, #20]	; (80075b8 <CDC_Init_FS+0x24>)
 80075a4:	4803      	ldr	r0, [pc, #12]	; (80075b4 <CDC_Init_FS+0x20>)
 80075a6:	f7fe fde8 	bl	800617a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000fd8 	.word	0x20000fd8
 80075b4:	20000508 	.word	0x20000508
 80075b8:	200007d8 	.word	0x200007d8

080075bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	71fb      	strb	r3, [r7, #7]
 80075d8:	4613      	mov	r3, r2
 80075da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	2b23      	cmp	r3, #35	; 0x23
 80075e0:	d84a      	bhi.n	8007678 <CDC_Control_FS+0xac>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <CDC_Control_FS+0x1c>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007679 	.word	0x08007679
 80075ec:	08007679 	.word	0x08007679
 80075f0:	08007679 	.word	0x08007679
 80075f4:	08007679 	.word	0x08007679
 80075f8:	08007679 	.word	0x08007679
 80075fc:	08007679 	.word	0x08007679
 8007600:	08007679 	.word	0x08007679
 8007604:	08007679 	.word	0x08007679
 8007608:	08007679 	.word	0x08007679
 800760c:	08007679 	.word	0x08007679
 8007610:	08007679 	.word	0x08007679
 8007614:	08007679 	.word	0x08007679
 8007618:	08007679 	.word	0x08007679
 800761c:	08007679 	.word	0x08007679
 8007620:	08007679 	.word	0x08007679
 8007624:	08007679 	.word	0x08007679
 8007628:	08007679 	.word	0x08007679
 800762c:	08007679 	.word	0x08007679
 8007630:	08007679 	.word	0x08007679
 8007634:	08007679 	.word	0x08007679
 8007638:	08007679 	.word	0x08007679
 800763c:	08007679 	.word	0x08007679
 8007640:	08007679 	.word	0x08007679
 8007644:	08007679 	.word	0x08007679
 8007648:	08007679 	.word	0x08007679
 800764c:	08007679 	.word	0x08007679
 8007650:	08007679 	.word	0x08007679
 8007654:	08007679 	.word	0x08007679
 8007658:	08007679 	.word	0x08007679
 800765c:	08007679 	.word	0x08007679
 8007660:	08007679 	.word	0x08007679
 8007664:	08007679 	.word	0x08007679
 8007668:	08007679 	.word	0x08007679
 800766c:	08007679 	.word	0x08007679
 8007670:	08007679 	.word	0x08007679
 8007674:	08007679 	.word	0x08007679
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007678:	bf00      	nop
  }

  return (USBD_OK);
 800767a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4805      	ldr	r0, [pc, #20]	; (80076ac <CDC_Receive_FS+0x24>)
 8007696:	f7fe fd70 	bl	800617a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800769a:	4804      	ldr	r0, [pc, #16]	; (80076ac <CDC_Receive_FS+0x24>)
 800769c:	f7fe fdb6 	bl	800620c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000508 	.word	0x20000508

080076b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076c0:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <CDC_Transmit_FS+0x48>)
 80076c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e00b      	b.n	80076ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076d6:	887b      	ldrh	r3, [r7, #2]
 80076d8:	461a      	mov	r2, r3
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4806      	ldr	r0, [pc, #24]	; (80076f8 <CDC_Transmit_FS+0x48>)
 80076de:	f7fe fd2e 	bl	800613e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076e2:	4805      	ldr	r0, [pc, #20]	; (80076f8 <CDC_Transmit_FS+0x48>)
 80076e4:	f7fe fd62 	bl	80061ac <USBD_CDC_TransmitPacket>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000508 	.word	0x20000508

080076fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800770e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2212      	movs	r2, #18
 8007730:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007732:	4b03      	ldr	r3, [pc, #12]	; (8007740 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	2000014c 	.word	0x2000014c

08007744 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2204      	movs	r2, #4
 8007754:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007756:	4b03      	ldr	r3, [pc, #12]	; (8007764 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	20000160 	.word	0x20000160

08007768 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <USBD_FS_ProductStrDescriptor+0x34>)
 800777e:	4808      	ldr	r0, [pc, #32]	; (80077a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007780:	f7ff fdf7 	bl	8007372 <USBD_GetString>
 8007784:	e004      	b.n	8007790 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <USBD_FS_ProductStrDescriptor+0x34>)
 800778a:	4805      	ldr	r0, [pc, #20]	; (80077a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800778c:	f7ff fdf1 	bl	8007372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200017d8 	.word	0x200017d8
 80077a0:	0800801c 	.word	0x0800801c

080077a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	4904      	ldr	r1, [pc, #16]	; (80077c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077b4:	4804      	ldr	r0, [pc, #16]	; (80077c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077b6:	f7ff fddc 	bl	8007372 <USBD_GetString>
  return USBD_StrDesc;
 80077ba:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200017d8 	.word	0x200017d8
 80077c8:	08008034 	.word	0x08008034

080077cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4603      	mov	r3, r0
 80077d4:	6039      	str	r1, [r7, #0]
 80077d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	221a      	movs	r2, #26
 80077dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077de:	f000 f843 	bl	8007868 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077e2:	4b02      	ldr	r3, [pc, #8]	; (80077ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000164 	.word	0x20000164

080077f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d105      	bne.n	800780e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	4907      	ldr	r1, [pc, #28]	; (8007824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007806:	4808      	ldr	r0, [pc, #32]	; (8007828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007808:	f7ff fdb3 	bl	8007372 <USBD_GetString>
 800780c:	e004      	b.n	8007818 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4904      	ldr	r1, [pc, #16]	; (8007824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007814:	f7ff fdad 	bl	8007372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007818:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200017d8 	.word	0x200017d8
 8007828:	08008048 	.word	0x08008048

0800782c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4907      	ldr	r1, [pc, #28]	; (8007860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007842:	4808      	ldr	r0, [pc, #32]	; (8007864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007844:	f7ff fd95 	bl	8007372 <USBD_GetString>
 8007848:	e004      	b.n	8007854 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4904      	ldr	r1, [pc, #16]	; (8007860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800784e:	4805      	ldr	r0, [pc, #20]	; (8007864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007850:	f7ff fd8f 	bl	8007372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007854:	4b02      	ldr	r3, [pc, #8]	; (8007860 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200017d8 	.word	0x200017d8
 8007864:	08008054 	.word	0x08008054

08007868 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <Get_SerialNum+0x44>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007874:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <Get_SerialNum+0x48>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <Get_SerialNum+0x4c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800788e:	2208      	movs	r2, #8
 8007890:	4909      	ldr	r1, [pc, #36]	; (80078b8 <Get_SerialNum+0x50>)
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f814 	bl	80078c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007898:	2204      	movs	r2, #4
 800789a:	4908      	ldr	r1, [pc, #32]	; (80078bc <Get_SerialNum+0x54>)
 800789c:	68b8      	ldr	r0, [r7, #8]
 800789e:	f000 f80f 	bl	80078c0 <IntToUnicode>
  }
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	1fff7a10 	.word	0x1fff7a10
 80078b0:	1fff7a14 	.word	0x1fff7a14
 80078b4:	1fff7a18 	.word	0x1fff7a18
 80078b8:	20000166 	.word	0x20000166
 80078bc:	20000176 	.word	0x20000176

080078c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
 80078d6:	e027      	b.n	8007928 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	0f1b      	lsrs	r3, r3, #28
 80078dc:	2b09      	cmp	r3, #9
 80078de:	d80b      	bhi.n	80078f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	0f1b      	lsrs	r3, r3, #28
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	4619      	mov	r1, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	440b      	add	r3, r1
 80078f0:	3230      	adds	r2, #48	; 0x30
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e00a      	b.n	800790e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	0f1b      	lsrs	r3, r3, #28
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4619      	mov	r1, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	440b      	add	r3, r1
 8007908:	3237      	adds	r2, #55	; 0x37
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	3301      	adds	r3, #1
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4413      	add	r3, r2
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	3301      	adds	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
 8007928:	7dfa      	ldrb	r2, [r7, #23]
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	429a      	cmp	r2, r3
 800792e:	d3d3      	bcc.n	80078d8 <IntToUnicode+0x18>
  }
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	605a      	str	r2, [r3, #4]
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007960:	d13a      	bne.n	80079d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007962:	2300      	movs	r3, #0
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	6313      	str	r3, [r2, #48]	; 0x30
 8007972:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800797e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007984:	2302      	movs	r3, #2
 8007986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800798c:	2303      	movs	r3, #3
 800798e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007990:	230a      	movs	r3, #10
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4619      	mov	r1, r3
 800799a:	4812      	ldr	r0, [pc, #72]	; (80079e4 <HAL_PCD_MspInit+0xa4>)
 800799c:	f7f9 fd00 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	4a0e      	ldr	r2, [pc, #56]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 80079a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079aa:	6353      	str	r3, [r2, #52]	; 0x34
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 80079b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079ba:	6453      	str	r3, [r2, #68]	; 0x44
 80079bc:	4b08      	ldr	r3, [pc, #32]	; (80079e0 <HAL_PCD_MspInit+0xa0>)
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	2043      	movs	r0, #67	; 0x43
 80079ce:	f7f9 fcb0 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079d2:	2043      	movs	r0, #67	; 0x43
 80079d4:	f7f9 fcc9 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079d8:	bf00      	nop
 80079da:	3728      	adds	r7, #40	; 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40023800 	.word	0x40023800
 80079e4:	40020000 	.word	0x40020000

080079e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f7fe fcd0 	bl	80063a4 <USBD_LL_SetupStage>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	4613      	mov	r3, r2
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	4619      	mov	r1, r3
 8007a36:	f7fe fd0a 	bl	800644e <USBD_LL_DataOutStage>
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	3348      	adds	r3, #72	; 0x48
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	78fb      	ldrb	r3, [r7, #3]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f7fe fd53 	bl	8006514 <USBD_LL_DataInStage>
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fe67 	bl	8006758 <USBD_LL_SOF>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
 8007aaa:	e008      	b.n	8007abe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d102      	bne.n	8007aba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	e001      	b.n	8007abe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007aba:	f7f9 f977 	bl	8000dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ac4:	7bfa      	ldrb	r2, [r7, #15]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fe fe07 	bl	80066dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe fdb3 	bl	8006640 <USBD_LL_Reset>
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fe02 	bl	80066fc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b0a:	f043 0301 	orr.w	r3, r3, #1
 8007b0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <HAL_PCD_SuspendCallback+0x48>)
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	4a03      	ldr	r2, [pc, #12]	; (8007b2c <HAL_PCD_SuspendCallback+0x48>)
 8007b1e:	f043 0306 	orr.w	r3, r3, #6
 8007b22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	e000ed00 	.word	0xe000ed00

08007b30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fdf2 	bl	8006728 <USBD_LL_Resume>
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fe40 	bl	80067e8 <USBD_LL_IsoOUTIncomplete>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	4611      	mov	r1, r2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fe08 	bl	800679c <USBD_LL_IsoINIncomplete>
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fe46 	bl	8006834 <USBD_LL_DevConnected>
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fe43 	bl	800684a <USBD_LL_DevDisconnected>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d13c      	bne.n	8007c56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007bdc:	4a20      	ldr	r2, [pc, #128]	; (8007c60 <USBD_LL_Init+0x94>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1e      	ldr	r2, [pc, #120]	; (8007c60 <USBD_LL_Init+0x94>)
 8007be8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bec:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <USBD_LL_Init+0x94>)
 8007bee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <USBD_LL_Init+0x94>)
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bfa:	4b19      	ldr	r3, [pc, #100]	; (8007c60 <USBD_LL_Init+0x94>)
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c00:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c06:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c08:	2202      	movs	r2, #2
 8007c0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c0c:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c18:	4b11      	ldr	r3, [pc, #68]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c24:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c2a:	480d      	ldr	r0, [pc, #52]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c2c:	f7f9 fd6d 	bl	800170a <HAL_PCD_Init>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c36:	f7f9 f8b9 	bl	8000dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c3a:	2180      	movs	r1, #128	; 0x80
 8007c3c:	4808      	ldr	r0, [pc, #32]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c3e:	f7fa feca 	bl	80029d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c42:	2240      	movs	r2, #64	; 0x40
 8007c44:	2100      	movs	r1, #0
 8007c46:	4806      	ldr	r0, [pc, #24]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c48:	f7fa fe7e 	bl	8002948 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c4c:	2280      	movs	r2, #128	; 0x80
 8007c4e:	2101      	movs	r1, #1
 8007c50:	4803      	ldr	r0, [pc, #12]	; (8007c60 <USBD_LL_Init+0x94>)
 8007c52:	f7fa fe79 	bl	8002948 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	200019d8 	.word	0x200019d8

08007c64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7f9 fe62 	bl	8001944 <HAL_PCD_Start>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f942 	bl	8007f10 <USBD_Get_USB_Status>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4603      	mov	r3, r0
 8007caa:	70fb      	strb	r3, [r7, #3]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70bb      	strb	r3, [r7, #2]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cc2:	78bb      	ldrb	r3, [r7, #2]
 8007cc4:	883a      	ldrh	r2, [r7, #0]
 8007cc6:	78f9      	ldrb	r1, [r7, #3]
 8007cc8:	f7fa fa46 	bl	8002158 <HAL_PCD_EP_Open>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f91c 	bl	8007f10 <USBD_Get_USB_Status>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fa fa8f 	bl	8002228 <HAL_PCD_EP_Close>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f8fd 	bl	8007f10 <USBD_Get_USB_Status>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d3e:	78fa      	ldrb	r2, [r7, #3]
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fa fb67 	bl	8002416 <HAL_PCD_EP_SetStall>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f8de 	bl	8007f10 <USBD_Get_USB_Status>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fa fbac 	bl	80024de <HAL_PCD_EP_ClrStall>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f8bf 	bl	8007f10 <USBD_Get_USB_Status>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007db2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	da0b      	bge.n	8007dd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	1a9b      	subs	r3, r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	333e      	adds	r3, #62	; 0x3e
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	e00b      	b.n	8007dec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fa f979 	bl	800210e <HAL_PCD_SetAddress>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f874 	bl	8007f10 <USBD_Get_USB_Status>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b086      	sub	sp, #24
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	460b      	mov	r3, r1
 8007e44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e54:	7af9      	ldrb	r1, [r7, #11]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	f7fa fa92 	bl	8002382 <HAL_PCD_EP_Transmit>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 f853 	bl	8007f10 <USBD_Get_USB_Status>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	460b      	mov	r3, r1
 8007e86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e96:	7af9      	ldrb	r1, [r7, #11]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	f7fa fa0e 	bl	80022bc <HAL_PCD_EP_Receive>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f832 	bl	8007f10 <USBD_Get_USB_Status>
 8007eac:	4603      	mov	r3, r0
 8007eae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ecc:	78fa      	ldrb	r2, [r7, #3]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fa fa3e 	bl	8002352 <HAL_PCD_EP_GetRxCount>
 8007ed6:	4603      	mov	r3, r0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ee8:	4b03      	ldr	r3, [pc, #12]	; (8007ef8 <USBD_static_malloc+0x18>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	200001a0 	.word	0x200001a0

08007efc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d817      	bhi.n	8007f54 <USBD_Get_USB_Status+0x44>
 8007f24:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <USBD_Get_USB_Status+0x1c>)
 8007f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2a:	bf00      	nop
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f43 	.word	0x08007f43
 8007f34:	08007f49 	.word	0x08007f49
 8007f38:	08007f4f 	.word	0x08007f4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f40:	e00b      	b.n	8007f5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f42:	2303      	movs	r3, #3
 8007f44:	73fb      	strb	r3, [r7, #15]
    break;
 8007f46:	e008      	b.n	8007f5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4c:	e005      	b.n	8007f5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	73fb      	strb	r3, [r7, #15]
    break;
 8007f52:	e002      	b.n	8007f5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	73fb      	strb	r3, [r7, #15]
    break;
 8007f58:	bf00      	nop
  }
  return usb_status;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <__libc_init_array>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4d0d      	ldr	r5, [pc, #52]	; (8007fa0 <__libc_init_array+0x38>)
 8007f6c:	4c0d      	ldr	r4, [pc, #52]	; (8007fa4 <__libc_init_array+0x3c>)
 8007f6e:	1b64      	subs	r4, r4, r5
 8007f70:	10a4      	asrs	r4, r4, #2
 8007f72:	2600      	movs	r6, #0
 8007f74:	42a6      	cmp	r6, r4
 8007f76:	d109      	bne.n	8007f8c <__libc_init_array+0x24>
 8007f78:	4d0b      	ldr	r5, [pc, #44]	; (8007fa8 <__libc_init_array+0x40>)
 8007f7a:	4c0c      	ldr	r4, [pc, #48]	; (8007fac <__libc_init_array+0x44>)
 8007f7c:	f000 f82e 	bl	8007fdc <_init>
 8007f80:	1b64      	subs	r4, r4, r5
 8007f82:	10a4      	asrs	r4, r4, #2
 8007f84:	2600      	movs	r6, #0
 8007f86:	42a6      	cmp	r6, r4
 8007f88:	d105      	bne.n	8007f96 <__libc_init_array+0x2e>
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f90:	4798      	blx	r3
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7ee      	b.n	8007f74 <__libc_init_array+0xc>
 8007f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9a:	4798      	blx	r3
 8007f9c:	3601      	adds	r6, #1
 8007f9e:	e7f2      	b.n	8007f86 <__libc_init_array+0x1e>
 8007fa0:	08008084 	.word	0x08008084
 8007fa4:	08008084 	.word	0x08008084
 8007fa8:	08008084 	.word	0x08008084
 8007fac:	08008088 	.word	0x08008088

08007fb0 <memcpy>:
 8007fb0:	440a      	add	r2, r1
 8007fb2:	4291      	cmp	r1, r2
 8007fb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007fb8:	d100      	bne.n	8007fbc <memcpy+0xc>
 8007fba:	4770      	bx	lr
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc6:	4291      	cmp	r1, r2
 8007fc8:	d1f9      	bne.n	8007fbe <memcpy+0xe>
 8007fca:	bd10      	pop	{r4, pc}

08007fcc <memset>:
 8007fcc:	4402      	add	r2, r0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d100      	bne.n	8007fd6 <memset+0xa>
 8007fd4:	4770      	bx	lr
 8007fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fda:	e7f9      	b.n	8007fd0 <memset+0x4>

08007fdc <_init>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	bf00      	nop
 8007fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe2:	bc08      	pop	{r3}
 8007fe4:	469e      	mov	lr, r3
 8007fe6:	4770      	bx	lr

08007fe8 <_fini>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr
